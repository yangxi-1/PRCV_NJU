Search.setIndex({envversion:46,filenames:["doc/tutorials/calib3d/camera_calibration/camera_calibration","doc/tutorials/calib3d/camera_calibration_square_chess/camera_calibration_square_chess","doc/tutorials/calib3d/table_of_content_calib3d/table_of_content_calib3d","doc/tutorials/contrib/retina_model/retina_model","doc/tutorials/contrib/table_of_content_contrib/table_of_content_contrib","doc/tutorials/core/adding_images/adding_images","doc/tutorials/core/basic_geometric_drawing/basic_geometric_drawing","doc/tutorials/core/basic_linear_transform/basic_linear_transform","doc/tutorials/core/discrete_fourier_transform/discrete_fourier_transform","doc/tutorials/core/file_input_output_with_xml_yml/file_input_output_with_xml_yml","doc/tutorials/core/how_to_scan_images/how_to_scan_images","doc/tutorials/core/interoperability_with_OpenCV_1/interoperability_with_OpenCV_1","doc/tutorials/core/mat-mask-operations/mat-mask-operations","doc/tutorials/core/mat_the_basic_image_container/mat_the_basic_image_container","doc/tutorials/core/random_generator_and_text/random_generator_and_text","doc/tutorials/core/table_of_content_core/table_of_content_core","doc/tutorials/features2d/detection_of_planar_objects/detection_of_planar_objects","doc/tutorials/features2d/feature_description/feature_description","doc/tutorials/features2d/feature_detection/feature_detection","doc/tutorials/features2d/feature_flann_matcher/feature_flann_matcher","doc/tutorials/features2d/feature_homography/feature_homography","doc/tutorials/features2d/table_of_content_features2d/table_of_content_features2d","doc/tutorials/features2d/trackingmotion/corner_subpixeles/corner_subpixeles","doc/tutorials/features2d/trackingmotion/generic_corner_detector/generic_corner_detector","doc/tutorials/features2d/trackingmotion/good_features_to_track/good_features_to_track","doc/tutorials/features2d/trackingmotion/harris_detector/harris_detector","doc/tutorials/general/table_of_content_general/table_of_content_general","doc/tutorials/gpu/gpu-basics-similarity/gpu-basics-similarity","doc/tutorials/gpu/table_of_content_gpu/table_of_content_gpu","doc/tutorials/highgui/table_of_content_highgui/table_of_content_highgui","doc/tutorials/highgui/trackbar/trackbar","doc/tutorials/highgui/video-input-psnr-ssim/video-input-psnr-ssim","doc/tutorials/highgui/video-write/video-write","doc/tutorials/imgproc/erosion_dilatation/erosion_dilatation","doc/tutorials/imgproc/gausian_median_blur_bilateral_filter/gausian_median_blur_bilateral_filter","doc/tutorials/imgproc/histograms/back_projection/back_projection","doc/tutorials/imgproc/histograms/histogram_calculation/histogram_calculation","doc/tutorials/imgproc/histograms/histogram_comparison/histogram_comparison","doc/tutorials/imgproc/histograms/histogram_equalization/histogram_equalization","doc/tutorials/imgproc/histograms/template_matching/template_matching","doc/tutorials/imgproc/imgtrans/canny_detector/canny_detector","doc/tutorials/imgproc/imgtrans/copyMakeBorder/copyMakeBorder","doc/tutorials/imgproc/imgtrans/filter_2d/filter_2d","doc/tutorials/imgproc/imgtrans/hough_circle/hough_circle","doc/tutorials/imgproc/imgtrans/hough_lines/hough_lines","doc/tutorials/imgproc/imgtrans/laplace_operator/laplace_operator","doc/tutorials/imgproc/imgtrans/remap/remap","doc/tutorials/imgproc/imgtrans/sobel_derivatives/sobel_derivatives","doc/tutorials/imgproc/imgtrans/warp_affine/warp_affine","doc/tutorials/imgproc/opening_closing_hats/opening_closing_hats","doc/tutorials/imgproc/pyramids/pyramids","doc/tutorials/imgproc/shapedescriptors/bounding_rects_circles/bounding_rects_circles","doc/tutorials/imgproc/shapedescriptors/bounding_rotated_ellipses/bounding_rotated_ellipses","doc/tutorials/imgproc/shapedescriptors/find_contours/find_contours","doc/tutorials/imgproc/shapedescriptors/hull/hull","doc/tutorials/imgproc/shapedescriptors/moments/moments","doc/tutorials/imgproc/shapedescriptors/point_polygon_test/point_polygon_test","doc/tutorials/imgproc/table_of_content_imgproc/table_of_content_imgproc","doc/tutorials/imgproc/threshold/threshold","doc/tutorials/introduction/android_binary_package/O4A_SDK","doc/tutorials/introduction/android_binary_package/android_dev_intro","doc/tutorials/introduction/android_binary_package/dev_with_OCV_on_Android","doc/tutorials/introduction/clojure_dev_intro/clojure_dev_intro","doc/tutorials/introduction/crosscompilation/arm_crosscompile_with_cmake","doc/tutorials/introduction/desktop_java/java_dev_intro","doc/tutorials/introduction/display_image/display_image","doc/tutorials/introduction/how_to_write_a_tutorial/how_to_write_a_tutorial","doc/tutorials/introduction/ios_install/ios_install","doc/tutorials/introduction/java_eclipse/java_eclipse","doc/tutorials/introduction/linux_eclipse/linux_eclipse","doc/tutorials/introduction/linux_gcc_cmake/linux_gcc_cmake","doc/tutorials/introduction/linux_install/linux_install","doc/tutorials/introduction/load_save_image/load_save_image","doc/tutorials/introduction/table_of_content_introduction/table_of_content_introduction","doc/tutorials/introduction/windows_install/windows_install","doc/tutorials/introduction/windows_visual_studio_Opencv/windows_visual_studio_Opencv","doc/tutorials/introduction/windows_visual_studio_image_watch/windows_visual_studio_image_watch","doc/tutorials/ios/hello/hello","doc/tutorials/ios/image_manipulation/image_manipulation","doc/tutorials/ios/table_of_content_ios/table_of_content_ios","doc/tutorials/ios/video_processing/video_processing","doc/tutorials/ml/introduction_to_svm/introduction_to_svm","doc/tutorials/ml/non_linear_svms/non_linear_svms","doc/tutorials/ml/table_of_content_ml/table_of_content_ml","doc/tutorials/objdetect/cascade_classifier/cascade_classifier","doc/tutorials/objdetect/table_of_content_objdetect/table_of_content_objdetect","doc/tutorials/tutorials","doc/tutorials/video/table_of_content_video/table_of_content_video","doc/tutorials/viz/creating_widgets/creating_widgets","doc/tutorials/viz/launching_viz/launching_viz","doc/tutorials/viz/table_of_content_viz/table_of_content_viz","doc/tutorials/viz/transformations/transformations","doc/tutorials/viz/widget_pose/widget_pose","doc/user_guide/ug_features2d","doc/user_guide/ug_intelperc","doc/user_guide/ug_kinect","doc/user_guide/ug_mat","doc/user_guide/ug_traincascade","doc/user_guide/user_guide","index","modules/calib3d/doc/calib3d","modules/calib3d/doc/camera_calibration_and_3d_reconstruction","modules/contrib/doc/contrib","modules/contrib/doc/facerec/colormaps","modules/contrib/doc/facerec/facerec_api","modules/contrib/doc/facerec/facerec_changelog","modules/contrib/doc/facerec/facerec_tutorial","modules/contrib/doc/facerec/index","modules/contrib/doc/facerec/tutorial/facerec_gender_classification","modules/contrib/doc/facerec/tutorial/facerec_save_load","modules/contrib/doc/facerec/tutorial/facerec_video_recognition","modules/contrib/doc/openfabmap","modules/contrib/doc/retina/index","modules/contrib/doc/stereo","modules/core/doc/basic_structures","modules/core/doc/clustering","modules/core/doc/core","modules/core/doc/drawing_functions","modules/core/doc/dynamic_structures","modules/core/doc/intro","modules/core/doc/old_basic_structures","modules/core/doc/old_xml_yaml_persistence","modules/core/doc/opengl_interop","modules/core/doc/operations_on_arrays","modules/core/doc/utility_and_system_functions_and_macros","modules/core/doc/xml_yaml_persistence","modules/features2d/doc/common_interfaces_of_descriptor_extractors","modules/features2d/doc/common_interfaces_of_descriptor_matchers","modules/features2d/doc/common_interfaces_of_feature_detectors","modules/features2d/doc/common_interfaces_of_generic_descriptor_matchers","modules/features2d/doc/drawing_function_of_keypoints_and_matches","modules/features2d/doc/feature_detection_and_description","modules/features2d/doc/features2d","modules/features2d/doc/object_categorization","modules/flann/doc/flann","modules/flann/doc/flann_clustering","modules/flann/doc/flann_fast_approximate_nearest_neighbor_search","modules/gpu/doc/camera_calibration_and_3d_reconstruction","modules/gpu/doc/data_structures","modules/gpu/doc/feature_detection_and_description","modules/gpu/doc/gpu","modules/gpu/doc/image_filtering","modules/gpu/doc/image_processing","modules/gpu/doc/initalization_and_information","modules/gpu/doc/introduction","modules/gpu/doc/matrix_reductions","modules/gpu/doc/object_detection","modules/gpu/doc/operations_on_matrices","modules/gpu/doc/per_element_operations","modules/gpu/doc/video","modules/highgui/doc/highgui","modules/highgui/doc/qt_new_functions","modules/highgui/doc/reading_and_writing_images_and_video","modules/highgui/doc/user_interface","modules/imgproc/doc/feature_detection","modules/imgproc/doc/filtering","modules/imgproc/doc/geometric_transformations","modules/imgproc/doc/histograms","modules/imgproc/doc/imgproc","modules/imgproc/doc/miscellaneous_transformations","modules/imgproc/doc/motion_analysis_and_object_tracking","modules/imgproc/doc/object_detection","modules/imgproc/doc/structural_analysis_and_shape_descriptors","modules/legacy/doc/common_interfaces_of_descriptor_extractors","modules/legacy/doc/common_interfaces_of_generic_descriptor_matchers","modules/legacy/doc/expectation_maximization","modules/legacy/doc/feature_detection_and_description","modules/legacy/doc/histograms","modules/legacy/doc/legacy","modules/legacy/doc/motion_analysis","modules/legacy/doc/planar_subdivisions","modules/ml/doc/boosting","modules/ml/doc/decision_trees","modules/ml/doc/ertrees","modules/ml/doc/expectation_maximization","modules/ml/doc/gradient_boosted_trees","modules/ml/doc/k_nearest_neighbors","modules/ml/doc/ml","modules/ml/doc/mldata","modules/ml/doc/neural_networks","modules/ml/doc/normal_bayes_classifier","modules/ml/doc/random_trees","modules/ml/doc/statistical_models","modules/ml/doc/support_vector_machines","modules/nonfree/doc/feature_detection","modules/nonfree/doc/nonfree","modules/objdetect/doc/cascade_classification","modules/objdetect/doc/latent_svm","modules/objdetect/doc/objdetect","modules/ocl/doc/camera_calibration_and_3D_reconstruction","modules/ocl/doc/data_structures","modules/ocl/doc/feature_detection_and_description","modules/ocl/doc/image_filtering","modules/ocl/doc/image_processing","modules/ocl/doc/introduction","modules/ocl/doc/matrix_reductions","modules/ocl/doc/ml_machine_learning","modules/ocl/doc/object_detection","modules/ocl/doc/ocl","modules/ocl/doc/operations_on_matrices","modules/ocl/doc/structures_and_utility_functions","modules/ocl/doc/video_analysis","modules/photo/doc/denoising","modules/photo/doc/inpainting","modules/photo/doc/photo","modules/refman","modules/stitching/doc/autocalib","modules/stitching/doc/blenders","modules/stitching/doc/camera","modules/stitching/doc/exposure_compensation","modules/stitching/doc/high_level","modules/stitching/doc/introduction","modules/stitching/doc/matching","modules/stitching/doc/motion_estimation","modules/stitching/doc/seam_estimation","modules/stitching/doc/stitching","modules/stitching/doc/warpers","modules/superres/doc/super_resolution","modules/superres/doc/superres","modules/video/doc/motion_analysis_and_object_tracking","modules/video/doc/video","modules/viz/doc/viz","modules/viz/doc/viz3d","modules/viz/doc/widget","platforms/android/java","platforms/android/refman","platforms/android/service/doc/BaseLoaderCallback","platforms/android/service/doc/InstallCallbackInterface","platforms/android/service/doc/Intro","platforms/android/service/doc/JavaHelper","platforms/android/service/doc/LoaderCallbackInterface","platforms/android/service/doc/UseCases","platforms/android/service/doc/index"],objects:{"":{"AdjusterAdapter : public FeatureDetector":[128,1,1,""],"Affine3d getWidgetPose() const":[223,2,1,""],"Affine3d getWidgetPose(const String &amp;id) const":[222,2,1,"Affine3d getWidgetPose(const String &id) const"],"Affine3d makeCameraPose(const Vec3f&amp; position, const Vec3f&amp; focal_point, const Vec3f&amp; y_dir)":[222,2,1,"Affine3d makeCameraPose(const Vec3f& position, const Vec3f& focal_point, const Vec3f& y_dir)"],"Affine3d viz::makeTransformToGlobal(const Vec3f&amp; axis_x, const Vec3f&amp; axis_y, const Vec3f&amp; axis_z, const Vec3f&amp; origin)":[222,2,1,"Affine3d viz::makeTransformToGlobal(const Vec3f& axis_x, const Vec3f& axis_y, const Vec3f& axis_z, const Vec3f& origin)"],"BFMatcher : public DescriptorMatcher":[127,1,1,""],"BFMatcher::BFMatcher(int normType, bool crossCheck)":[127,2,1,""],"BOWImgDescriptorExtractor::BOWImgDescriptorExtractor(const Ptr&lt;DescriptorExtractor&gt;&amp; dextractor, const Ptr&lt;DescriptorMatcher&gt;&amp; dmatcher)":[133,2,1,"BOWImgDescriptorExtractor::BOWImgDescriptorExtractor(const Ptr<DescriptorExtractor>& dextractor, const Ptr<DescriptorMatcher>& dmatcher)"],"BOWKMeansTrainer : public BOWTrainer":[133,1,1,""],"BOWKMeansTrainer::BOWKMeansTrainer(int clusterCount, const TermCriteria&amp; termcrit, int attempts, int flags)":[133,2,1,"BOWKMeansTrainer::BOWKMeansTrainer(int clusterCount, const TermCriteria& termcrit, int attempts, int flags)"],"BRISK : public Feature2D":[131,1,1,""],"BRISK::BRISK(int thresh, int octaves, float patternScale)":[131,2,1,""],"BRISK::BRISK(std::vector&lt;float&gt; &amp;radiusList, std::vector&lt;int&gt; &amp;numberList, float dMax, float dMin, std::vector&lt;int&gt; indexChange)":[131,2,1,"BRISK::BRISK(std::vector<float> &radiusList, std::vector<int> &numberList, float dMax, float dMin, std::vector<int> indexChange)"],"BackgroundSubtractor : public Algorithm":[219,1,1,""],"BackgroundSubtractorMOG : public BackgroundSubtractor":[219,1,1,""],"BackgroundSubtractorMOG2 : public BackgroundSubtractor":[219,1,1,""],"BackgroundSubtractorMOG2::BackgroundSubtractorMOG2()":[219,2,1,""],"BackgroundSubtractorMOG2::BackgroundSubtractorMOG2(int history, float varThreshold, bool bShadowDetection)":[219,2,1,""],"BackgroundSubtractorMOG::BackgroundSubtractorMOG()":[219,2,1,""],"BackgroundSubtractorMOG::BackgroundSubtractorMOG(int history, int nmixtures, double backgroundRatio, double noiseSigma)":[219,2,1,""],"BriefDescriptorExtractor : public DescriptorExtractor":[126,1,1,""],"Buffer ogl::Buffer::clone(Target target , bool autoRelease) const":[122,2,1,""],"CV_Assert(expr)":[124,2,1,""],"CalonderDescriptorExtractor : public DescriptorExtractor":[163,1,1,""],"Camera getCamera() const":[222,2,1,""],"Camera(const Matx33d &amp;K, const Size &amp;window_size)":[222,2,1,"Camera(const Matx33d &K, const Size &window_size)"],"Camera(const Matx44d &amp;proj, const Size &amp;window_size)":[222,2,1,"Camera(const Matx44d &proj, const Size &window_size)"],"Camera(const Vec2d &amp;fov, const Size &amp;window_size)":[222,2,1,"Camera(const Vec2d &fov, const Size &window_size)"],"Camera(double f_x, double f_y, double c_x, double c_y, const Size &amp;window_size)":[222,2,1,"Camera(double f_x, double f_y, double c_x, double c_y, const Size &window_size)"],"CascadeClassifier::CascadeClassifier(const string&amp; filename)":[186,2,1,"CascadeClassifier::CascadeClassifier(const string& filename)"],"ConvertData getConvertElem(int fromType, int toType)":[123,2,1,""],"ConvertScaleData getConvertScaleElem(int fromType, int toType)":[123,2,1,""],"CvANN_MLP : public CvStatModel":[179,1,1,""],"CvANN_MLP::CvANN_MLP()":[179,2,1,""],"CvANN_MLP::CvANN_MLP(const CvMat* layerSizes, int activateFunc, double fparam1, double fparam2)":[179,2,1,""],"CvANN_MLP_TrainParams::CvANN_MLP_TrainParams()":[179,2,1,""],"CvANN_MLP_TrainParams::CvANN_MLP_TrainParams(CvTermCriteria term_crit, int train_method, double param1, double param2)":[179,2,1,""],"CvArr* cvReshapeMatND(const CvArr* arr, int sizeof_header, CvArr* header, int new_cn, int new_dims, int* new_sizes)":[120,4,1,""],"CvBoost : public CvStatModel":[171,1,1,""],"CvBoost::CvBoost()":[171,2,1,""],"CvBoost::CvBoost(const CvMat* trainData, int tflag, const CvMat* responses, const CvMat* varIdx, const CvMat* sampleIdx, const CvMat* varType, const CvMat* missingDataMask, CvBoostParams params)":[171,2,1,""],"CvBoost::CvBoost(const Mat&amp; trainData, int tflag, const Mat&amp; responses, const Mat&amp; varIdx, const Mat&amp; sampleIdx, const Mat&amp; varType, const Mat&amp; missingDataMask, CvBoostParams params)":[171,2,1,"CvBoost::CvBoost(const Mat& trainData, int tflag, const Mat& responses, const Mat& varIdx, const Mat& sampleIdx, const Mat& varType, const Mat& missingDataMask, CvBoostParams params)"],"CvBoostParams : public CvDTreeParams":[171,3,1,""],"CvBoostParams::CvBoostParams()":[171,2,1,""],"CvBoostParams::CvBoostParams(int boost_type, int weak_count, double weight_trim_rate, int max_depth, bool use_surrogates, const float* priors)":[171,2,1,""],"CvBoostTree : public CvDTree":[171,1,1,""],"CvBox2D cvFitEllipse2(const CvArr* points)":[162,4,1,""],"CvBox2D cvMinAreaRect2(const CvArr* points, CvMemStorage* storage)":[162,4,1,""],"CvCapture* cvCaptureFromCAM(int device)":[152,4,1,""],"CvCapture* cvCaptureFromFile(const char* filename)":[152,4,1,""],"CvDTree : public CvStatModel":[172,1,1,""],"CvDTreeNode* CvDTree::predict(const CvMat* sample, const CvMat* missingDataMask, bool preprocessedInput) const":[172,2,1,""],"CvDTreeNode* CvDTree::predict(const Mat&amp; sample, const Mat&amp; missingDataMask, bool preprocessedInput) const":[172,2,1,"CvDTreeNode* CvDTree::predict(const Mat& sample, const Mat& missingDataMask, bool preprocessedInput) const"],"CvDTreeNode* left":[172,5,1,""],"CvDTreeNode* parent":[172,5,1,""],"CvDTreeNode* right":[172,5,1,""],"CvDTreeParams::CvDTreeParams()":[172,2,1,""],"CvDTreeParams::CvDTreeParams(int max_depth, int min_sample_count, float regression_accuracy, bool use_surrogates, int max_categories, int cv_folds, bool use_1se_rule, bool truncate_pruned_tree, const float* priors)":[172,2,1,""],"CvDTreeSplit* next":[172,5,1,""],"CvDTreeSplit* split":[172,5,1,""],"CvDTreeTrainData* CvDTree::get_data() const":[172,2,1,""],"CvEM : public CvStatModel":[165,1,1,""],"CvEMParams::CvEMParams()":[165,2,1,""],"CvEMParams::CvEMParams(int nclusters, int cov_mat_type, int start_step, CvTermCriteria term_crit, const CvMat* probs, const CvMat* weights, const CvMat* means, const CvMat** covs)":[165,2,1,""],"CvERTrees : public CvRTrees":[173,1,1,""],"CvFileNode* FileNode::operator *()":[125,2,1,""],"CvFileNode* cvGetFileNode(CvFileStorage* fs, CvFileNode* map, const CvStringHashNode* key, int create_missing)":[121,4,1,""],"CvFileNode* cvGetFileNodeByName(const CvFileStorage* fs, const CvFileNode* map, const char* name)":[121,4,1,""],"CvFileNode* cvGetRootFileNode(const CvFileStorage* fs, int stream_index)":[121,4,1,""],"CvFileStorage* FileStorage::operator *()":[125,2,1,""],"CvFileStorage* cvOpenFileStorage(const char* filename, CvMemStorage* memstorage, int flags, const char* encoding)":[121,4,1,""],"CvFont cvFontQt(const char* nameFont, int pointSize, CvScalar color, int weight, int style, int spacing)":[151,4,1,""],"CvFont fontQt(const string&amp; nameFont, int pointSize , Scalar color , int weight , int style , int spacing)":[151,2,1,"CvFont fontQt(const string& nameFont, int pointSize , Scalar color , int weight , int style , int spacing)"],"CvForestTree* CvRTrees::get_tree(int i) const":[181,2,1,""],"CvGBTrees : public CvStatModel":[175,1,1,""],"CvGBTrees::CvGBTrees()":[175,2,1,""],"CvGBTrees::CvGBTrees(const CvMat* trainData, int tflag, const CvMat* responses, const CvMat* varIdx, const CvMat* sampleIdx, const CvMat* varType, const CvMat* missingDataMask, CvGBTreesParams params)":[175,2,1,""],"CvGBTrees::CvGBTrees(const Mat&amp; trainData, int tflag, const Mat&amp; responses, const Mat&amp; varIdx, const Mat&amp; sampleIdx, const Mat&amp; varType, const Mat&amp; missingDataMask, CvGBTreesParams params)":[175,2,1,"CvGBTrees::CvGBTrees(const Mat& trainData, int tflag, const Mat& responses, const Mat& varIdx, const Mat& sampleIdx, const Mat& varType, const Mat& missingDataMask, CvGBTreesParams params)"],"CvGBTreesParams : public CvDTreeParams":[175,3,1,""],"CvGBTreesParams::CvGBTreesParams()":[175,2,1,""],"CvGBTreesParams::CvGBTreesParams(int loss_function_type, int weak_count, float shrinkage, float subsample_portion, int max_depth, bool use_surrogates)":[175,2,1,""],"CvGraph* cvCloneGraph(const CvGraph* graph, CvMemStorage* storage)":[118,4,1,""],"CvGraph* cvCreateGraph(int graph_flags, int header_size, int vtx_size, int edge_size, CvMemStorage* storage)":[118,4,1,""],"CvGraphEdge* cvFindGraphEdge(const CvGraph* graph, int start_idx, int end_idx)":[118,4,1,""],"CvGraphEdge* cvFindGraphEdgeByPtr(const CvGraph* graph, const CvGraphVtx* start_vtx, const CvGraphVtx* end_vtx)":[118,4,1,""],"CvGraphScanner* cvCreateGraphScanner(CvGraph* graph, CvGraphVtx* vtx, int mask)":[118,4,1,""],"CvGraphVtx* cvGetGraphVtx(CvGraph* graph, int vtx_idx)":[118,4,1,""],"CvHistogram* cvCreateHist(int dims, int* sizes, int type, float** ranges, int uniform)":[157,4,1,""],"CvHistogram* cvMakeHistHeaderForArray(int dims, int* sizes, CvHistogram* hist, float* data, float** ranges, int uniform)":[157,4,1,""],"CvKNearest : public CvStatModel":[176,1,1,""],"CvKNearest::CvKNearest()":[176,2,1,""],"CvKNearest::CvKNearest(const CvMat* trainData, const CvMat* responses, const CvMat* sampleIdx, bool isRegression, int max_k)":[176,2,1,""],"CvKNearest::CvKNearest(const Mat&amp; trainData, const Mat&amp; responses, const Mat&amp; sampleIdx, bool isRegression, int max_k)":[176,2,1,"CvKNearest::CvKNearest(const Mat& trainData, const Mat& responses, const Mat& sampleIdx, bool isRegression, int max_k)"],"CvKalman* cvCreateKalman(int dynam_params, int measure_params, int control_params)":[219,4,1,""],"CvLSVMFilterObject** filters":[187,5,1,""],"CvLSVMFilterPosition V":[187,5,1,""],"CvLatentSvmDetector* cvLoadLatentSvmDetector(const char* filename)":[187,2,1,""],"CvMat cvMat(int rows, int cols, int type, void* data)":[120,4,1,""],"CvMat* cv2DRotationMatrix(CvPoint2D32f center, double angle, double scale, CvMat* map_matrix)":[156,4,1,""],"CvMat* cvCloneMat(const CvMat* mat)":[120,4,1,""],"CvMat* cvCreateMat(int rows, int cols, int type)":[120,4,1,""],"CvMat* cvCreateMatHeader(int rows, int cols, int type)":[120,4,1,""],"CvMat* cvDecodeImageM(const CvMat* buf, int iscolor)":[152,4,1,""],"CvMat* cvEncodeImage(const char* ext, const CvArr* image, const int* params)":[152,4,1,""],"CvMat* cvGetAffineTransform(const CvPoint2D32f * src, const CvPoint2D32f * dst, CvMat * map_matrix)":[156,4,1,""],"CvMat* cvGetCol(const CvArr* arr, CvMat* submat, int col)":[120,4,1,""],"CvMat* cvGetCols(const CvArr* arr, CvMat* submat, int start_col, int end_col)":[120,4,1,""],"CvMat* cvGetDiag(const CvArr* arr, CvMat* submat, int diag)":[120,4,1,""],"CvMat* cvGetMat(const CvArr* arr, CvMat* header, int* coi, int allowND)":[120,4,1,""],"CvMat* cvGetPerspectiveTransform(const CvPoint2D32f* src, const CvPoint2D32f* dst, CvMat* map_matrix)":[156,4,1,""],"CvMat* cvGetRow(const CvArr* arr, CvMat* submat, int row)":[120,4,1,""],"CvMat* cvGetRows(const CvArr* arr, CvMat* submat, int start_row, int end_row, int delta_row)":[120,4,1,""],"CvMat* cvGetSubRect(const CvArr* arr, CvMat* submat, CvRect rect)":[120,4,1,""],"CvMat* cvInitMatHeader(CvMat* mat, int rows, int cols, int type, void* data, int step)":[120,4,1,""],"CvMat* cvLoadImageM(const char* filename, int iscolor)":[152,4,1,""],"CvMat* cvReshape(const CvArr* arr, CvMat* header, int new_cn, int new_rows)":[120,4,1,""],"CvMatND* cvCloneMatND(const CvMatND* mat)":[120,4,1,""],"CvMatND* cvCreateMatND(int dims, const int* sizes, int type)":[120,4,1,""],"CvMatND* cvCreateMatNDHeader(int dims, const int* sizes, int type)":[120,4,1,""],"CvMatND* cvInitMatNDHeader(CvMatND* mat, int dims, const int* sizes, int type, void* data)":[120,4,1,""],"CvMemBlock* bottom":[118,5,1,""],"CvMemBlock* top":[118,5,1,""],"CvMemStorage* cvCreateChildMemStorage(CvMemStorage* parent)":[118,4,1,""],"CvMemStorage* cvCreateMemStorage(int block_size)":[118,4,1,""],"CvMemStorage* parent":[118,5,1,""],"CvMemStorage* storage":[118,5,1,""],"CvNormalBayesClassifier : public CvStatModel":[180,1,1,""],"CvNormalBayesClassifier::CvNormalBayesClassifier()":[180,2,1,""],"CvNormalBayesClassifier::CvNormalBayesClassifier(const CvMat* trainData, const CvMat* responses, const CvMat* varIdx, const CvMat* sampleIdx)":[180,2,1,""],"CvNormalBayesClassifier::CvNormalBayesClassifier(const Mat&amp; trainData, const Mat&amp; responses, const Mat&amp; varIdx, const Mat&amp; sampleIdx)":[180,2,1,"CvNormalBayesClassifier::CvNormalBayesClassifier(const Mat& trainData, const Mat& responses, const Mat& varIdx, const Mat& sampleIdx)"],"CvParamGrid CvSVM::get_default_grid(int param_id)":[183,2,1,""],"CvParamGrid::CvParamGrid()":[183,2,1,""],"CvParamGrid::CvParamGrid(double min_val, double max_val, double log_step)":[183,2,1,""],"CvPoint cvPoint(int x, int y)":[120,4,1,""],"CvPoint cvPointFrom32f(CvPoint2D32f point)":[120,4,1,""],"CvPoint2D32f center":[120,5,1,""],"CvPoint2D32f cvPoint2D32f(double x, double y)":[120,4,1,""],"CvPoint2D32f cvPointTo32f(CvPoint point)":[120,4,1,""],"CvPoint2D64f cvPoint2D64f(double x, double y)":[120,4,1,""],"CvPoint3D32f cvPoint3D32f(double x, double y, double z)":[120,4,1,""],"CvPoint3D64f cvPoint3D64f(double x, double y, double z)":[120,4,1,""],"CvRNG cvRNG(int64 seed)":[120,4,1,""],"CvRNG* CvRTrees::get_rng()":[181,2,1,""],"CvRTParams : public CvDTreeParams":[181,3,1,""],"CvRTParams::CvRTParams()":[181,2,1,""],"CvRTParams::CvRTParams(int max_depth, int min_sample_count, float regression_accuracy, bool use_surrogates, int max_categories, const float* priors, bool calc_var_importance, int nactive_vars, int max_num_of_trees_in_the_forest, float forest_accuracy, int termcrit_type)":[181,2,1,""],"CvRTrees : public CvStatModel":[181,1,1,""],"CvRect cvBoundingRect(CvArr* points, int update)":[162,4,1,""],"CvRect cvGetImageROI(const IplImage* image)":[120,4,1,""],"CvRect cvRect(int x, int y, int width, int height)":[120,4,1,""],"CvRect rect":[187,5,1,""],"CvSVM : public CvStatModel":[183,1,1,""],"CvSVM::CvSVM()":[183,2,1,""],"CvSVM::CvSVM(const CvMat* trainData, const CvMat* responses, const CvMat* varIdx, const CvMat* sampleIdx, CvSVMParams params)":[183,2,1,""],"CvSVM::CvSVM(const Mat&amp; trainData, const Mat&amp; responses, const Mat&amp; varIdx, const Mat&amp; sampleIdx, CvSVMParams params)":[183,2,1,"CvSVM::CvSVM(const Mat& trainData, const Mat& responses, const Mat& varIdx, const Mat& sampleIdx, CvSVMParams params)"],"CvSVMParams CvSVM::get_params() const":[183,2,1,""],"CvSVMParams::CvSVMParams()":[183,2,1,""],"CvSVMParams::CvSVMParams(int svm_type, int kernel_type, double degree, double gamma, double coef0, double Cvalue, double nu, double p, CvMat* class_weights, CvTermCriteria term_crit)":[183,2,1,""],"CvScalar cvAvg(const CvArr* arr, const CvArr* mask)":[123,4,1,""],"CvScalar cvGet1D(const CvArr* arr, int idx0)":[120,4,1,""],"CvScalar cvGet2D(const CvArr* arr, int idx0, int idx1)":[120,4,1,""],"CvScalar cvGet3D(const CvArr* arr, int idx0, int idx1, int idx2)":[120,4,1,""],"CvScalar cvGetND(const CvArr* arr, const int* idx)":[120,4,1,""],"CvScalar cvSum(const CvArr* arr)":[123,4,1,""],"CvScalar cvTrace(const CvArr* mat)":[123,4,1,""],"CvSeq* CvBoost::get_weak_predictors()":[171,2,1,""],"CvSeq* cvApproxChains(CvSeq* src_seq, CvMemStorage* storage, int method, double parameter, int minimal_perimeter, int recursive)":[162,4,1,""],"CvSeq* cvApproxPoly(const void* src_seq, int header_size, CvMemStorage* storage, int method, double eps, int recursive)":[162,4,1,""],"CvSeq* cvCloneSeq(const CvSeq* seq, CvMemStorage* storage)":[118,4,1,""],"CvSeq* cvConvexHull2(const CvArr* input, void* hull_storage, int orientation, int return_points)":[162,4,1,""],"CvSeq* cvConvexityDefects(const CvArr* contour, const CvArr* convexhull, CvMemStorage* storage)":[162,4,1,""],"CvSeq* cvCreateSeq(int seq_flags, size_t header_size, size_t elem_size, CvMemStorage* storage)":[118,4,1,""],"CvSeq* cvEndWriteSeq(CvSeqWriter* writer)":[118,4,1,""],"CvSeq* cvHaarDetectObjects(const CvArr* image, CvHaarClassifierCascade* cascade, CvMemStorage* storage, double scale_factor, int min_neighbors, int flags, CvSize min_size, CvSize max_size)":[186,4,1,""],"CvSeq* cvHoughCircles(CvArr* image, void* circle_storage, int method, double dp, double min_dist, double param1, double param2, int min_radius, int max_radius)":[154,4,1,""],"CvSeq* cvHoughLines2(CvArr* image, void* line_storage, int method, double rho, double theta, int threshold, double param1, double param2)":[154,4,1,""],"CvSeq* cvLatentSvmDetectObjects(IplImage* image, CvLatentSvmDetector* detector, CvMemStorage* storage, float overlap_threshold, int numThreads)":[187,2,1,""],"CvSeq* cvMakeSeqHeaderForArray(int seq_type, int header_size, int elem_size, void* elements, int total, CvSeq* seq, CvSeqBlock* block)":[118,4,1,""],"CvSeq* cvSegmentMotion(const CvArr* mhi, CvArr* seg_mask, CvMemStorage* storage, double timestamp, double seg_thresh)":[219,4,1,""],"CvSeq* cvSeqSlice(const CvSeq* seq, CvSlice slice, CvMemStorage* storage, int copy_data)":[118,4,1,""],"CvSeq* cvTreeToNodeSeq(const void* first, int header_size, CvMemStorage* storage)":[118,4,1,""],"CvSeq* h_next":[118,5,1,""],"CvSeq* h_prev":[118,5,1,""],"CvSeq* ocl::OclCascadeClassifier::oclHaarDetectObjects(oclMat &amp;gimg, CvMemStorage *storage, double scaleFactor, int minNeighbors, int flags, CvSize minSize , CvSize maxSize)":[197,2,1,"CvSeq* ocl::OclCascadeClassifier::oclHaarDetectObjects(oclMat &gimg, CvMemStorage *storage, double scaleFactor, int minNeighbors, int flags, CvSize minSize , CvSize maxSize)"],"CvSeq* v_next":[118,5,1,""],"CvSeq* v_prev":[118,5,1,""],"CvSeqBlock* first":[118,5,1,""],"CvSet* cvCreateSet(int set_flags, int header_size, int elem_size, CvMemStorage* storage)":[118,4,1,""],"CvSet* heap":[120,5,1,""],"CvSetElem* cvGetSetElem(const CvSet* set_header, int idx)":[118,4,1,""],"CvSetElem* cvSetNew(CvSet* set_header)":[118,4,1,""],"CvSize cvGetSize(const CvArr* arr)":[120,4,1,""],"CvSize cvSize(int width, int height)":[120,4,1,""],"CvSize2D32f cvSize2D32f(double width, double height)":[120,4,1,""],"CvSize2D32f size":[120,5,1,""],"CvSlice cvSlice(int start, int end)":[118,4,1,""],"CvSparseMat* cvCloneSparseMat(const CvSparseMat* mat)":[120,4,1,""],"CvSparseMat* cvCreateSparseMat(int dims, const int* sizes, int type)":[120,4,1,""],"CvSparseNode* cvGetNextSparseNode(CvSparseMatIterator* mat_iterator)":[120,4,1,""],"CvSparseNode* cvInitSparseMatIterator(const CvSparseMat* mat, CvSparseMatIterator* mat_iterator)":[120,4,1,""],"CvStatModel::CvStatModel()":[182,2,1,""],"CvStatModel::~CvStatModel()":[182,2,1,""],"CvStereoBMState* cvCreateStereoBMState(int preset, int numberOfDisparities)":[101,4,1,""],"CvString cvMemStorageAllocString(CvMemStorage* storage, const char* ptr, int len)":[118,4,1,""],"CvStringHashNode* cvGetHashedKey(CvFileStorage* fs, const char* name, int len, int create_missing)":[121,4,1,""],"CvSubdiv2D* cvCreateSubdivDelaunay2D(CvRect rect, CvMemStorage* storage)":[170,4,1,""],"CvSubdiv2DEdge cvSubdiv2DGetEdge(CvSubdiv2DEdge edge, CvNextEdgeType type)":[170,4,1,""],"CvSubdiv2DEdge cvSubdiv2DNextEdge(CvSubdiv2DEdge edge)":[170,4,1,""],"CvSubdiv2DEdge cvSubdiv2DRotateEdge(CvSubdiv2DEdge edge, int rotate)":[170,4,1,""],"CvSubdiv2DPoint* cvFindNearestPoint2D(CvSubdiv2D* subdiv, CvPoint2D32f pt)":[170,4,1,""],"CvSubdiv2DPoint* cvSubdiv2DEdgeDst(CvSubdiv2DEdge edge)":[170,4,1,""],"CvSubdiv2DPoint* cvSubdivDelaunay2DInsert(CvSubdiv2D* subdiv, CvPoint2D32f pt)":[170,4,1,""],"CvSubdiv2DPointLocation cvSubdiv2DLocate(CvSubdiv2D* subdiv, CvPoint2D32f pt, CvSubdiv2DEdge* edge, CvSubdiv2DPoint** vertex)":[170,4,1,""],"CvTypeInfo* cvFindType(const char* type_name)":[121,4,1,""],"CvTypeInfo* cvFirstType(void)":[121,4,1,""],"CvTypeInfo* cvTypeOf(const void* struct_ptr)":[121,4,1,""],"CvTypeInfo* info":[121,5,1,""],"CvVideoWriter* cvCreateVideoWriter(const char* filename, int fourcc, double fps, CvSize frame_size, int is_color)":[152,4,1,""],"CylindricalWarper : public WarperCreator":[210,1,1,""],"DenseFeatureDetector : public FeatureDetector":[128,1,1,""],"DescriptorExtractor : public Algorithm":[126,1,1,""],"DescriptorMatcher : public Algorithm":[127,1,1,""],"DynamicAdaptedFeatureDetector : public FeatureDetector":[128,1,1,""],"DynamicAdaptedFeatureDetector::DynamicAdaptedFeatureDetector(const Ptr&lt;AdjusterAdapter&gt;&amp; adjuster, int min_features, int max_features, int max_iters)":[128,2,1,"DynamicAdaptedFeatureDetector::DynamicAdaptedFeatureDetector(const Ptr<AdjusterAdapter>& adjuster, int min_features, int max_features, int max_iters)"],"EM : public Algorithm":[174,1,1,""],"EM::EM(int nclusters, int covMatType, const TermCriteria&amp; termCrit)":[174,2,1,"EM::EM(int nclusters, int covMatType, const TermCriteria& termCrit)"],"Exception : public std::exception":[124,1,1,""],"FREAK : public DescriptorExtractor":[131,1,1,""],"FREAK::FREAK(bool orientationNormalized, bool scaleNormalized, float patternScale, int nOctaves, const vector&lt;int&gt;&amp; selectedPairs)":[131,2,1,"FREAK::FREAK(bool orientationNormalized, bool scaleNormalized, float patternScale, int nOctaves, const vector<int>& selectedPairs)"],"FabMap1 : public FabMap":[111,1,1,""],"FabMap1::FabMap1(const Mat&amp; clTree, double PzGe, double PzGNe, int flags, int numSamples)":[111,2,1,"FabMap1::FabMap1(const Mat& clTree, double PzGe, double PzGNe, int flags, int numSamples)"],"FabMap2 : public FabMap":[111,1,1,""],"FabMap2::FabMap2(const Mat&amp; clTree, double PzGe, double PzGNe, int flags)":[111,2,1,"FabMap2::FabMap2(const Mat& clTree, double PzGe, double PzGNe, int flags)"],"FabMapFBO : public FabMap":[111,1,1,""],"FabMapFBO::FabMapFBO(const Mat&amp; clTree, double PzGe, double PzGNe, int flags, int numSamples , double rejectionThreshold , double PsGd , int bisectionStart , int bisectionIts)":[111,2,1,"FabMapFBO::FabMapFBO(const Mat& clTree, double PzGe, double PzGNe, int flags, int numSamples , double rejectionThreshold , double PsGd , int bisectionStart , int bisectionIts)"],"FabMapLUT : public FabMap":[111,1,1,""],"FabMapLUT::FabMapLUT(const Mat&amp; clTree, double PzGe, double PzGNe, int flags, int numSamples , int precision)":[111,2,1,"FabMapLUT::FabMapLUT(const Mat& clTree, double PzGe, double PzGNe, int flags, int numSamples , int precision)"],"FaceRecognizer : public Algorithm":[104,1,1,""],"FastAdjuster : public AdjusterAdapter":[128,1,1,""],"FastFeatureDetector : public FeatureDetector":[128,1,1,""],"FeatureDetector : public Algorithm":[128,1,1,""],"FernDescriptorMatcher : public GenericDescriptorMatcher":[164,1,1,""],"FileNode FileNode::operator[](const char* nodename) const":[125,2,1,""],"FileNode FileNode::operator[](const string&amp; nodename) const":[125,2,1,"FileNode FileNode::operator[](const string& nodename) const"],"FileNode FileNode::operator[](int i) const":[125,2,1,""],"FileNode FileNodeIterator::operator *() const":[125,2,1,""],"FileNode FileNodeIterator::operator -&gt;() const":[125,2,1,"FileNode FileNodeIterator::operator ->() const"],"FileNode FileStorage::getFirstTopLevelNode() const":[125,2,1,""],"FileNode FileStorage::operator[](const char* nodename) const":[125,2,1,""],"FileNode FileStorage::operator[](const string&amp; nodename) const":[125,2,1,"FileNode FileStorage::operator[](const string& nodename) const"],"FileNode FileStorage::root(int streamidx) const":[125,2,1,""],"FileNode::FileNode()":[125,2,1,""],"FileNode::FileNode(const CvFileStorage* fs, const CvFileNode* node)":[125,2,1,""],"FileNode::FileNode(const FileNode&amp; node)":[125,2,1,"FileNode::FileNode(const FileNode& node)"],"FileNode::operator double() const":[125,2,1,""],"FileNode::operator float() const":[125,2,1,""],"FileNode::operator int() const":[125,2,1,""],"FileNode::operator string() const":[125,2,1,""],"FileNodeIterator FileNode::begin() const":[125,2,1,""],"FileNodeIterator FileNode::end() const":[125,2,1,""],"FileNodeIterator FileNodeIterator::operator ++ (int)":[125,2,1,""],"FileNodeIterator FileNodeIterator::operator -- (int)":[125,2,1,""],"FileNodeIterator&amp; FileNodeIterator::operator ++ ()":[125,2,1,"FileNodeIterator& FileNodeIterator::operator ++ ()"],"FileNodeIterator&amp; FileNodeIterator::operator +=(int ofs)":[125,2,1,"FileNodeIterator& FileNodeIterator::operator +=(int ofs)"],"FileNodeIterator&amp; FileNodeIterator::operator -- ()":[125,2,1,"FileNodeIterator& FileNodeIterator::operator -- ()"],"FileNodeIterator&amp; FileNodeIterator::operator -=(int ofs)":[125,2,1,"FileNodeIterator& FileNodeIterator::operator -=(int ofs)"],"FileNodeIterator&amp; FileNodeIterator::readRaw(const string&amp; fmt, uchar* vec, size_t maxCount=(size_t)INT_MAX)":[125,2,1,"FileNodeIterator& FileNodeIterator::readRaw(const string& fmt, uchar* vec, size_t maxCount=(size_t)INT_MAX)"],"FileNodeIterator::FileNodeIterator()":[125,2,1,""],"FileNodeIterator::FileNodeIterator(const CvFileStorage* fs, const CvFileNode* node, size_t ofs)":[125,2,1,""],"FileNodeIterator::FileNodeIterator(const FileNodeIterator&amp; it)":[125,2,1,"FileNodeIterator::FileNodeIterator(const FileNodeIterator& it)"],"FileStorage::FileStorage()":[125,2,1,""],"FileStorage::FileStorage(const string&amp; source, int flags, const string&amp; encoding)":[125,2,1,"FileStorage::FileStorage(const string& source, int flags, const string& encoding)"],"FlannBasedMatcher : public DescriptorMatcher":[127,1,1,""],"FormatInfo gpu::VideoReader_GPU::format() const":[149,2,1,""],"GoodFeaturesToTrackDetector : public FeatureDetector":[128,1,1,""],"GpuMat gpu::CudaMem::createGpuMatHeader() const":[138,2,1,""],"GpuMat gpu::createContinuous(Size size, int type)":[138,2,1,""],"GpuMat gpu::createContinuous(int rows, int cols, int type)":[138,2,1,""],"GridAdaptedFeatureDetector : public FeatureDetector":[128,1,1,""],"IplConvKernel* cvCreateStructuringElementEx(int cols, int rows, int anchor_x, int anchor_y, int shape, int* values)":[155,4,1,""],"IplImage* cvCloneImage(const IplImage* image)":[120,4,1,""],"IplImage* cvCreateImage(CvSize size, int depth, int channels)":[120,4,1,""],"IplImage* cvCreateImageHeader(CvSize size, int depth, int channels)":[120,4,1,""],"IplImage* cvDecodeImage(const CvMat* buf, int iscolor)":[152,4,1,""],"IplImage* cvGetImage(const CvArr* arr, IplImage* image_header)":[120,4,1,""],"IplImage* cvInitImageHeader(IplImage* image, CvSize size, int depth, int channels, int origin, int align)":[120,4,1,""],"IplImage* cvLoadImage(const char* filename, int iscolor)":[152,4,1,""],"IplImage* cvQueryFrame(CvCapture* capture)":[152,4,1,""],"IplImage* cvRetrieveFrame(CvCapture* capture, int streamIdx)":[152,4,1,""],"IplImage* maskROI":[120,5,1,""],"IplROI* roi":[120,5,1,""],"KalmanFilter::KalmanFilter()":[219,2,1,""],"KalmanFilter::KalmanFilter(int dynamParams, int measureParams, int controlParams, int type)":[219,2,1,""],"KeyPoint::KeyPoint()":[128,2,1,""],"KeyPoint::KeyPoint(Point2f _pt, float _size, float _angle, float _response, int _octave, int _class_id)":[128,2,1,""],"KeyPoint::KeyPoint(float x, float y, float _size, float _angle, float _response, int _octave, int _class_id)":[128,2,1,""],"KeyboardEvent (Action action, const String&amp; symbol, unsigned char code, Modifiers modifiers)":[222,2,1,"KeyboardEvent (Action action, const String& symbol, unsigned char code, Modifiers modifiers)"],"LatentSvmDetector::LatentSvmDetector()":[187,2,1,""],"LatentSvmDetector::LatentSvmDetector(const vector&lt;string&gt;&amp; filenames, const vector&lt;string&gt;&amp; classNames)":[187,2,1,"LatentSvmDetector::LatentSvmDetector(const vector<string>& filenames, const vector<string>& classNames)"],"LatentSvmDetector::ObjectDetection":[187,3,1,""],"LatentSvmDetector::~LatentSvmDetector()":[187,2,1,""],"MSER : public FeatureDetector":[131,1,1,""],"MSER::MSER(int _delta, int _min_area, int _max_area, double _max_variation, double _min_diversity, int _max_evolution, double _area_threshold, double _min_margin, int _edge_blur_size)":[131,2,1,""],"Mat BOWTrainer::cluster() const":[133,2,1,""],"Mat BOWTrainer::cluster(const Mat&amp; descriptors) const":[133,2,1,"Mat BOWTrainer::cluster(const Mat& descriptors) const"],"Mat CvDTree::getVarImportance()":[172,2,1,""],"Mat CvEM::getMeans() const":[165,2,1,""],"Mat CvEM::getProbs() const":[165,2,1,""],"Mat CvEM::getWeights() const":[165,2,1,""],"Mat CvRTrees::getVarImportance()":[181,2,1,""],"Mat Mat::clone() const":[114,2,1,""],"Mat Mat::col(int x) const":[114,2,1,""],"Mat Mat::colRange(const Range&amp; r) const":[114,2,1,"Mat Mat::colRange(const Range& r) const"],"Mat Mat::colRange(int startcol, int endcol) const":[114,2,1,""],"Mat Mat::cross(InputArray m) const":[114,2,1,""],"Mat Mat::diag(int d) const":[114,2,1,""],"Mat Mat::operator()(Range rowRange, Range colRange) const":[114,2,1,""],"Mat Mat::operator()(const Range* ranges) const":[114,2,1,""],"Mat Mat::operator()(const Rect&amp; roi) const":[114,2,1,"Mat Mat::operator()(const Rect& roi) const"],"Mat Mat::reshape(int cn, int rows) const":[114,2,1,""],"Mat Mat::row(int y) const":[114,2,1,""],"Mat Mat::rowRange(const Range&amp; r) const":[114,2,1,"Mat Mat::rowRange(const Range& r) const"],"Mat Mat::rowRange(int startrow, int endrow) const":[114,2,1,""],"Mat PCA::backProject(InputArray vec) const":[123,2,1,""],"Mat PCA::project(InputArray vec) const":[123,2,1,""],"Mat cvarrToMat(const CvArr* arr, bool copyData, bool allowND, int coiMode)":[123,2,1,""],"Mat estimateRigidTransform(InputArray src, InputArray dst, bool fullAffine)":[219,2,1,""],"Mat findFundamentalMat(InputArray points1, InputArray points2, int method, double param1, double param2, OutputArray mask)":[101,2,1,""],"Mat findHomography(InputArray srcPoints, InputArray dstPoints, int method, double ransacReprojThreshold, OutputArray mask)":[101,2,1,""],"Mat getAffineTransform(InputArray src, InputArray dst)":[156,2,1,""],"Mat getAffineTransform(const Point2f src[], const Point2f dst[])":[156,2,1,""],"Mat getDefaultNewCameraMatrix(InputArray cameraMatrix, Size imgsize, bool centerPrincipalPoint)":[156,2,1,""],"Mat getGaussianKernel(int ksize, double sigma, int ktype)":[155,2,1,""],"Mat getOptimalNewCameraMatrix(InputArray cameraMatrix, InputArray distCoeffs, Size imageSize, double alpha, Size newImgSize, Rect* validPixROI, bool centerPrincipalPoint)":[101,2,1,""],"Mat getPerspectiveTransform(InputArray src, InputArray dst)":[156,2,1,""],"Mat getPerspectiveTransform(const Point2f src[], const Point2f dst[])":[156,2,1,""],"Mat getRotationMatrix2D(Point2f center, double angle, double scale)":[156,2,1,""],"Mat getStructuringElement(int shape, Size ksize, Point anchor)":[155,2,1,""],"Mat gpu::CudaMem::createMatHeader() const":[138,2,1,""],"Mat imdecode(InputArray buf, int flags)":[152,2,1,""],"Mat imdecode(InputArray buf, int flags, Mat* dst)":[152,2,1,""],"Mat imread(const string&amp; filename, int flags)":[152,2,1,"Mat imread(const string& filename, int flags)"],"Mat initCameraMatrix2D(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, double aspectRatio)":[101,2,1,""],"Mat of2::ChowLiuTree::make(double infoThreshold)":[111,2,1,""],"Mat ogl::Buffer::mapHost(Access access)":[122,2,1,""],"Mat repeat(const Mat&amp; src, int ny, int nx)":[123,2,1,"Mat repeat(const Mat& src, int ny, int nx)"],"Mat&amp; Mat::adjustROI(int dtop, int dbottom, int dleft, int dright)":[114,2,1,"Mat& Mat::adjustROI(int dtop, int dbottom, int dleft, int dright)"],"Mat&amp; Mat::operator = (const Mat&amp; m)":[114,2,1,"Mat& Mat::operator = (const Mat& m)"],"Mat&amp; Mat::operator = (const Scalar&amp; s)":[114,2,1,"Mat& Mat::operator = (const Scalar& s)"],"Mat&amp; Mat::operator =(const MatExpr&amp; expr)":[114,2,1,"Mat& Mat::operator =(const MatExpr& expr)"],"Mat&amp; Mat::setTo(InputArray value, InputArray mask)":[114,2,1,"Mat& Mat::setTo(InputArray value, InputArray mask)"],"Mat::Mat()":[114,2,1,""],"Mat::Mat(Size size, int type)":[114,2,1,""],"Mat::Mat(Size size, int type, const Scalar&amp; s)":[114,2,1,"Mat::Mat(Size size, int type, const Scalar& s)"],"Mat::Mat(Size size, int type, void* data, size_t step)":[114,2,1,""],"Mat::Mat(const CvMat* m, bool copyData)":[114,2,1,""],"Mat::Mat(const IplImage* img, bool copyData)":[114,2,1,""],"Mat::Mat(const Mat&amp; m)":[114,2,1,"Mat::Mat(const Mat& m)"],"Mat::Mat(const Mat&amp; m, const Range&amp; rowRange, const Range&amp; colRange)":[114,2,1,"Mat::Mat(const Mat& m, const Range& rowRange, const Range& colRange)"],"Mat::Mat(const Mat&amp; m, const Range* ranges)":[114,2,1,"Mat::Mat(const Mat& m, const Range* ranges)"],"Mat::Mat(const Mat&amp; m, const Rect&amp; roi)":[114,2,1,"Mat::Mat(const Mat& m, const Rect& roi)"],"Mat::Mat(int ndims, const int* sizes, int type)":[114,2,1,""],"Mat::Mat(int ndims, const int* sizes, int type, const Scalar&amp; s)":[114,2,1,"Mat::Mat(int ndims, const int* sizes, int type, const Scalar& s)"],"Mat::Mat(int ndims, const int* sizes, int type, void* data, const size_t* steps)":[114,2,1,""],"Mat::Mat(int rows, int cols, int type)":[114,2,1,""],"Mat::Mat(int rows, int cols, int type, const Scalar&amp; s)":[114,2,1,"Mat::Mat(int rows, int cols, int type, const Scalar& s)"],"Mat::Mat(int rows, int cols, int type, void* data, size_t step)":[114,2,1,""],"Mat::operator CvMat() const":[114,2,1,""],"Mat::operator IplImage() const":[114,2,1,""],"Mat::~Mat()":[114,2,1,""],"MatExpr Mat::inv(int method) const":[114,2,1,""],"MatExpr Mat::mul(InputArray m, double scale) const":[114,2,1,""],"MatExpr Mat::t() const":[114,2,1,""],"MatExpr abs(const Mat&amp; m)":[123,2,1,"MatExpr abs(const Mat& m)"],"MatExpr abs(const MatExpr&amp; e)":[123,2,1,"MatExpr abs(const MatExpr& e)"],"MatExpr max(const Mat&amp; a, const Mat&amp; b)":[123,2,1,"MatExpr max(const Mat& a, const Mat& b)"],"MatExpr max(const Mat&amp; a, double s)":[123,2,1,"MatExpr max(const Mat& a, double s)"],"MatExpr max(double s, const Mat&amp; a)":[123,2,1,"MatExpr max(double s, const Mat& a)"],"MatExpr min(const Mat&amp; a, const Mat&amp; b)":[123,2,1,"MatExpr min(const Mat& a, const Mat& b)"],"MatExpr min(const Mat&amp; a, double s)":[123,2,1,"MatExpr min(const Mat& a, double s)"],"MatExpr min(double s, const Mat&amp; a)":[123,2,1,"MatExpr min(double s, const Mat& a)"],"Moments moments(InputArray array, bool binaryImage)":[162,2,1,""],"MouseEvent (const Type&amp; type, const MouseButton&amp; button, const Point&amp; p, Modifiers modifiers)":[222,2,1,"MouseEvent (const Type& type, const MouseButton& button, const Point& p, Modifiers modifiers)"],"MserFeatureDetector : public FeatureDetector":[128,1,1,""],"ORB : public Feature2D":[131,1,1,""],"ORB::ORB(int nfeatures , float scaleFactor , int nlevels , int edgeThreshold , int firstLevel , int WTA_K, int scoreType, int patchSize)":[131,2,1,""],"OneWayDescriptorMatcher : public GenericDescriptorMatcher":[164,1,1,""],"OpponentColorDescriptorExtractor : public DescriptorExtractor":[126,1,1,""],"OutputArray : public InputArray":[114,1,1,""],"PCA&amp; PCA::computeVar(InputArray data, InputArray mean, int flags, double retainedVariance)":[123,2,1,"PCA& PCA::computeVar(InputArray data, InputArray mean, int flags, double retainedVariance)"],"PCA&amp; PCA::operator()(InputArray data, InputArray mean, int flags, int maxComponents)":[123,2,1,"PCA& PCA::operator()(InputArray data, InputArray mean, int flags, int maxComponents)"],"PCA::PCA()":[123,2,1,""],"PCA::PCA(InputArray data, InputArray mean, int flags, double retainedVariance)":[123,2,1,""],"PCA::PCA(InputArray data, InputArray mean, int flags, int maxComponents)":[123,2,1,""],"PlaneWarper : public WarperCreator":[210,1,1,""],"Point detail::RotationWarper::warp(const Mat &amp;src, const Mat &amp;K, const Mat &amp;R, int interp_mode, int border_mode, Mat &amp;dst)":[216,2,1,"Point detail::RotationWarper::warp(const Mat &src, const Mat &K, const Mat &R, int interp_mode, int border_mode, Mat &dst)"],"Point2d phaseCorrelate(InputArray src1, InputArray src2, InputArray window)":[160,2,1,""],"Point2d phaseCorrelateRes(InputArray src1, InputArray src2, InputArray window, double* response)":[160,2,1,""],"Point2f detail::RotationWarper::warpPoint(const Point2f &amp;pt, const Mat &amp;K, const Mat &amp;R)":[216,2,1,"Point2f detail::RotationWarper::warpPoint(const Point2f &pt, const Mat &K, const Mat &R)"],"Point2f pt":[128,5,1,""],"Ptr&amp; Ptr::operator = (const Ptr&amp; ptr)":[114,2,1,"Ptr& Ptr::operator = (const Ptr& ptr)"],"Ptr&lt;AdjusterAdapter&gt; AdjusterAdapter::create(const string&amp; detectorType)":[128,2,1,"Ptr<AdjusterAdapter> AdjusterAdapter::create(const string& detectorType)"],"Ptr&lt;BaseColumnFilter&gt; getColumnSumFilter(int sumType, int dstType, int ksize, int anchor, double scale)":[155,2,1,"Ptr<BaseColumnFilter> getColumnSumFilter(int sumType, int dstType, int ksize, int anchor, double scale)"],"Ptr&lt;BaseColumnFilter&gt; getLinearColumnFilter(int bufType, int dstType, InputArray kernel, int anchor, int symmetryType, double delta, int bits)":[155,2,1,"Ptr<BaseColumnFilter> getLinearColumnFilter(int bufType, int dstType, InputArray kernel, int anchor, int symmetryType, double delta, int bits)"],"Ptr&lt;BaseColumnFilter&gt; getMorphologyColumnFilter(int op, int type, int ksize, int anchor)":[155,2,1,"Ptr<BaseColumnFilter> getMorphologyColumnFilter(int op, int type, int ksize, int anchor)"],"Ptr&lt;BaseColumnFilter_GPU&gt; gpu::getColumnSumFilter_GPU(int sumType, int dstType, int ksize, int anchor)":[141,2,1,"Ptr<BaseColumnFilter_GPU> gpu::getColumnSumFilter_GPU(int sumType, int dstType, int ksize, int anchor)"],"Ptr&lt;BaseColumnFilter_GPU&gt; gpu::getLinearColumnFilter_GPU(int bufType, int dstType, const Mat&amp; columnKernel, int anchor, int borderType)":[141,2,1,"Ptr<BaseColumnFilter_GPU> gpu::getLinearColumnFilter_GPU(int bufType, int dstType, const Mat& columnKernel, int anchor, int borderType)"],"Ptr&lt;BaseColumnFilter_GPU&gt; ocl::getLinearColumnFilter_GPU(int bufType, int dstType, const Mat &amp;columnKernel, int anchor , int bordertype , double delta)":[192,2,1,"Ptr<BaseColumnFilter_GPU> ocl::getLinearColumnFilter_GPU(int bufType, int dstType, const Mat &columnKernel, int anchor , int bordertype , double delta)"],"Ptr&lt;BaseFilter&gt; getLinearFilter(int srcType, int dstType, InputArray kernel, Point anchor, double delta, int bits)":[155,2,1,"Ptr<BaseFilter> getLinearFilter(int srcType, int dstType, InputArray kernel, Point anchor, double delta, int bits)"],"Ptr&lt;BaseFilter&gt; getMorphologyFilter(int op, int type, InputArray kernel, Point anchor)":[155,2,1,"Ptr<BaseFilter> getMorphologyFilter(int op, int type, InputArray kernel, Point anchor)"],"Ptr&lt;BaseFilter_GPU&gt; gpu::getBoxFilter_GPU(int srcType, int dstType, const Size&amp; ksize, Point anchor)":[141,2,1,"Ptr<BaseFilter_GPU> gpu::getBoxFilter_GPU(int srcType, int dstType, const Size& ksize, Point anchor)"],"Ptr&lt;BaseFilter_GPU&gt; gpu::getMaxFilter_GPU(int srcType, int dstType, const Size&amp; ksize, Point anchor)":[141,2,1,"Ptr<BaseFilter_GPU> gpu::getMaxFilter_GPU(int srcType, int dstType, const Size& ksize, Point anchor)"],"Ptr&lt;BaseFilter_GPU&gt; gpu::getMinFilter_GPU(int srcType, int dstType, const Size&amp; ksize, Point anchor)":[141,2,1,"Ptr<BaseFilter_GPU> gpu::getMinFilter_GPU(int srcType, int dstType, const Size& ksize, Point anchor)"],"Ptr&lt;BaseFilter_GPU&gt; gpu::getMorphologyFilter_GPU(int op, int type, const Mat&amp; kernel, const Size&amp; ksize, Point anchor)":[141,2,1,"Ptr<BaseFilter_GPU> gpu::getMorphologyFilter_GPU(int op, int type, const Mat& kernel, const Size& ksize, Point anchor)"],"Ptr&lt;BaseFilter_GPU&gt; ocl::getBoxFilter_GPU(int srcType, int dstType, const Size &amp;ksize, Point anchor , int borderType)":[192,2,1,"Ptr<BaseFilter_GPU> ocl::getBoxFilter_GPU(int srcType, int dstType, const Size &ksize, Point anchor , int borderType)"],"Ptr&lt;BaseFilter_GPU&gt; ocl::getMorphologyFilter_GPU(int op, int type, const Mat &amp;kernel, const Size &amp;ksize, Point anchor)":[192,2,1,"Ptr<BaseFilter_GPU> ocl::getMorphologyFilter_GPU(int op, int type, const Mat &kernel, const Size &ksize, Point anchor)"],"Ptr&lt;BaseRowFilter&gt; getLinearRowFilter(int srcType, int bufType, InputArray kernel, int anchor, int symmetryType)":[155,2,1,"Ptr<BaseRowFilter> getLinearRowFilter(int srcType, int bufType, InputArray kernel, int anchor, int symmetryType)"],"Ptr&lt;BaseRowFilter&gt; getMorphologyRowFilter(int op, int type, int ksize, int anchor)":[155,2,1,"Ptr<BaseRowFilter> getMorphologyRowFilter(int op, int type, int ksize, int anchor)"],"Ptr&lt;BaseRowFilter&gt; getRowSumFilter(int srcType, int sumType, int ksize, int anchor)":[155,2,1,"Ptr<BaseRowFilter> getRowSumFilter(int srcType, int sumType, int ksize, int anchor)"],"Ptr&lt;BaseRowFilter_GPU&gt; gpu::getLinearRowFilter_GPU(int srcType, int bufType, const Mat&amp; rowKernel, int anchor, int borderType)":[141,2,1,"Ptr<BaseRowFilter_GPU> gpu::getLinearRowFilter_GPU(int srcType, int bufType, const Mat& rowKernel, int anchor, int borderType)"],"Ptr&lt;BaseRowFilter_GPU&gt; gpu::getRowSumFilter_GPU(int srcType, int sumType, int ksize, int anchor)":[141,2,1,"Ptr<BaseRowFilter_GPU> gpu::getRowSumFilter_GPU(int srcType, int sumType, int ksize, int anchor)"],"Ptr&lt;BaseRowFilter_GPU&gt; ocl::getLinearRowFilter_GPU(int srcType, int bufType, const Mat &amp;rowKernel, int anchor , int bordertype)":[192,2,1,"Ptr<BaseRowFilter_GPU> ocl::getLinearRowFilter_GPU(int srcType, int bufType, const Mat &rowKernel, int anchor , int bordertype)"],"Ptr&lt;DenseOpticalFlow&gt; createOptFlow_DualTVL1()":[219,2,1,"Ptr<DenseOpticalFlow> createOptFlow_DualTVL1()"],"Ptr&lt;DescriptorExtractor&gt; DescriptorExtractor::create(const string&amp; descriptorExtractorType)":[126,2,1,"Ptr<DescriptorExtractor> DescriptorExtractor::create(const string& descriptorExtractorType)"],"Ptr&lt;DescriptorMatcher&gt; DescriptorMatcher::clone(bool emptyTrainData)":[127,2,1,"Ptr<DescriptorMatcher> DescriptorMatcher::clone(bool emptyTrainData)"],"Ptr&lt;DescriptorMatcher&gt; DescriptorMatcher::create(const string&amp; descriptorMatcherType)":[127,2,1,"Ptr<DescriptorMatcher> DescriptorMatcher::create(const string& descriptorMatcherType)"],"Ptr&lt;FaceRecognizer&gt; createEigenFaceRecognizer(int num_components , double threshold)":[104,2,1,"Ptr<FaceRecognizer> createEigenFaceRecognizer(int num_components , double threshold)"],"Ptr&lt;FaceRecognizer&gt; createFisherFaceRecognizer(int num_components , double threshold)":[104,2,1,"Ptr<FaceRecognizer> createFisherFaceRecognizer(int num_components , double threshold)"],"Ptr&lt;FaceRecognizer&gt; createLBPHFaceRecognizer(int radius, int neighbors, int grid_x, int grid_y, double threshold)":[104,2,1,"Ptr<FaceRecognizer> createLBPHFaceRecognizer(int radius, int neighbors, int grid_x, int grid_y, double threshold)"],"Ptr&lt;FeatureDetector&gt; FeatureDetector::create(const string&amp; detectorType)":[128,2,1,"Ptr<FeatureDetector> FeatureDetector::create(const string& detectorType)"],"Ptr&lt;FeatureEvaluator&gt; FeatureEvaluator::clone() const":[186,2,1,"Ptr<FeatureEvaluator> FeatureEvaluator::clone() const"],"Ptr&lt;FeatureEvaluator&gt; FeatureEvaluator::create(int type)":[186,2,1,"Ptr<FeatureEvaluator> FeatureEvaluator::create(int type)"],"Ptr&lt;FilterEngine&gt; createBoxFilter(int srcType, int dstType, Size ksize, Point anchor, bool normalize, int borderType)":[155,2,1,"Ptr<FilterEngine> createBoxFilter(int srcType, int dstType, Size ksize, Point anchor, bool normalize, int borderType)"],"Ptr&lt;FilterEngine&gt; createDerivFilter(int srcType, int dstType, int dx, int dy, int ksize, int borderType)":[155,2,1,"Ptr<FilterEngine> createDerivFilter(int srcType, int dstType, int dx, int dy, int ksize, int borderType)"],"Ptr&lt;FilterEngine&gt; createGaussianFilter(int type, Size ksize, double sigma1, double sigma2, int borderType)":[155,2,1,"Ptr<FilterEngine> createGaussianFilter(int type, Size ksize, double sigma1, double sigma2, int borderType)"],"Ptr&lt;FilterEngine&gt; createLinearFilter(int srcType, int dstType, InputArray kernel, Point _anchor, double delta, int rowBorderType, int columnBorderType, const Scalar&amp; borderValue)":[155,2,1,"Ptr<FilterEngine> createLinearFilter(int srcType, int dstType, InputArray kernel, Point _anchor, double delta, int rowBorderType, int columnBorderType, const Scalar& borderValue)"],"Ptr&lt;FilterEngine&gt; createMorphologyFilter(int op, int type, InputArray kernel, Point anchor, int rowBorderType, int columnBorderType, const Scalar&amp; borderValue)":[155,2,1,"Ptr<FilterEngine> createMorphologyFilter(int op, int type, InputArray kernel, Point anchor, int rowBorderType, int columnBorderType, const Scalar& borderValue)"],"Ptr&lt;FilterEngine&gt; createSeparableLinearFilter(int srcType, int dstType, InputArray rowKernel, InputArray columnKernel, Point anchor, double delta, int rowBorderType, int columnBorderType, const Scalar&amp; borderValue)":[155,2,1,"Ptr<FilterEngine> createSeparableLinearFilter(int srcType, int dstType, InputArray rowKernel, InputArray columnKernel, Point anchor, double delta, int rowBorderType, int columnBorderType, const Scalar& borderValue)"],"Ptr&lt;FilterEngine_GPU&gt; gpu::createBoxFilter_GPU(int srcType, int dstType, const Size&amp; ksize, const Point&amp; anchor)":[141,2,1,"Ptr<FilterEngine_GPU> gpu::createBoxFilter_GPU(int srcType, int dstType, const Size& ksize, const Point& anchor)"],"Ptr&lt;FilterEngine_GPU&gt; gpu::createDerivFilter_GPU(int srcType, int dstType, int dx, int dy, int ksize, int rowBorderType , int columnBorderType)":[141,2,1,"Ptr<FilterEngine_GPU> gpu::createDerivFilter_GPU(int srcType, int dstType, int dx, int dy, int ksize, int rowBorderType , int columnBorderType)"],"Ptr&lt;FilterEngine_GPU&gt; gpu::createFilter2D_GPU(const Ptr&lt;BaseFilter_GPU&gt;&amp; filter2D, int srcType, int dstType)":[141,2,1,"Ptr<FilterEngine_GPU> gpu::createFilter2D_GPU(const Ptr<BaseFilter_GPU>& filter2D, int srcType, int dstType)"],"Ptr&lt;FilterEngine_GPU&gt; gpu::createGaussianFilter_GPU(int type, Size ksize, double sigma1, double sigma2, int rowBorderType, int columnBorderType)":[141,2,1,"Ptr<FilterEngine_GPU> gpu::createGaussianFilter_GPU(int type, Size ksize, double sigma1, double sigma2, int rowBorderType, int columnBorderType)"],"Ptr&lt;FilterEngine_GPU&gt; gpu::createLinearFilter_GPU(int srcType, int dstType, const Mat&amp; kernel, Point anchor , int borderType)":[141,2,1,"Ptr<FilterEngine_GPU> gpu::createLinearFilter_GPU(int srcType, int dstType, const Mat& kernel, Point anchor , int borderType)"],"Ptr&lt;FilterEngine_GPU&gt; gpu::createMorphologyFilter_GPU(int op, int type, const Mat&amp; kernel, const Point&amp; anchor , int iterations)":[141,2,1,"Ptr<FilterEngine_GPU> gpu::createMorphologyFilter_GPU(int op, int type, const Mat& kernel, const Point& anchor , int iterations)"],"Ptr&lt;FilterEngine_GPU&gt; gpu::createSeparableFilter_GPU(const Ptr&lt;BaseRowFilter_GPU&gt;&amp; rowFilter, const Ptr&lt;BaseColumnFilter_GPU&gt;&amp; columnFilter, int srcType, int bufType, int dstType)":[141,2,1,"Ptr<FilterEngine_GPU> gpu::createSeparableFilter_GPU(const Ptr<BaseRowFilter_GPU>& rowFilter, const Ptr<BaseColumnFilter_GPU>& columnFilter, int srcType, int bufType, int dstType)"],"Ptr&lt;FilterEngine_GPU&gt; gpu::createSeparableLinearFilter_GPU(int srcType, int dstType, const Mat&amp; rowKernel, const Mat&amp; columnKernel, const Point&amp; anchor , int rowBorderType , int columnBorderType)":[141,2,1,"Ptr<FilterEngine_GPU> gpu::createSeparableLinearFilter_GPU(int srcType, int dstType, const Mat& rowKernel, const Mat& columnKernel, const Point& anchor , int rowBorderType , int columnBorderType)"],"Ptr&lt;FilterEngine_GPU&gt; ocl::createBoxFilter_GPU(int srcType, int dstType, const Size &amp;ksize, const Point &amp;anchor , int borderType)":[192,2,1,"Ptr<FilterEngine_GPU> ocl::createBoxFilter_GPU(int srcType, int dstType, const Size &ksize, const Point &anchor , int borderType)"],"Ptr&lt;FilterEngine_GPU&gt; ocl::createDerivFilter_GPU(int srcType, int dstType, int dx, int dy, int ksize, int borderType , Size imgSize)":[192,2,1,"Ptr<FilterEngine_GPU> ocl::createDerivFilter_GPU(int srcType, int dstType, int dx, int dy, int ksize, int borderType , Size imgSize)"],"Ptr&lt;FilterEngine_GPU&gt; ocl::createFilter2D_GPU(const Ptr&lt;BaseFilter_GPU&gt; filter2D)":[192,2,1,"Ptr<FilterEngine_GPU> ocl::createFilter2D_GPU(const Ptr<BaseFilter_GPU> filter2D)"],"Ptr&lt;FilterEngine_GPU&gt; ocl::createGaussianFilter_GPU(int type, Size ksize, double sigma1, double sigma2 , int bordertype , Size imgSize)":[192,2,1,"Ptr<FilterEngine_GPU> ocl::createGaussianFilter_GPU(int type, Size ksize, double sigma1, double sigma2 , int bordertype , Size imgSize)"],"Ptr&lt;FilterEngine_GPU&gt; ocl::createLinearFilter_GPU(int srcType, int dstType, const Mat &amp;kernel, const Point &amp;anchor , int borderType)":[192,2,1,"Ptr<FilterEngine_GPU> ocl::createLinearFilter_GPU(int srcType, int dstType, const Mat &kernel, const Point &anchor , int borderType)"],"Ptr&lt;FilterEngine_GPU&gt; ocl::createMorphologyFilter_GPU(int op, int type, const Mat &amp;kernel, const Point &amp;anchor , int iterations)":[192,2,1,"Ptr<FilterEngine_GPU> ocl::createMorphologyFilter_GPU(int op, int type, const Mat &kernel, const Point &anchor , int iterations)"],"Ptr&lt;FilterEngine_GPU&gt; ocl::createSeparableFilter_GPU(const Ptr&lt;BaseRowFilter_GPU&gt; &amp;rowFilter, const Ptr&lt;BaseColumnFilter_GPU&gt; &amp;columnFilter)":[192,2,1,"Ptr<FilterEngine_GPU> ocl::createSeparableFilter_GPU(const Ptr<BaseRowFilter_GPU> &rowFilter, const Ptr<BaseColumnFilter_GPU> &columnFilter)"],"Ptr&lt;FilterEngine_GPU&gt; ocl::createSeparableLinearFilter_GPU(int srcType, int dstType, const Mat &amp;rowKernel, const Mat &amp;columnKernel, const Point &amp;anchor , double delta , int bordertype , Size imgSize)":[192,2,1,"Ptr<FilterEngine_GPU> ocl::createSeparableLinearFilter_GPU(int srcType, int dstType, const Mat &rowKernel, const Mat &columnKernel, const Point &anchor , double delta , int bordertype , Size imgSize)"],"Ptr&lt;GenericDescriptorMatcher&gt; GenericDescriptorMatcher::clone(bool emptyTrainData) const":[129,2,1,"Ptr<GenericDescriptorMatcher> GenericDescriptorMatcher::clone(bool emptyTrainData) const"],"Ptr&lt;SuperResolution&gt; superres::createSuperResolution_BTVL1()":[217,2,1,"Ptr<SuperResolution> superres::createSuperResolution_BTVL1()"],"Ptr&lt;SuperResolution&gt; superres::createSuperResolution_BTVL1_GPU()":[217,2,1,"Ptr<SuperResolution> superres::createSuperResolution_BTVL1_GPU()"],"Ptr::Ptr()":[114,2,1,""],"Ptr::Ptr(_Tp* _obj)":[114,2,1,""],"Ptr::Ptr(const Ptr&amp; ptr)":[114,2,1,"Ptr::Ptr(const Ptr& ptr)"],"Ptr::~Ptr()":[114,2,1,""],"PyramidAdaptedFeatureDetector : public FeatureDetector":[128,1,1,""],"RNG&amp; theRNG()":[123,2,1,"RNG& theRNG()"],"RNG::RNG()":[123,2,1,""],"RNG::RNG(uint64 state)":[123,2,1,""],"RNG::operator double()":[123,2,1,""],"RNG::operator float()":[123,2,1,""],"RNG::operator int()":[123,2,1,""],"RNG::operator schar()":[123,2,1,""],"RNG::operator short()":[123,2,1,""],"RNG::operator uchar()":[123,2,1,""],"RNG::operator unsigned()":[123,2,1,""],"RNG::operator ushort()":[123,2,1,""],"RandomizedTree::read(const char* file_name, int num_quant_bits)":[166,2,1,""],"RandomizedTree::read(std::istream &amp;is, int num_quant_bits)":[166,2,1,"RandomizedTree::read(std::istream &is, int num_quant_bits)"],"Rect RotatedRect::boundingRect() const":[114,2,1,""],"Rect boundingRect(InputArray points)":[162,2,1,""],"Rect detail::RotationWarper::buildMaps(Size src_size, const Mat &amp;K, const Mat &amp;R, Mat &amp;xmap, Mat &amp;ymap)":[216,2,1,"Rect detail::RotationWarper::buildMaps(Size src_size, const Mat &K, const Mat &R, Mat &xmap, Mat &ymap)"],"Rect detail::RotationWarper::warpRoi(Size src_size, const Mat &amp;K, const Mat &amp;R)":[216,2,1,"Rect detail::RotationWarper::warpRoi(Size src_size, const Mat &K, const Mat &R)"],"Rect rect":[187,5,1,""],"Retina::Retina(Size inputSize)":[112,2,1,""],"Retina::Retina(Size inputSize, const bool colorMode, RETINA_COLORSAMPLINGMETHOD colorSamplingMethod , const bool useRetinaLogSampling , const double reductionFactor , const double samplingStrenght)":[112,2,1,""],"Retina::RetinaParameters Retina::getParameters()":[112,2,1,""],"Retina::RetinaParameters":[112,3,1,""],"RotatedRect CamShift(InputArray probImage, Rect&amp; window, TermCriteria criteria)":[219,2,1,"RotatedRect CamShift(InputArray probImage, Rect& window, TermCriteria criteria)"],"RotatedRect fitEllipse(InputArray points)":[162,2,1,""],"RotatedRect minAreaRect(InputArray points)":[162,2,1,""],"RotatedRect::RotatedRect()":[114,2,1,""],"RotatedRect::RotatedRect(const CvBox2D&amp; box)":[114,2,1,"RotatedRect::RotatedRect(const CvBox2D& box)"],"RotatedRect::RotatedRect(const Point2f&amp; center, const Size2f&amp; size, float angle)":[114,2,1,"RotatedRect::RotatedRect(const Point2f& center, const Size2f& size, float angle)"],"RotatedRect::operator CvBox2D() const":[114,2,1,""],"SIFT : public Feature2D":[184,1,1,""],"SIFT::SIFT(int nfeatures, int nOctaveLayers, double contrastThreshold, double edgeThreshold, double sigma)":[184,2,1,""],"SURF : public Feature2D":[184,1,1,""],"SURF::SURF()":[184,2,1,""],"SURF::SURF(double hessianThreshold, int nOctaves, int nOctaveLayers, bool extended, bool upright)":[184,2,1,""],"SVD&amp; SVD::operator()(InputArray src, int flags)":[123,2,1,"SVD& SVD::operator()(InputArray src, int flags)"],"SVD::SVD()":[123,2,1,""],"SVD::SVD(InputArray src, int flags)":[123,2,1,""],"Scalar gpu::absSum(const GpuMat&amp; src)":[145,2,1,"Scalar gpu::absSum(const GpuMat& src)"],"Scalar gpu::absSum(const GpuMat&amp; src, GpuMat&amp; buf)":[145,2,1,"Scalar gpu::absSum(const GpuMat& src, GpuMat& buf)"],"Scalar gpu::absSum(const GpuMat&amp; src, const GpuMat&amp; mask, GpuMat&amp; buf)":[145,2,1,"Scalar gpu::absSum(const GpuMat& src, const GpuMat& mask, GpuMat& buf)"],"Scalar gpu::sqrSum(const GpuMat&amp; src)":[145,2,1,"Scalar gpu::sqrSum(const GpuMat& src)"],"Scalar gpu::sqrSum(const GpuMat&amp; src, GpuMat&amp; buf)":[145,2,1,"Scalar gpu::sqrSum(const GpuMat& src, GpuMat& buf)"],"Scalar gpu::sqrSum(const GpuMat&amp; src, const GpuMat&amp; mask, GpuMat&amp; buf)":[145,2,1,"Scalar gpu::sqrSum(const GpuMat& src, const GpuMat& mask, GpuMat& buf)"],"Scalar gpu::sum(const GpuMat&amp; src)":[145,2,1,"Scalar gpu::sum(const GpuMat& src)"],"Scalar gpu::sum(const GpuMat&amp; src, GpuMat&amp; buf)":[145,2,1,"Scalar gpu::sum(const GpuMat& src, GpuMat& buf)"],"Scalar gpu::sum(const GpuMat&amp; src, const GpuMat&amp; mask, GpuMat&amp; buf)":[145,2,1,"Scalar gpu::sum(const GpuMat& src, const GpuMat& mask, GpuMat& buf)"],"Scalar mean(InputArray src, InputArray mask)":[123,2,1,""],"Scalar morphologyDefaultBorderValue()":[155,2,1,""],"Scalar ocl::absSum(const oclMat &amp;m)":[195,2,1,"Scalar ocl::absSum(const oclMat &m)"],"Scalar ocl::sqrSum(const oclMat &amp;m)":[195,2,1,"Scalar ocl::sqrSum(const oclMat &m)"],"Scalar ocl::sum(const oclMat &amp;m)":[195,2,1,"Scalar ocl::sum(const oclMat &m)"],"Scalar sum(InputArray src)":[123,2,1,""],"Scalar trace(InputArray mtx)":[123,2,1,""],"SimpleBlobDetector : public FeatureDetector":[128,1,1,""],"Size Mat::size() const":[114,2,1,""],"Size Retina::inputSize()":[112,2,1,""],"Size Retina::outputSize()":[112,2,1,""],"Size getTextSize(const string&amp; text, int fontFace, double fontScale, int thickness, int* baseLine)":[117,2,1,"Size getTextSize(const string& text, int fontFace, double fontScale, int thickness, int* baseLine)"],"Size getWindowSize() const":[222,2,1,""],"SparseMat SparseMat::clone() const":[114,2,1,""],"SparseMat&amp; SparseMat::operator = (const Mat&amp; m)":[114,2,1,"SparseMat& SparseMat::operator = (const Mat& m)"],"SparseMat&amp; SparseMat::operator = (const SparseMat&amp; m)":[114,2,1,"SparseMat& SparseMat::operator = (const SparseMat& m)"],"SparseMat::SparseMat()":[114,2,1,""],"SparseMat::SparseMat(const CvSparseMat* m)":[114,2,1,""],"SparseMat::SparseMat(const Mat&amp; m)":[114,2,1,"SparseMat::SparseMat(const Mat& m)"],"SparseMat::SparseMat(const SparseMat&amp; m)":[114,2,1,"SparseMat::SparseMat(const SparseMat& m)"],"SparseMat::SparseMat(int dims, const int* _sizes, int _type)":[114,2,1,""],"SparseMat::operator CvSparseMat*() const":[114,2,1,""],"SparseMat::~SparseMat()":[114,2,1,""],"SphericalWarper : public WarperCreator":[210,1,1,""],"StarAdjuster : public AdjusterAdapter":[128,1,1,""],"StarFeatureDetector : public FeatureDetector":[128,1,1,""],"Status Stitcher::composePanorama(InputArray images, OutputArray pano)":[210,2,1,""],"Status Stitcher::composePanorama(OutputArray pano)":[210,2,1,""],"Status Stitcher::estimateTransform(InputArray images)":[210,2,1,""],"Status Stitcher::estimateTransform(InputArray images, const std::vector&lt;std::vector&lt;Rect&gt; &gt; &amp;rois)":[210,2,1,"Status Stitcher::estimateTransform(InputArray images, const std::vector<std::vector<Rect> > &rois)"],"Status Stitcher::stitch(InputArray images, OutputArray pano)":[210,2,1,""],"Status Stitcher::stitch(InputArray images, const std::vector&lt;std::vector&lt;Rect&gt; &gt; &amp;rois, OutputArray pano)":[210,2,1,"Status Stitcher::stitch(InputArray images, const std::vector<std::vector<Rect> > &rois, OutputArray pano)"],"StereoBM::StereoBM()":[101,2,1,""],"StereoBM::StereoBM(int preset, int ndisparities, int SADWindowSize)":[101,2,1,""],"StereoSGBM::StereoSGBM()":[101,2,1,""],"StereoSGBM::StereoSGBM(int minDisparity, int numDisparities, int SADWindowSize, int P1, int P2, int disp12MaxDiff, int preFilterCap, int uniquenessRatio, int speckleWindowSize, int speckleRange, bool fullDP)":[101,2,1,""],"StereoVar::StereoVar()":[113,2,1,""],"StereoVar::StereoVar(int levels, double pyrScale, int nIt, int minDisp, int maxDisp, int poly_n, double poly_sigma, float fi, float lambda, int penalization, int cycle, int flags)":[113,2,1,""],"Stitcher Stitcher::createDefault(bool try_use_gpu)":[210,2,1,""],"String getText() const":[223,2,1,""],"String getWindowName() const":[222,2,1,""],"SurfAdjuster : public AdjusterAdapter":[128,1,1,""],"TermCriteria::TermCriteria()":[114,2,1,""],"TermCriteria::TermCriteria(const CvTermCriteria&amp; criteria)":[114,2,1,"TermCriteria::TermCriteria(const CvTermCriteria& criteria)"],"TermCriteria::TermCriteria(int type, int maxCount, double epsilon)":[114,2,1,""],"TermCriteria::operator CvTermCriteria() const":[114,2,1,""],"Vec2d EM::predict(InputArray sample, OutputArray probs) const":[174,2,1,""],"Vec3d RQDecomp3x3(InputArray src, OutputArray mtxR, OutputArray mtxQ, OutputArray Qx, OutputArray Qy, OutputArray Qz)":[101,2,1,""],"VectorDescriptorMatcher : public GenericDescriptorMatcher":[129,1,1,""],"VideoCapture&amp; VideoCapture::operator &gt;&gt; (Mat&amp; image)":[152,2,1,"VideoCapture& VideoCapture::operator >> (Mat& image)"],"VideoCapture::VideoCapture()":[152,2,1,""],"VideoCapture::VideoCapture(const string&amp; filename)":[152,2,1,"VideoCapture::VideoCapture(const string& filename)"],"VideoCapture::VideoCapture(int device)":[152,2,1,""],"VideoWriter&amp; VideoWriter::operator &lt;&lt; (const Mat&amp; image)":[152,2,1,"VideoWriter& VideoWriter::operator << (const Mat& image)"],"VideoWriter::VideoWriter()":[152,2,1,""],"VideoWriter::VideoWriter(const string&amp; filename, int fourcc, double fps, Size frameSize, bool isColor)":[152,2,1,"VideoWriter::VideoWriter(const string& filename, int fourcc, double fps, Size frameSize, bool isColor)"],"Viz3d getWindowByName(const String &amp;window_name)":[222,2,1,"Viz3d getWindowByName(const String &window_name)"],"Viz3d::Viz3d(const String&amp; window_name)":[222,2,1,"Viz3d::Viz3d(const String& window_name)"],"WArrow(const Point3f&amp; pt1, const Point3f&amp; pt2, double thickness , const Color &amp;color)":[223,2,1,"WArrow(const Point3f& pt1, const Point3f& pt2, double thickness , const Color &color)"],"WCameraPosition(const Matx33d &amp;K, InputArray image, double scale , const Color &amp;color)":[223,2,1,"WCameraPosition(const Matx33d &K, InputArray image, double scale , const Color &color)"],"WCameraPosition(const Matx33d &amp;K, double scale , const Color &amp;color)":[223,2,1,"WCameraPosition(const Matx33d &K, double scale , const Color &color)"],"WCameraPosition(const Vec2d &amp;fov, InputArray image, double scale , const Color &amp;color)":[223,2,1,"WCameraPosition(const Vec2d &fov, InputArray image, double scale , const Color &color)"],"WCameraPosition(const Vec2d &amp;fov, double scale , const Color &amp;color)":[223,2,1,"WCameraPosition(const Vec2d &fov, double scale , const Color &color)"],"WCameraPosition(double scale)":[223,2,1,""],"WCircle(double radius, const Point3d&amp; center, const Vec3d&amp; normal, double thickness , const Color &amp;color)":[223,2,1,"WCircle(double radius, const Point3d& center, const Vec3d& normal, double thickness , const Color &color)"],"WCircle(double radius, double thickness , const Color &amp;color)":[223,2,1,"WCircle(double radius, double thickness , const Color &color)"],"WCloud(InputArray cloud, InputArray colors)":[223,2,1,""],"WCloud(InputArray cloud, InputArray colors, InputArray normals)":[223,2,1,""],"WCloud(InputArray cloud, const Color &amp;color)":[223,2,1,"WCloud(InputArray cloud, const Color &color)"],"WCloud(InputArray cloud, const Color &amp;color, InputArray normals)":[223,2,1,"WCloud(InputArray cloud, const Color &color, InputArray normals)"],"WCloudCollection()":[223,2,1,""],"WCloudNormals(InputArray cloud, InputArray normals, int level , double scale , const Color &amp;color)":[223,2,1,"WCloudNormals(InputArray cloud, InputArray normals, int level , double scale , const Color &color)"],"WCone(double length, double radius, int resolution , const Color &amp;color)":[223,2,1,"WCone(double length, double radius, int resolution , const Color &color)"],"WCone(double radius, const Point3d&amp; center, const Point3d&amp; tip, int resolution , const Color &amp;color)":[223,2,1,"WCone(double radius, const Point3d& center, const Point3d& tip, int resolution , const Color &color)"],"WCoordinateSystem(double scale)":[223,2,1,""],"WCube(const Point3f&amp; pt_min, const Point3f&amp; pt_max, bool wire_frame , const Color &amp;color)":[223,2,1,"WCube(const Point3f& pt_min, const Point3f& pt_max, bool wire_frame , const Color &color)"],"WCylinder(const Point3f&amp; pt_on_axis, const Point3f&amp; axis_direction, double radius, int numsides , const Color &amp;color)":[223,2,1,"WCylinder(const Point3f& pt_on_axis, const Point3f& axis_direction, double radius, int numsides , const Color &color)"],"WGrid(const Vec2i &amp;cells , const Vec2d &amp;cells_spacing , const Color &amp;color)":[223,2,1,"WGrid(const Vec2i &cells , const Vec2d &cells_spacing , const Color &color)"],"WImage3D(InputArray image, const Size2d &amp;size)":[223,2,1,"WImage3D(InputArray image, const Size2d &size)"],"WImage3D(InputArray image, const Size2d &amp;size, const Vec3d &amp;position, const Vec3d &amp;normal, const Vec3d &amp;up_vector)":[223,2,1,"WImage3D(InputArray image, const Size2d &size, const Vec3d &position, const Vec3d &normal, const Vec3d &up_vector)"],"WImageOverlay(InputArray image, const Rect &amp;rect)":[223,2,1,"WImageOverlay(InputArray image, const Rect &rect)"],"WLine(const Point3f &amp;pt1, const Point3f &amp;pt2, const Color &amp;color)":[223,2,1,"WLine(const Point3f &pt1, const Point3f &pt2, const Color &color)"],"WMesh(InputArray cloud, InputArray polygons, InputArray colors , InputArray normals)":[223,2,1,""],"WMesh(const Mesh &amp;mesh)":[223,2,1,"WMesh(const Mesh &mesh)"],"WPlane(const Point3d&amp; center, const Vec3d&amp; normal, const Vec3d&amp; new_yaxis,const Size2d&amp; size , const Color &amp;color)":[223,2,1,"WPlane(const Point3d& center, const Vec3d& normal, const Vec3d& new_yaxis,const Size2d& size , const Color &color)"],"WPlane(const Size2d&amp; size , const Color &amp;color)":[223,2,1,"WPlane(const Size2d& size , const Color &color)"],"WPolyLine(InputArray points, const Color &amp;color)":[223,2,1,"WPolyLine(InputArray points, const Color &color)"],"WSphere(const cv::Point3f &amp;center, double radius, int sphere_resolution , const Color &amp;color)":[223,2,1,"WSphere(const cv::Point3f &center, double radius, int sphere_resolution , const Color &color)"],"WText(const String &amp;text, const Point2i &amp;pos, int font_size , const Color &amp;color)":[223,2,1,"WText(const String &text, const Point2i &pos, int font_size , const Color &color)"],"WText3D(const String &amp;text, const Point3f &amp;position, double text_scale , bool face_camera , const Color &amp;color)":[223,2,1,"WText3D(const String &text, const Point3f &position, double text_scale , bool face_camera , const Color &color)"],"WTrajectory(InputArray path, int display_mode , double scale , const Color &amp;color)":[223,2,1,"WTrajectory(InputArray path, int display_mode , double scale , const Color &color)"],"WTrajectoryFrustums(const std::vector&lt;Affine3d&gt; &amp;path, const Matx33d &amp;K, double scale , const Color &amp;color)":[223,2,1,"WTrajectoryFrustums(const std::vector<Affine3d> &path, const Matx33d &K, double scale , const Color &color)"],"WTrajectoryFrustums(const std::vector&lt;Affine3d&gt; &amp;path, const Vec2d &amp;fov, double scale , const Color &amp;color)":[223,2,1,"WTrajectoryFrustums(const std::vector<Affine3d> &path, const Vec2d &fov, double scale , const Color &color)"],"WTrajectorySpheres(InputArray path, double line_length , double radius , const Color &amp;from , const Color &amp;to)":[223,2,1,"WTrajectorySpheres(InputArray path, double line_length , double radius , const Color &from , const Color &to)"],"WWidgetMerger()":[223,2,1,""],"Widget getWidget(const String &amp;id) const":[222,2,1,"Widget getWidget(const String &id) const"],"array dim":[120,5,1,""],"bool AdjusterAdapter::good() const":[128,2,1,""],"bool CascadeClassifier::empty() const":[186,2,1,""],"bool CascadeClassifier::load(const string&amp; filename)":[186,2,1,"bool CascadeClassifier::load(const string& filename)"],"bool CascadeClassifier::read(const FileNode&amp; node)":[186,2,1,"bool CascadeClassifier::read(const FileNode& node)"],"bool CascadeClassifier::setImage(Ptr&lt;FeatureEvaluator&gt;&amp; feval, const Mat&amp; image)":[186,2,1,"bool CascadeClassifier::setImage(Ptr<FeatureEvaluator>& feval, const Mat& image)"],"bool CvBoost::train(CvMLData* data, CvBoostParams params, bool update)":[171,2,1,""],"bool CvBoost::train(const CvMat* trainData, int tflag, const CvMat* responses, const CvMat* varIdx, const CvMat* sampleIdx, const CvMat* varType, const CvMat* missingDataMask, CvBoostParams params, bool update)":[171,2,1,""],"bool CvBoost::train(const Mat&amp; trainData, int tflag, const Mat&amp; responses, const Mat&amp; varIdx, const Mat&amp; sampleIdx, const Mat&amp; varType, const Mat&amp; missingDataMask, CvBoostParams params, bool update)":[171,2,1,"bool CvBoost::train(const Mat& trainData, int tflag, const Mat& responses, const Mat& varIdx, const Mat& sampleIdx, const Mat& varType, const Mat& missingDataMask, CvBoostParams params, bool update)"],"bool CvDTree::train(CvDTreeTrainData* trainData, const CvMat* subsampleIdx)":[172,2,1,""],"bool CvDTree::train(CvMLData* trainData, CvDTreeParams params)":[172,2,1,""],"bool CvDTree::train(const CvMat* trainData, int tflag, const CvMat* responses, const CvMat* varIdx, const CvMat* sampleIdx, const CvMat* varType, const CvMat* missingDataMask, CvDTreeParams params)":[172,2,1,""],"bool CvDTree::train(const Mat&amp; trainData, int tflag, const Mat&amp; responses, const Mat&amp; varIdx, const Mat&amp; sampleIdx, const Mat&amp; varType, const Mat&amp; missingDataMask, CvDTreeParams params)":[172,2,1,"bool CvDTree::train(const Mat& trainData, int tflag, const Mat& responses, const Mat& varIdx, const Mat& sampleIdx, const Mat& varType, const Mat& missingDataMask, CvDTreeParams params)"],"bool CvEM::train(const CvMat* samples, const CvMat* sampleIdx, CvEMParams params, CvMat* labels)":[165,2,1,""],"bool CvEM::train(const Mat&amp; samples, const Mat&amp; sampleIdx, CvEMParams params, Mat* labels)":[165,2,1,"bool CvEM::train(const Mat& samples, const Mat& sampleIdx, CvEMParams params, Mat* labels)"],"bool CvGBTrees::train(CvMLData* data, CvGBTreesParams params, bool update)":[175,2,1,""],"bool CvGBTrees::train(const CvMat* trainData, int tflag, const CvMat* responses, const CvMat* varIdx, const CvMat* sampleIdx, const CvMat* varType, const CvMat* missingDataMask, CvGBTreesParams params, bool update)":[175,2,1,""],"bool CvGBTrees::train(const Mat&amp; trainData, int tflag, const Mat&amp; responses, const Mat&amp; varIdx, const Mat&amp; sampleIdx, const Mat&amp; varType, const Mat&amp; missingDataMask, CvGBTreesParams params, bool update)":[175,2,1,"bool CvGBTrees::train(const Mat& trainData, int tflag, const Mat& responses, const Mat& varIdx, const Mat& sampleIdx, const Mat& varType, const Mat& missingDataMask, CvGBTreesParams params, bool update)"],"bool CvKNearest::is_regression() const":[176,2,1,""],"bool CvKNearest::train(const CvMat* trainData, const CvMat* responses, const CvMat* sampleIdx, bool is_regression, int maxK, bool updateBase)":[176,2,1,""],"bool CvKNearest::train(const Mat&amp; trainData, const Mat&amp; responses, const Mat&amp; sampleIdx, bool isRegression, int maxK, bool updateBase)":[176,2,1,"bool CvKNearest::train(const Mat& trainData, const Mat& responses, const Mat& sampleIdx, bool isRegression, int maxK, bool updateBase)"],"bool CvNormalBayesClassifier::train(const CvMat* trainData, const CvMat* responses, const CvMat* varIdx , const CvMat* sampleIdx, bool update)":[180,2,1,""],"bool CvNormalBayesClassifier::train(const Mat&amp; trainData, const Mat&amp; responses, const Mat&amp; varIdx , const Mat&amp; sampleIdx, bool update)":[180,2,1,"bool CvNormalBayesClassifier::train(const Mat& trainData, const Mat& responses, const Mat& varIdx , const Mat& sampleIdx, bool update)"],"bool CvParamGrid::check()":[183,2,1,""],"bool CvRTrees::train(CvMLData* data, CvRTParams params)":[181,2,1,""],"bool CvRTrees::train(const CvMat* trainData, int tflag, const CvMat* responses, const CvMat* varIdx, const CvMat* sampleIdx, const CvMat* varType, const CvMat* missingDataMask, CvRTParams params)":[181,2,1,""],"bool CvRTrees::train(const Mat&amp; trainData, int tflag, const Mat&amp; responses, const Mat&amp; varIdx, const Mat&amp; sampleIdx, const Mat&amp; varType, const Mat&amp; missingDataMask, CvRTParams params)":[181,2,1,"bool CvRTrees::train(const Mat& trainData, int tflag, const Mat& responses, const Mat& varIdx, const Mat& sampleIdx, const Mat& varType, const Mat& missingDataMask, CvRTParams params)"],"bool CvSVM::train(const CvMat* trainData, const CvMat* responses, const CvMat* varIdx, const CvMat* sampleIdx, CvSVMParams params)":[183,2,1,""],"bool CvSVM::train(const Mat&amp; trainData, const Mat&amp; responses, const Mat&amp; varIdx, const Mat&amp; sampleIdx, CvSVMParams params)":[183,2,1,"bool CvSVM::train(const Mat& trainData, const Mat& responses, const Mat& varIdx, const Mat& sampleIdx, CvSVMParams params)"],"bool CvSVM::train_auto(const CvMat* trainData, const CvMat* responses, const CvMat* varIdx, const CvMat* sampleIdx, CvSVMParams params, int kfold , CvParamGrid Cgrid , CvParamGrid gammaGrid , CvParamGrid pGrid , CvParamGrid nuGrid , CvParamGrid coeffGrid , CvParamGrid degreeGrid , bool balanced)":[183,2,1,""],"bool CvSVM::train_auto(const Mat&amp; trainData, const Mat&amp; responses, const Mat&amp; varIdx, const Mat&amp; sampleIdx, CvSVMParams params, int k_fold , CvParamGrid Cgrid , CvParamGrid gammaGrid , CvParamGrid pGrid , CvParamGrid nuGrid , CvParamGrid coeffGrid , CvParamGrid degreeGrid , bool balanced)":[183,2,1,"bool CvSVM::train_auto(const Mat& trainData, const Mat& responses, const Mat& varIdx, const Mat& sampleIdx, CvSVMParams params, int k_fold , CvParamGrid Cgrid , CvParamGrid gammaGrid , CvParamGrid pGrid , CvParamGrid nuGrid , CvParamGrid coeffGrid , CvParamGrid degreeGrid , bool balanced)"],"bool DescriptorMatcher::empty() const":[127,2,1,""],"bool DescriptorMatcher::isMaskSupported()":[127,2,1,""],"bool EM::isTrained() const":[174,2,1,""],"bool EM::train(InputArray samples, OutputArray logLikelihoods, OutputArray labels, OutputArray probs)":[174,2,1,""],"bool EM::trainE(InputArray samples, InputArray means0, InputArray covs0, InputArray weights0, OutputArray logLikelihoods, OutputArray labels, OutputArray probs)":[174,2,1,""],"bool EM::trainM(InputArray samples, InputArray probs0, OutputArray logLikelihoods, OutputArray labels, OutputArray probs)":[174,2,1,""],"bool FeatureEvaluator::read(const FileNode&amp; node)":[186,2,1,"bool FeatureEvaluator::read(const FileNode& node)"],"bool FeatureEvaluator::setImage(const Mat&amp; img, Size origWinSize)":[186,2,1,"bool FeatureEvaluator::setImage(const Mat& img, Size origWinSize)"],"bool FeatureEvaluator::setWindow(Point p)":[186,2,1,""],"bool FileNode::empty() const":[125,2,1,""],"bool FileNode::isInt() const":[125,2,1,""],"bool FileNode::isMap() const":[125,2,1,""],"bool FileNode::isNamed() const":[125,2,1,""],"bool FileNode::isNone() const":[125,2,1,""],"bool FileNode::isReal() const":[125,2,1,""],"bool FileNode::isSeq() const":[125,2,1,""],"bool FileNode::isString() const":[125,2,1,""],"bool FileStorage::isOpened() const":[125,2,1,""],"bool FileStorage::open(const string&amp; filename, int flags, const string&amp; encoding)":[125,2,1,"bool FileStorage::open(const string& filename, int flags, const string& encoding)"],"bool GenericDescriptorMatcher::isMaskSupported()":[129,2,1,""],"bool LatentSvmDetector::load(const vector&lt;string&gt;&amp; filenames, const vector&lt;string&gt;&amp; classNames)":[187,2,1,"bool LatentSvmDetector::load(const vector<string>& filenames, const vector<string>& classNames)"],"bool Mat::empty() const":[114,2,1,""],"bool Mat::isContinuous() const":[114,2,1,""],"bool VideoCapture::grab()":[152,2,1,""],"bool VideoCapture::isOpened()":[152,2,1,""],"bool VideoCapture::open(const string&amp; filename)":[152,2,1,"bool VideoCapture::open(const string& filename)"],"bool VideoCapture::open(int device)":[152,2,1,""],"bool VideoCapture::read(Mat&amp; image)":[152,2,1,"bool VideoCapture::read(Mat& image)"],"bool VideoCapture::retrieve(Mat&amp; image, int channel)":[152,2,1,"bool VideoCapture::retrieve(Mat& image, int channel)"],"bool VideoCapture::set(int propId, double value)":[152,2,1,""],"bool VideoWriter::isOpened()":[152,2,1,""],"bool VideoWriter::open(const string&amp; filename, int fourcc, double fps, Size frameSize, bool isColor)":[152,2,1,"bool VideoWriter::open(const string& filename, int fourcc, double fps, Size frameSize, bool isColor)"],"bool bShadowDetection":[149,5,1,""],"bool checkHardwareSupport(int feature)":[124,2,1,""],"bool checkRange(InputArray a, bool quiet, Point* pos, double minVal, double maxVal)":[123,2,1,""],"bool clipLine(Rect imgRect, Point&amp; pt1, Point&amp; pt2)":[117,2,1,"bool clipLine(Rect imgRect, Point& pt1, Point& pt2)"],"bool clipLine(Size imgSize, Point&amp; pt1, Point&amp; pt2)":[117,2,1,"bool clipLine(Size imgSize, Point& pt1, Point& pt2)"],"bool detail::FeaturesMatcher::isThreadSafe() const":[212,2,1,""],"bool eigen(InputArray src, OutputArray eigenvalues, OutputArray eigenvectors, int lowindex,int highindex)":[123,2,1,""],"bool eigen(InputArray src, OutputArray eigenvalues, int lowindex, int highindex)":[123,2,1,""],"bool findChessboardCorners(InputArray image, Size patternSize, OutputArray corners, int flags)":[101,2,1,""],"bool findCirclesGrid(InputArray image, Size patternSize, OutputArray centers, int flags, const Ptr&lt;FeatureDetector&gt; &amp;blobDetector)":[101,2,1,"bool findCirclesGrid(InputArray image, Size patternSize, OutputArray centers, int flags, const Ptr<FeatureDetector> &blobDetector)"],"bool gpu::CascadeClassifier_GPU::empty() const":[146,2,1,""],"bool gpu::CascadeClassifier_GPU::load(const string&amp; filename)":[146,2,1,"bool gpu::CascadeClassifier_GPU::load(const string& filename)"],"bool gpu::DeviceInfo::isCompatible()":[143,2,1,""],"bool gpu::DeviceInfo::supports(FeatureSet feature_set) const":[143,2,1,""],"bool gpu::StereoBM_GPU::checkIfGpuCallReasonable()":[137,2,1,""],"bool gpu::Stream::queryIfComplete()":[138,2,1,""],"bool gpu::VideoReader_GPU::VideoSource::parseVideoData(const uchar* data, size_t size, bool endOfStream)":[149,2,1,""],"bool gpu::VideoReader_GPU::isOpened() const":[149,2,1,""],"bool gpu::VideoReader_GPU::read(GpuMat&amp; image)":[149,2,1,"bool gpu::VideoReader_GPU::read(GpuMat& image)"],"bool gpu::VideoWriter_GPU::isOpened() const":[149,2,1,""],"bool imencode(const string&amp; ext, InputArray img, vector&lt;uchar&gt;&amp; buf, const vector&lt;int&gt;&amp; params)":[152,2,1,"bool imencode(const string& ext, InputArray img, vector<uchar>& buf, const vector<int>& params)"],"bool imwrite(const string&amp; filename, InputArray img, const vector&lt;int&gt;&amp; params)":[152,2,1,"bool imwrite(const string& filename, InputArray img, const vector<int>& params)"],"bool isContourConvex(InputArray contour)":[162,2,1,""],"bool isNan(const Point3_&lt;_Tp&gt;&amp; p)":[222,2,1,"bool isNan(const Point3_<_Tp>& p)"],"bool isNan(const Vec&lt;_Tp, cn&gt;&amp; v)":[222,2,1,"bool isNan(const Vec<_Tp, cn>& v)"],"bool isNan(double x)":[222,2,1,""],"bool isNan(float x)":[222,2,1,""],"bool ocl::KNearestNeighbour::train(const Mat&amp; trainData, Mat&amp; labels, Mat&amp; sampleIdx)), bool isRegression , int max_k , bool updateBase)":[196,2,1,"bool ocl::KNearestNeighbour::train(const Mat& trainData, Mat& labels, Mat& sampleIdx)), bool isRegression , int max_k , bool updateBase)"],"bool ocl::StereoBM_OCL::checkIfGpuCallReasonable()":[189,2,1,""],"bool solve(InputArray src1, InputArray src2, OutputArray dst, int flags)":[123,2,1,""],"bool solvePnP(InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess, int flags)":[101,2,1,""],"bool stereoRectifyUncalibrated(InputArray points1, InputArray points2, InputArray F, Size imgSize, OutputArray H1, OutputArray H2, double threshold)":[101,2,1,""],"bool useOptimized()":[124,2,1,""],"bool wasStopped()":[222,2,1,""],"char CvMLData::get_delimiter() const":[178,2,1,""],"char CvMLData::get_miss_ch() const":[178,2,1,""],"char* imageData":[120,5,1,""],"char* imageDataOrigin":[120,5,1,""],"char[] channelSeq":[120,5,1,""],"char[] colorModel":[120,5,1,""],"const CvBoostParams&amp; CvBoost::get_params() const":[171,2,1,"const CvBoostParams& CvBoost::get_params() const"],"const CvDTreeNode* CvDTree::get_root() const":[172,2,1,""],"const CvDTreeTrainData* CvBoost::get_data() const":[171,2,1,""],"const CvFileStorage* FileStorage::operator *() const":[125,2,1,""],"const CvMat* CvANN_MLP::get_layer_sizes()":[179,2,1,""],"const CvMat* CvDTree::get_var_importance()":[172,2,1,""],"const CvMat* CvEM::get_means() const":[165,2,1,""],"const CvMat* CvEM::get_probs() const":[165,2,1,""],"const CvMat* CvEM::get_weights() const":[165,2,1,""],"const CvMat* CvMLData::get_missing() const":[178,2,1,""],"const CvMat* CvMLData::get_responses()":[178,2,1,""],"const CvMat* CvMLData::get_test_sample_idx() const":[178,2,1,""],"const CvMat* CvMLData::get_train_sample_idx() const":[178,2,1,""],"const CvMat* CvMLData::get_values() const":[178,2,1,""],"const CvMat* CvMLData::get_var_idx()":[178,2,1,""],"const CvMat* CvMLData::get_var_types()":[178,2,1,""],"const CvMat* CvRTrees::get_var_importance()":[181,2,1,""],"const CvMat* cvKalmanCorrect(CvKalman* kalman, const CvMat* measurement)":[219,4,1,""],"const CvMat* cvKalmanPredict(CvKalman* kalman, const CvMat* control)":[219,4,1,""],"const CvMat** CvEM::get_covs() const":[165,2,1,""],"const IndexParams* flann::Index_&lt;T&gt;::getIndexParameters()":[136,2,1,"const IndexParams* flann::Index_<T>::getIndexParameters()"],"const Mat&amp; BOWImgDescriptorExtractor::getVocabulary() const":[133,2,1,"const Mat& BOWImgDescriptorExtractor::getVocabulary() const"],"const Mat&amp; KalmanFilter::correct(const Mat&amp; measurement)":[219,2,1,"const Mat& KalmanFilter::correct(const Mat& measurement)"],"const Mat&amp; KalmanFilter::predict(const Mat&amp; control)":[219,2,1,"const Mat& KalmanFilter::predict(const Mat& control)"],"const char* cvGetFileNodeName(const CvFileNode* node)":[121,4,1,""],"const char* cvReadString(const CvFileNode* node, const char* default_value)":[121,4,1,""],"const char* cvReadStringByName(const CvFileStorage* fs, const CvFileNode* map, const char* name, const char* default_value)":[121,4,1,""],"const float* CvSVM::get_support_vector(int i) const":[183,2,1,""],"const int* SparseMat::size() const":[114,2,1,""],"const oclMat&amp; ocl::KalmanFilter::correct(const oclMat&amp; measurement)":[201,2,1,"const oclMat& ocl::KalmanFilter::correct(const oclMat& measurement)"],"const oclMat&amp; ocl::KalmanFilter::predict(const oclMat&amp; control)":[201,2,1,"const oclMat& ocl::KalmanFilter::predict(const oclMat& control)"],"const std::map&lt;std::string, int&gt;&amp; CvMLData::get_class_labels_map() const":[178,2,1,"const std::map<std::string, int>& CvMLData::get_class_labels_map() const"],"const std::string Retina::printSetup()":[112,2,1,""],"const std::string&amp; getBuildInformation()":[124,2,1,"const std::string& getBuildInformation()"],"const std::valarray&lt;float&gt; &amp; Retina::getMagno() const":[112,2,1,"const std::valarray<float> & Retina::getMagno() const"],"const std::valarray&lt;float&gt; &amp; Retina::getParvo() const":[112,2,1,"const std::valarray<float> & Retina::getParvo() const"],"const uchar* Mat::ptr(int i0) const":[114,2,1,""],"const vector&lt;Mat&gt;&amp; BOWTrainer::getDescriptors() const":[133,2,1,"const vector<Mat>& BOWTrainer::getDescriptors() const"],"const vector&lt;Mat&gt;&amp; DescriptorMatcher::getTrainDescriptors() const":[127,2,1,"const vector<Mat>& DescriptorMatcher::getTrainDescriptors() const"],"const vector&lt;Mat&gt;&amp; GenericDescriptorMatcher::getTrainImages() const":[129,2,1,"const vector<Mat>& GenericDescriptorMatcher::getTrainImages() const"],"const vector&lt;Mat&gt;&amp; getTestImgDescriptors() const":[111,2,1,"const vector<Mat>& getTestImgDescriptors() const"],"const vector&lt;Mat&gt;&amp; getTrainingImgDescriptors() const":[111,2,1,"const vector<Mat>& getTrainingImgDescriptors() const"],"const vector&lt;Mat&gt;&amp; of2::ChowLiuTree::getImgDescriptors() const":[111,2,1,"const vector<Mat>& of2::ChowLiuTree::getImgDescriptors() const"],"const vector&lt;string&gt;&amp; LatentSvmDetector::getClassNames() const":[187,2,1,"const vector<string>& LatentSvmDetector::getClassNames() const"],"const vector&lt;vector&lt;KeyPoint&gt; &gt;&amp; GenericDescriptorMatcher::getTrainKeypoints() const":[129,2,1,"const vector<vector<KeyPoint> >& GenericDescriptorMatcher::getTrainKeypoints() const"],"cv::gpu::GpuMat background":[149,5,1,""],"cv::gpu::GpuMat foreground":[149,5,1,""],"cv::gpu::GpuMat foreground_regions":[149,5,1,""],"cvPyrUp(const CvArr* src, CvArr* dst, int filter)":[155,4,1,""],"detail::BestOf2NearestMatcher : public detail::FeaturesMatcher":[212,1,1,""],"detail::BestOf2NearestMatcher::BestOf2NearestMatcher(bool try_use_gpu , float match_conf , int num_matches_thresh1 , int num_matches_thresh2)":[212,2,1,""],"detail::Blender":[207,1,1,""],"detail::BlocksGainCompensator : public detail::ExposureCompensator":[209,1,1,""],"detail::BundleAdjusterBase : public detail::Estimator":[213,1,1,""],"detail::BundleAdjusterBase::BundleAdjusterBase(int num_params_per_cam, int num_errs_per_measurement)":[213,2,1,""],"detail::BundleAdjusterRay : public detail::BundleAdjusterBase":[213,1,1,""],"detail::BundleAdjusterReproj : public detail::BundleAdjusterBase":[213,1,1,""],"detail::CameraParams":[208,3,1,""],"detail::CylindricalWarper : public detail::RotationWarperBase&lt;CylindricalProjector&gt;":[216,1,1,"detail::CylindricalWarper : public detail::RotationWarperBase<CylindricalProjector>"],"detail::Estimator":[213,1,1,""],"detail::Estimator::operator ()(const std::vector&lt;ImageFeatures&gt; &amp;features, const std::vector&lt;MatchesInfo&gt; &amp;pairwise_matches, std::vector&lt;CameraParams&gt; &amp;cameras)":[213,2,1,"detail::Estimator::operator ()(const std::vector<ImageFeatures> &features, const std::vector<MatchesInfo> &pairwise_matches, std::vector<CameraParams> &cameras)"],"detail::ExposureCompensator":[209,1,1,""],"detail::FeatherBlender : public detail::Blender":[207,1,1,""],"detail::FeaturesFinder":[212,1,1,""],"detail::FeaturesMatcher":[212,1,1,""],"detail::GainCompensator : public detail::ExposureCompensator":[209,1,1,""],"detail::GraphCutSeamFinder : public detail::GraphCutSeamFinderBase, public detail::SeamFinder":[214,1,1,""],"detail::GraphCutSeamFinderBase":[214,1,1,""],"detail::HomographyBasedEstimator : public detail::Estimator":[213,1,1,""],"detail::ImageFeatures":[212,3,1,""],"detail::MatchesInfo":[212,3,1,""],"detail::MultiBandBlender : public detail::Blender":[207,1,1,""],"detail::NoExposureCompensator : public detail::ExposureCompensator":[209,1,1,""],"detail::NoSeamFinder : public detail::SeamFinder":[214,1,1,""],"detail::OrbFeaturesFinder : public detail::FeaturesFinder":[212,1,1,""],"detail::PairwiseSeamFinder : public detail::SeamFinder":[214,1,1,""],"detail::PlaneWarper : public detail::RotationWarperBase&lt;PlaneProjector&gt;":[216,1,1,"detail::PlaneWarper : public detail::RotationWarperBase<PlaneProjector>"],"detail::ProjectorBase":[216,3,1,""],"detail::RotationWarper":[216,1,1,""],"detail::RotationWarperBase":[216,1,1,""],"detail::SeamFinder":[214,1,1,""],"detail::SphericalWarper : public detail::RotationWarperBase&lt;SphericalProjector&gt;":[216,1,1,"detail::SphericalWarper : public detail::RotationWarperBase<SphericalProjector>"],"detail::SurfFeaturesFinder : public detail::FeaturesFinder":[212,1,1,""],"detail::VoronoiSeamFinder : public detail::PairwiseSeamFinder":[214,1,1,""],"detail::WaveCorrectKind":[213,8,1,""],"double CvEM::getLikelihood() const":[165,2,1,""],"double CvEM::get_log_likelihood() const":[165,2,1,""],"double CvParamGrid::max_val":[183,5,1,""],"double CvParamGrid::min_val":[183,5,1,""],"double CvParamGrid::step":[183,5,1,""],"double FeatureEvaluator::calcOrd(int featureIdx) const":[186,2,1,""],"double Mahalanobis(InputArray v1, InputArray v2, InputArray icovar)":[123,2,1,""],"double Mat::dot(InputArray m) const":[114,2,1,""],"double RNG::gaussian(double sigma)":[123,2,1,""],"double RNG::uniform(double a, double b)":[123,2,1,""],"double VideoCapture::get(int propId)":[152,2,1,""],"double arcLength(InputArray curve, bool closed)":[162,2,1,""],"double bp_dw_scale":[179,5,1,""],"double bp_moment_scale":[179,5,1,""],"double calcGlobalOrientation(InputArray orientation, InputArray mask, InputArray mhi, double timestamp, double duration)":[219,2,1,""],"double calibrateCamera(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, Size imageSize, InputOutputArray cameraMatrix, InputOutputArray distCoeffs, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags, TermCriteria criteria)":[101,2,1,""],"double compareHist(InputArray H1, InputArray H2, int method)":[157,2,1,""],"double compareHist(const SparseMat&amp; H1, const SparseMat&amp; H2, int method)":[157,2,1,"double compareHist(const SparseMat& H1, const SparseMat& H2, int method)"],"double contourArea(InputArray contour, bool oriented)":[162,2,1,""],"double cvArcLength(const void* curve, CvSlice slice, int is_closed)":[162,4,1,""],"double cvCalcGlobalOrientation(const CvArr* orientation, const CvArr* mask, const CvArr* mhi, double timestamp, double duration)":[219,4,1,""],"double cvCalibrateCamera2(const CvMat* object_points, const CvMat* image_points, const CvMat* point_counts, CvSize image_size, CvMat* camera_matrix, CvMat* distortion_coeffs, CvMat* rotation_vectors, CvMat* translation_vectors, int flags, CvTermCriteria term_crit)":[101,4,1,""],"double cvCompareHist(const CvHistogram* hist1, const CvHistogram* hist2, int method)":[157,4,1,""],"double cvContourArea(const CvArr* contour, CvSlice slice, int oriented)":[162,4,1,""],"double cvDet(const CvArr* mat)":[123,4,1,""],"double cvDotProduct(const CvArr* src1, const CvArr* src2)":[120,4,1,""],"double cvGetCaptureProperty(CvCapture* capture, int property_id)":[152,4,1,""],"double cvGetReal1D(const CvArr* arr, int idx0)":[120,4,1,""],"double cvGetReal2D(const CvArr* arr, int idx0, int idx1)":[120,4,1,""],"double cvGetReal3D(const CvArr* arr, int idx0, int idx1, int idx2)":[120,4,1,""],"double cvGetRealND(const CvArr* arr, const int* idx)":[120,4,1,""],"double cvGetWindowProperty(const char* name, int prop_id)":[151,4,1,""],"double cvInvert(const CvArr* src, CvArr* dst, int method)":[123,4,1,""],"double cvMahalanobis(const CvArr* vec1, const CvArr* vec2, const CvArr* mat)":[123,4,1,""],"double cvMatchShapes(const void* object1, const void* object2, int method, double parameter)":[162,4,1,""],"double cvNorm(const CvArr* arr1, const CvArr* arr2, int norm_type, const CvArr* mask)":[123,4,1,""],"double cvPointPolygonTest(const CvArr* contour, CvPoint2D32f pt, int measure_dist)":[162,4,1,""],"double cvRandReal(CvRNG* rng)":[120,4,1,""],"double cvReadReal(const CvFileNode* node, double default_value)":[121,4,1,""],"double cvReadRealByName(const CvFileStorage* fs, const CvFileNode* map, const char* name, double default_value)":[121,4,1,""],"double cvStereoCalibrate(const CvMat* object_points, const CvMat* image_points1, const CvMat* image_points2, const CvMat* npoints, CvMat* camera_matrix1, CvMat* dist_coeffs1, CvMat* camera_matrix2, CvMat* dist_coeffs2, CvSize image_size, CvMat* R, CvMat* T, CvMat* E, CvMat* F, CvTermCriteria term_crit, int flags)":[101,4,1,""],"double cvThreshold(const CvArr* src, CvArr* dst, double threshold, double max_value, int threshold_type)":[159,4,1,""],"double cvmGet(const CvMat* mat, int row, int col)":[120,4,1,""],"double determinant(InputArray mtx)":[123,2,1,""],"double epsilon":[120,5,1,""],"double fisheye::calibrate(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, const Size&amp; image_size, InputOutputArray K, InputOutputArray D, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags , TermCriteria criteria)":[101,2,1,"double fisheye::calibrate(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints, const Size& image_size, InputOutputArray K, InputOutputArray D, OutputArrayOfArrays rvecs, OutputArrayOfArrays tvecs, int flags , TermCriteria criteria)"],"double fisheye::stereoCalibrate(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray K1, InputOutputArray D1, InputOutputArray K2, InputOutputArray D2, Size imageSize, OutputArray R, OutputArray T, int flags , TermCriteria criteria)":[101,2,1,""],"double getRenderingProperty(const String &amp;id, int property)":[222,2,1,"double getRenderingProperty(const String &id, int property)"],"double getRenderingProperty(int property) const":[223,2,1,""],"double getTickFrequency()":[124,2,1,""],"double getWindowProperty(const string&amp; winname, int prop_id)":[151,2,1,"double getWindowProperty(const string& winname, int prop_id)"],"double gpu::norm(const GpuMat&amp; src1, const GpuMat&amp; src2, int normType)":[145,2,1,"double gpu::norm(const GpuMat& src1, const GpuMat& src2, int normType)"],"double gpu::norm(const GpuMat&amp; src1, int normType)":[145,2,1,"double gpu::norm(const GpuMat& src1, int normType)"],"double gpu::norm(const GpuMat&amp; src1, int normType, GpuMat&amp; buf)":[145,2,1,"double gpu::norm(const GpuMat& src1, int normType, GpuMat& buf)"],"double gpu::norm(const GpuMat&amp; src1, int normType, const GpuMat&amp; mask, GpuMat&amp; buf)":[145,2,1,"double gpu::norm(const GpuMat& src1, int normType, const GpuMat& mask, GpuMat& buf)"],"double gpu::threshold(const GpuMat&amp; src, GpuMat&amp; dst, double thresh, double maxval, int type, Stream&amp; stream)":[142,2,1,"double gpu::threshold(const GpuMat& src, GpuMat& dst, double thresh, double maxval, int type, Stream& stream)"],"double hessianThreshold":[184,5,1,""],"double invert(InputArray src, OutputArray dst, int flags)":[123,2,1,""],"double kmeans(InputArray data, int K, InputOutputArray bestLabels, TermCriteria criteria, int attempts, int flags, OutputArray centers)":[115,2,1,""],"double lambda":[219,5,1,""],"double matchShapes(InputArray contour1, InputArray contour2, int method, double parameter)":[162,2,1,""],"double norm(InputArray src1, InputArray src2, int normType, InputArray mask)":[123,2,1,""],"double norm(InputArray src1, int normType, InputArray mask)":[123,2,1,""],"double norm(const SparseMat&amp; src, int normType)":[123,2,1,"double norm(const SparseMat& src, int normType)"],"double ocl::kmeans(const oclMat &amp;src, int K, oclMat &amp;bestLabels, TermCriteria criteria, int attemps, int flags, oclMat &amp;centers)":[196,2,1,"double ocl::kmeans(const oclMat &src, int K, oclMat &bestLabels, TermCriteria criteria, int attemps, int flags, oclMat &centers)"],"double ocl::norm(const oclMat &amp;src1, const oclMat &amp;src2, int normType)":[199,2,1,"double ocl::norm(const oclMat &src1, const oclMat &src2, int normType)"],"double ocl::norm(const oclMat &amp;src1, int normType)":[199,2,1,"double ocl::norm(const oclMat &src1, int normType)"],"double ocl::threshold(const oclMat &amp;src, oclMat &amp;dst, double thresh, double maxVal, int type)":[193,2,1,"double ocl::threshold(const oclMat &src, oclMat &dst, double thresh, double maxVal, int type)"],"double pointPolygonTest(InputArray contour, Point2f pt, bool measureDist)":[162,2,1,""],"double rp_dw0":[179,5,1,""],"double rp_dw_max":[179,5,1,""],"double rp_dw_min":[179,5,1,""],"double rp_dw_minus":[179,5,1,""],"double rp_dw_plus":[179,5,1,""],"double solvePoly(InputArray coeffs, OutputArray roots, int maxIters)":[123,2,1,""],"double stereoCalibrate(InputArrayOfArrays objectPoints, InputArrayOfArrays imagePoints1, InputArrayOfArrays imagePoints2, InputOutputArray cameraMatrix1, InputOutputArray distCoeffs1, InputOutputArray cameraMatrix2, InputOutputArray distCoeffs2, Size imageSize, OutputArray R, OutputArray T, OutputArray E, OutputArray F, TermCriteria criteria, int flags)":[101,2,1,""],"double tau":[219,5,1,""],"double theta":[219,5,1,""],"double threshold(InputArray src, OutputArray dst, double thresh, double maxval, int type)":[159,2,1,""],"double value":[172,5,1,""],"double* CvANN_MLP::get_weights(int layer)":[179,2,1,""],"double[4] val":[120,5,1,""],"flann::Index_":[136,1,1,""],"flann::Index_&lt;T&gt;::Index_(const Mat&amp; features, const IndexParams&amp; params)":[136,2,1,"flann::Index_<T>::Index_(const Mat& features, const IndexParams& params)"],"float *H":[187,5,1,""],"float CvANN_MLP::predict(const CvMat* inputs, CvMat* outputs) const":[179,2,1,""],"float CvANN_MLP::predict(const Mat&amp; inputs, Mat&amp; outputs) const":[179,2,1,"float CvANN_MLP::predict(const Mat& inputs, Mat& outputs) const"],"float CvBoost::calc_error(CvMLData* _data, int type , std::vector&lt;float&gt; *resp)":[171,2,1,"float CvBoost::calc_error(CvMLData* _data, int type , std::vector<float> *resp)"],"float CvBoost::predict(const CvMat* sample, const CvMat* missing, CvMat* weak_responses, CvSlice slice, bool raw_mode, bool return_sum) const":[171,2,1,""],"float CvBoost::predict(const cv::Mat&amp; sample, const cv::Mat&amp; missing, const cv::Range&amp; slice, bool rawMode, bool returnSum) const":[171,2,1,"float CvBoost::predict(const cv::Mat& sample, const cv::Mat& missing, const cv::Range& slice, bool rawMode, bool returnSum) const"],"float CvDTree::calc_error(CvMLData* trainData, int type, std::vector&lt;float&gt; *resp)":[172,2,1,"float CvDTree::calc_error(CvMLData* trainData, int type, std::vector<float> *resp)"],"float CvEM::predict(const CvMat* sample, CvMat* probs) const":[165,2,1,""],"float CvEM::predict(const Mat&amp; sample, Mat* probs) const":[165,2,1,"float CvEM::predict(const Mat& sample, Mat* probs) const"],"float CvGBTrees::calc_error(CvMLData* _data, int type, std::vector&lt;float&gt; *resp)":[175,2,1,"float CvGBTrees::calc_error(CvMLData* _data, int type, std::vector<float> *resp)"],"float CvGBTrees::predict(const CvMat* sample, const CvMat* missing, CvMat* weakResponses, CvSlice slice , int k) const":[175,2,1,""],"float CvGBTrees::predict(const Mat&amp; sample, const Mat&amp; missing, const Range&amp; slice , int k) const":[175,2,1,"float CvGBTrees::predict(const Mat& sample, const Mat& missing, const Range& slice , int k) const"],"float CvKNearest::find_nearest(const CvMat* samples, int k, CvMat* results, const float** neighbors, CvMat* neighborResponses, CvMat* dist) const":[176,2,1,""],"float CvKNearest::find_nearest(const Mat&amp; samples, int k, Mat&amp; results, Mat&amp; neighborResponses, Mat&amp; dists) const":[176,2,1,"float CvKNearest::find_nearest(const Mat& samples, int k, Mat& results, Mat& neighborResponses, Mat& dists) const"],"float CvKNearest::find_nearest(const Mat&amp; samples, int k, Mat* results, const float** neighbors, Mat* neighborResponses, Mat* dist) const":[176,2,1,"float CvKNearest::find_nearest(const Mat& samples, int k, Mat* results, const float** neighbors, Mat* neighborResponses, Mat* dist) const"],"float CvNormalBayesClassifier::predict(const CvMat* samples, CvMat* results) const":[180,2,1,""],"float CvNormalBayesClassifier::predict(const Mat&amp; samples, Mat* results) const":[180,2,1,"float CvNormalBayesClassifier::predict(const Mat& samples, Mat* results) const"],"float CvRTrees::calc_error(CvMLData* data, int type, std::vector&lt;float&gt;* resp)":[181,2,1,"float CvRTrees::calc_error(CvMLData* data, int type, std::vector<float>* resp)"],"float CvRTrees::get_proximity(const CvMat* sample1, const CvMat* sample2, const CvMat* missing1 , const CvMat* missing2) const":[181,2,1,""],"float CvRTrees::get_train_error()":[181,2,1,""],"float CvRTrees::predict(const CvMat* sample, const CvMat* missing) const":[181,2,1,""],"float CvRTrees::predict(const Mat&amp; sample, const Mat&amp; missing) const":[181,2,1,"float CvRTrees::predict(const Mat& sample, const Mat& missing) const"],"float CvRTrees::predict_prob(const CvMat* sample, const CvMat* missing) const":[181,2,1,""],"float CvRTrees::predict_prob(const cv::Mat&amp; sample, const cv::Mat&amp; missing) const":[181,2,1,"float CvRTrees::predict_prob(const cv::Mat& sample, const cv::Mat& missing) const"],"float CvSVM::predict(const CvMat* sample, bool returnDFVal) const":[183,2,1,""],"float CvSVM::predict(const CvMat* samples, CvMat* results) const":[183,2,1,""],"float CvSVM::predict(const Mat&amp; sample, bool returnDFVal) const":[183,2,1,"float CvSVM::predict(const Mat& sample, bool returnDFVal) const"],"float EMD(InputArray signature1, InputArray signature2, int distType, InputArray cost, float* lowerBound, OutputArray flow)":[157,2,1,""],"float RNG::uniform(float a, float b)":[123,2,1,""],"float angle":[120,5,1,""],"float backgroundPrior":[149,5,1,""],"float backgroundRatio":[149,5,1,""],"float cubeRoot(float val)":[124,2,1,""],"float cvCalcEMD2(const CvArr* signature1, const CvArr* signature2, int distance_type, CvDistanceFunction distance_func, const CvArr* cost_matrix, CvArr* flow, float* lower_bound, void* userdata)":[157,4,1,""],"float cvCbrt(float value)":[124,4,1,""],"float cvFastArctan(float y, float x)":[124,4,1,""],"float cvGetHistValue_1D(CvHistogram hist, int idx0)":[167,4,1,""],"float cvGetHistValue_2D(CvHistogram hist, int idx0, int idx1)":[167,4,1,""],"float cvGetHistValue_3D(CvHistogram hist, int idx0, int idx1, int idx2)":[167,4,1,""],"float cvGetHistValue_nD(CvHistogram hist, int idx)":[167,4,1,""],"float cvQueryHistValue_1D(CvHistogram hist, int idx0)":[167,4,1,""],"float cvQueryHistValue_2D(CvHistogram hist, int idx0, int idx1)":[167,4,1,""],"float cvQueryHistValue_3D(CvHistogram hist, int idx0, int idx1, int idx2)":[167,4,1,""],"float cvQueryHistValue_nD(CvHistogram hist, const int* idx)":[167,4,1,""],"float cvSqrt(float value)":[123,4,1,""],"float decisionThreshold":[149,5,1,""],"float fCT":[149,5,1,""],"float fTau":[149,5,1,""],"float fVarInit":[149,5,1,""],"float fVarMax":[149,5,1,""],"float fVarMin":[149,5,1,""],"float fastAtan2(float y, float x)":[124,2,1,""],"float fineFunction[4]":[187,5,1,""],"float learningRate":[149,5,1,""],"float ord::c":[172,5,1,""],"float quality":[172,5,1,""],"float response":[128,5,1,""],"float score":[187,5,1,""],"float score_threshold":[187,5,1,""],"float size":[128,5,1,""],"float smoothingRadius":[149,5,1,""],"float varThreshold":[149,5,1,""],"float varThresholdGen":[219,5,1,""],"float* b":[187,5,1,""],"gpu::BaseColumnFilter_GPU":[141,1,1,""],"gpu::BaseFilter_GPU":[141,1,1,""],"gpu::BaseRowFilter_GPU":[141,1,1,""],"gpu::BroxOpticalFlow":[149,1,1,""],"gpu::BruteForceMatcher_GPU_base":[139,1,1,""],"gpu::CascadeClassifier_GPU":[146,1,1,""],"gpu::CascadeClassifier_GPU::CascadeClassifier_GPU(const string&amp; filename)":[146,2,1,"gpu::CascadeClassifier_GPU::CascadeClassifier_GPU(const string& filename)"],"gpu::ConvolveBuf":[142,3,1,""],"gpu::ConvolveBuf::create(Size image_size, Size templ_size)":[142,2,1,""],"gpu::CudaMem":[138,1,1,""],"gpu::DeviceInfo":[143,1,1,""],"gpu::DeviceInfo::DeviceInfo()":[143,2,1,""],"gpu::DeviceInfo::DeviceInfo(int device_id)":[143,2,1,""],"gpu::DisparityBilateralFilter":[137,1,1,""],"gpu::DisparityBilateralFilter::DisparityBilateralFilter(int ndisp , int radius , int iters)":[137,2,1,""],"gpu::DisparityBilateralFilter::DisparityBilateralFilter(int ndisp, int radius, int iters, float edge_threshold, float max_disc_threshold, float sigma_range)":[137,2,1,""],"gpu::FAST_GPU":[139,1,1,""],"gpu::FAST_GPU::FAST_GPU(int threshold, bool nonmaxSuppression , double keypointsRatio)":[139,2,1,""],"gpu::FGDStatModel":[149,1,1,""],"gpu::FGDStatModel::FGDStatModel(const cv::gpu::GpuMat&amp; firstFrame, const Params&amp; params , int out_cn)":[149,2,1,"gpu::FGDStatModel::FGDStatModel(const cv::gpu::GpuMat& firstFrame, const Params& params , int out_cn)"],"gpu::FGDStatModel::FGDStatModel(int out_cn)":[149,2,1,""],"gpu::FarnebackOpticalFlow":[149,1,1,""],"gpu::FastNonLocalMeansDenoising":[142,1,1,""],"gpu::FeatureSet":[143,8,1,""],"gpu::FilterEngine_GPU":[141,1,1,""],"gpu::GMG_GPU":[149,1,1,""],"gpu::GMG_GPU::GMG_GPU()":[149,2,1,""],"gpu::GoodFeaturesToTrackDetector_GPU":[149,1,1,""],"gpu::GoodFeaturesToTrackDetector_GPU::GoodFeaturesToTrackDetector_GPU(int maxCorners , double qualityLevel , double minDistance , int blockSize , bool useHarrisDetector , double harrisK)":[149,2,1,""],"gpu::GpuMat ogl::Buffer::mapDevice()":[122,2,1,""],"gpu::GpuMat":[138,1,1,""],"gpu::HOGDescriptor":[146,3,1,""],"gpu::HOGDescriptor::HOGDescriptor(Size win_size, Size block_size, Size block_stride, Size cell_size, int nbins, double win_sigma, double threshold_L2hys, bool gamma_correction, int nlevels)":[146,2,1,""],"gpu::MOG2_GPU":[149,1,1,""],"gpu::MOG2_GPU::MOG2_GPU(int nmixtures)":[149,2,1,""],"gpu::MOG_GPU":[149,1,1,""],"gpu::MOG_GPU::MOG_GPU(int nmixtures)":[149,2,1,""],"gpu::MatchTemplateBuf":[142,3,1,""],"gpu::ORB_GPU":[139,1,1,""],"gpu::ORB_GPU::ORB_GPU(int nFeatures , float scaleFactor , int nLevels , int edgeThreshold , int firstLevel , int WTA_K , int scoreType , int patchSize)":[139,2,1,""],"gpu::PtrStep":[138,1,1,""],"gpu::PtrStepSz":[138,1,1,""],"gpu::PyrLKOpticalFlow":[149,1,1,""],"gpu::SURF_GPU":[184,1,1,""],"gpu::StereoBM_GPU":[137,1,1,""],"gpu::StereoBM_GPU::StereoBM_GPU()":[137,2,1,""],"gpu::StereoBM_GPU::StereoBM_GPU(int preset, int ndisparities , int winSize)":[137,2,1,""],"gpu::StereoBeliefPropagation":[137,1,1,""],"gpu::StereoBeliefPropagation::StereoBeliefPropagation(int ndisp , int iters , int levels , int msg_type)":[137,2,1,""],"gpu::StereoBeliefPropagation::StereoBeliefPropagation(int ndisp, int iters, int levels, float max_data_term, float data_weight, float max_disc_term, float disc_single_jump, int msg_type)":[137,2,1,""],"gpu::StereoConstantSpaceBP":[137,1,1,""],"gpu::StereoConstantSpaceBP::StereoConstantSpaceBP(int ndisp , int iters , int levels , int nr_plane , int msg_type)":[137,2,1,""],"gpu::StereoConstantSpaceBP::StereoConstantSpaceBP(int ndisp, int iters, int levels, int nr_plane, float max_data_term, float data_weight, float max_disc_term, float disc_single_jump, int min_disp_th , int msg_type)":[137,2,1,""],"gpu::Stream":[138,1,1,""],"gpu::StreamAccessor":[138,3,1,""],"gpu::TargetArchs":[143,1,1,""],"gpu::VideoReader_GPU":[149,1,1,""],"gpu::VideoReader_GPU::ChromaFormat":[149,8,1,""],"gpu::VideoReader_GPU::Codec":[149,8,1,""],"gpu::VideoReader_GPU::FormatInfo":[149,3,1,""],"gpu::VideoReader_GPU::VideoReader_GPU()":[149,2,1,""],"gpu::VideoReader_GPU::VideoReader_GPU(const cv::Ptr&lt;VideoSource&gt;&amp; source)":[149,2,1,"gpu::VideoReader_GPU::VideoReader_GPU(const cv::Ptr<VideoSource>& source)"],"gpu::VideoReader_GPU::VideoReader_GPU(const std::string&amp; filename)":[149,2,1,"gpu::VideoReader_GPU::VideoReader_GPU(const std::string& filename)"],"gpu::VideoReader_GPU::VideoSource":[149,1,1,""],"gpu::VideoWriter_GPU":[149,1,1,""],"gpu::VideoWriter_GPU::EncoderCallBack":[149,1,1,""],"gpu::VideoWriter_GPU::EncoderParams":[149,3,1,""],"gpu::VideoWriter_GPU::EncoderParams::EncoderParams()":[149,2,1,""],"gpu::VideoWriter_GPU::EncoderParams::EncoderParams(const std::string&amp; configFile)":[149,2,1,"gpu::VideoWriter_GPU::EncoderParams::EncoderParams(const std::string& configFile)"],"gpu::VideoWriter_GPU::VideoWriter_GPU()":[149,2,1,""],"gpu::VideoWriter_GPU::VideoWriter_GPU(const cv::Ptr&lt;EncoderCallBack&gt;&amp; encoderCallback, cv::Size frameSize, double fps, SurfaceFormat format)":[149,2,1,"gpu::VideoWriter_GPU::VideoWriter_GPU(const cv::Ptr<EncoderCallBack>& encoderCallback, cv::Size frameSize, double fps, SurfaceFormat format)"],"gpu::VideoWriter_GPU::VideoWriter_GPU(const cv::Ptr&lt;EncoderCallBack&gt;&amp; encoderCallback, cv::Size frameSize, double fps, const EncoderParams&amp; params, SurfaceFormat format)":[149,2,1,"gpu::VideoWriter_GPU::VideoWriter_GPU(const cv::Ptr<EncoderCallBack>& encoderCallback, cv::Size frameSize, double fps, const EncoderParams& params, SurfaceFormat format)"],"gpu::VideoWriter_GPU::VideoWriter_GPU(const std::string&amp; fileName, cv::Size frameSize, double fps, SurfaceFormat format)":[149,2,1,"gpu::VideoWriter_GPU::VideoWriter_GPU(const std::string& fileName, cv::Size frameSize, double fps, SurfaceFormat format)"],"gpu::VideoWriter_GPU::VideoWriter_GPU(const std::string&amp; fileName, cv::Size frameSize, double fps, const EncoderParams&amp; params, SurfaceFormat format)":[149,2,1,"gpu::VideoWriter_GPU::VideoWriter_GPU(const std::string& fileName, cv::Size frameSize, double fps, const EncoderParams& params, SurfaceFormat format)"],"int BOWImgDescriptorExtractor::descriptorSize() const":[133,2,1,""],"int BOWImgDescriptorExtractor::descriptorType() const":[133,2,1,""],"int BOWTrainer::descripotorsCount() const":[133,2,1,""],"int CascadeClassifier::runAt(Ptr&lt;FeatureEvaluator&gt;&amp; feval, Point pt, double&amp; weight)":[186,2,1,"int CascadeClassifier::runAt(Ptr<FeatureEvaluator>& feval, Point pt, double& weight)"],"int CvANN_MLP::get_layer_count()":[179,2,1,""],"int CvANN_MLP::train(const CvMat* inputs, const CvMat* outputs, const CvMat* sampleWeights, const CvMat* sampleIdx, CvANN_MLP_TrainParams params , int flags)":[179,2,1,""],"int CvANN_MLP::train(const Mat&amp; inputs, const Mat&amp; outputs, const Mat&amp; sampleWeights, const Mat&amp; sampleIdx, CvANN_MLP_TrainParams params , int flags)":[179,2,1,"int CvANN_MLP::train(const Mat& inputs, const Mat& outputs, const Mat& sampleWeights, const Mat& sampleIdx, CvANN_MLP_TrainParams params , int flags)"],"int CvDTree::get_pruned_tree_idx() const":[172,2,1,""],"int CvEM::getNClusters() const":[165,2,1,""],"int CvEM::get_nclusters() const":[165,2,1,""],"int CvKNearest::get_max_k() const":[176,2,1,""],"int CvKNearest::get_sample_count() const":[176,2,1,""],"int CvKNearest::get_var_count() const":[176,2,1,""],"int CvMLData::get_response_idx() const":[178,2,1,""],"int CvMLData::get_var_type(int var_idx) const":[178,2,1,""],"int CvMLData::read_csv(const char* filename)":[178,2,1,""],"int CvRTrees::get_tree_count() const":[181,2,1,""],"int CvSVM::get_support_vector_count() const":[183,2,1,""],"int CvSVM::get_var_count() const":[183,2,1,""],"int FaceRecognizer::predict(InputArray src) const = 0":[104,2,1,""],"int FeatureEvaluator::calcCat(int featureIdx) const":[186,2,1,""],"int FeatureEvaluator::getFeatureType() const":[186,2,1,""],"int FileNode::type() const":[125,2,1,""],"int ID":[120,5,1,""],"int Mat::channels() const":[114,2,1,""],"int Mat::depth() const":[114,2,1,""],"int Mat::type() const":[114,2,1,""],"int RNG::uniform(int a, int b)":[123,2,1,""],"int SparseMat::channels() const":[114,2,1,""],"int SparseMat::depth() const":[114,2,1,""],"int SparseMat::dims() const":[114,2,1,""],"int SparseMat::size(int i) const":[114,2,1,""],"int SparseMat::type() const":[114,2,1,""],"int Tn":[172,5,1,""],"int align":[120,5,1,""],"int alphaChannel":[120,5,1,""],"int block_size":[118,5,1,""],"int borderInterpolate(int p, int len, int borderType)":[155,2,1,""],"int buildOpticalFlowPyramid(InputArray img, OutputArrayOfArrays pyramid, Size winSize, int maxLevel, bool withDerivatives , int pyrBorder , int derivBorder , bool tryReuseInputImage)":[219,2,1,""],"int classID":[187,5,1,""],"int class_id":[128,5,1,""],"int class_idx":[172,5,1,""],"int cols":[120,5,1,""],"int countNonZero(InputArray src)":[123,2,1,""],"int createButton(const string&amp; bar_name, ButtonCallback on_change, void* userdata, int type, bool initial_button_state)":[151,2,1,"int createButton(const string& bar_name, ButtonCallback on_change, void* userdata, int type, bool initial_button_state)"],"int createTrackbar(const string&amp; trackbarname, const string&amp; winname, int* value, int count, TrackbarCallback onChange, void* userdata)":[153,2,1,"int createTrackbar(const string& trackbarname, const string& winname, int* value, int count, TrackbarCallback onChange, void* userdata)"],"int cvCamShift(const CvArr* prob_image, CvRect window, CvTermCriteria criteria, CvConnectedComp* comp, CvBox2D* box)":[219,4,1,""],"int cvCeil(double value)":[124,4,1,""],"int cvCheckContourConvexity(const CvArr* contour)":[162,4,1,""],"int cvCheckHardwareSupport(int feature)":[124,4,1,""],"int cvClipLine(CvSize img_size, CvPoint* pt1, CvPoint* pt2)":[117,4,1,""],"int cvCountNonZero(const CvArr* arr)":[123,4,1,""],"int cvCreateButton(const char* button_name, CvButtonCallback on_change, void* userdata, int button_type, int initial_button_state)":[151,4,1,""],"int cvCreateTrackbar(const char* trackbar_name, const char* window_name, int* value, int count, CvTrackbarCallback on_change)":[153,4,1,""],"int cvFindChessboardCorners(const void* image, CvSize pattern_size, CvPoint2D32f* corners, int* corner_count, int flags)":[101,4,1,""],"int cvFindContours(CvArr* image, CvMemStorage* storage, CvSeq** first_contour, int header_size, int mode, int method, CvPoint offset)":[162,4,1,""],"int cvFindFundamentalMat(const CvMat* points1, const CvMat* points2, CvMat* fundamental_matrix, int method, double param1, double param2, CvMat* status)":[101,4,1,""],"int cvFindHomography(const CvMat* src_points, const CvMat* dst_points, CvMat* homography, int method, double ransacReprojThreshold, CvMat* mask)":[101,4,1,""],"int cvFloor(double value)":[124,4,1,""],"int cvGetDimSize(const CvArr* arr, int index)":[120,4,1,""],"int cvGetDims(const CvArr* arr, int* sizes)":[120,4,1,""],"int cvGetElemType(const CvArr* arr)":[120,4,1,""],"int cvGetImageCOI(const IplImage* image)":[120,4,1,""],"int cvGetOptimalDFTSize(int size0)":[123,4,1,""],"int cvGetSeqReaderPos(CvSeqReader* reader)":[118,4,1,""],"int cvGetTrackbarPos(const char* trackbar_name, const char* window_name)":[153,4,1,""],"int cvGrabFrame(CvCapture* capture)":[152,4,1,""],"int cvGraphAddEdge(CvGraph* graph, int start_idx, int end_idx, const CvGraphEdge* edge, CvGraphEdge** inserted_edge)":[118,4,1,""],"int cvGraphAddEdgeByPtr(CvGraph* graph, CvGraphVtx* start_vtx, CvGraphVtx* end_vtx, const CvGraphEdge* edge, CvGraphEdge** inserted_edge)":[118,4,1,""],"int cvGraphAddVtx(CvGraph* graph, const CvGraphVtx* vtx, CvGraphVtx** inserted_vtx)":[118,4,1,""],"int cvGraphEdgeIdx(CvGraph* graph, CvGraphEdge* edge)":[118,4,1,""],"int cvGraphRemoveVtx(CvGraph* graph, int index)":[118,4,1,""],"int cvGraphRemoveVtxByPtr(CvGraph* graph, CvGraphVtx* vtx)":[118,4,1,""],"int cvGraphVtxDegree(const CvGraph* graph, int vtx_idx)":[118,4,1,""],"int cvGraphVtxDegreeByPtr(const CvGraph* graph, const CvGraphVtx* vtx)":[118,4,1,""],"int cvGraphVtxIdx(CvGraph* graph, CvGraphVtx* vtx)":[118,4,1,""],"int cvIncRefData(CvArr* arr)":[120,4,1,""],"int cvIsInf(double value)":[124,4,1,""],"int cvIsNaN(double value)":[124,4,1,""],"int cvKMeans2(const CvArr* samples, int cluster_count, CvArr* labels, CvTermCriteria termcrit, int attempts, CvRNG* rng, int flags, CvArr* _centers, double* compactness)":[115,4,1,""],"int cvMeanShift(const CvArr* prob_image, CvRect window, CvTermCriteria criteria, CvConnectedComp* comp)":[219,4,1,""],"int cvMinEnclosingCircle(const CvArr* points, CvPoint2D32f* center, float* radius)":[162,4,1,""],"int cvNamedWindow(const char* name, int flags)":[153,4,1,""],"int cvNextGraphItem(CvGraphScanner* scanner)":[118,4,1,""],"int cvReadInt(const CvFileNode* node, int default_value)":[121,4,1,""],"int cvReadIntByName(const CvFileStorage* fs, const CvFileNode* map, const char* name, int default_value)":[121,4,1,""],"int cvRodrigues2(const CvMat* src, CvMat* dst, CvMat* jacobian)":[101,4,1,""],"int cvRound(double value)":[124,4,1,""],"int cvRunHaarClassifierCascade(const CvHaarClassifierCascade* cascade, CvPoint pt, int start_stage)":[186,4,1,""],"int cvSaveImage(const char* filename, const CvArr* image, const int* params)":[152,4,1,""],"int cvSeqElemIdx(const CvSeq* seq, const void* element, CvSeqBlock** block)":[118,4,1,""],"int cvSetAdd(CvSet* set_header, CvSetElem* elem, CvSetElem** inserted_elem)":[118,4,1,""],"int cvSetCaptureProperty(CvCapture* capture, int property_id, double value)":[152,4,1,""],"int cvSliceLength(CvSlice slice, const CvSeq* seq)":[118,4,1,""],"int cvSolve(const CvArr* src1, const CvArr* src2, CvArr* dst, int method)":[123,4,1,""],"int cvSolveCubic(const CvMat* coeffs, CvMat* roots)":[123,4,1,""],"int cvStereoRectifyUncalibrated(const CvMat* points1, const CvMat* points2, const CvMat* F, CvSize img_size, CvMat* H1, CvMat* H2, double threshold)":[101,4,1,""],"int cvUseOptimized(int on_off)":[124,2,1,""],"int cvWaitKey(int delay)":[153,4,1,""],"int cvWriteFrame(CvVideoWriter* writer, const IplImage* image)":[152,4,1,""],"int dataOrder":[120,5,1,""],"int depth":[120,5,1,""],"int dims":[120,5,1,""],"int elem_size":[118,5,1,""],"int end_index":[118,5,1,""],"int estimateAffine3D(InputArray src, InputArray dst, OutputArray out, OutputArray inliers, double ransacThreshold , double confidence)":[101,2,1,""],"int extended":[184,5,1,""],"int flags":[118,5,1,""],"int flann::Index_&lt;T&gt;::radiusSearch(const Mat&amp; query, Mat&amp; indices, Mat&amp; dists, float radius, const SearchParams&amp; params)":[136,2,1,"int flann::Index_<T>::radiusSearch(const Mat& query, Mat& indices, Mat& dists, float radius, const SearchParams& params)"],"int flann::Index_&lt;T&gt;::radiusSearch(const vector&lt;T&gt;&amp; query, vector&lt;int&gt;&amp; indices, vector&lt;float&gt;&amp; dists, float radius, const SearchParams&amp; params)":[136,2,1,"int flann::Index_<T>::radiusSearch(const vector<T>& query, vector<int>& indices, vector<float>& dists, float radius, const SearchParams& params)"],"int floodFill(InputOutputArray image, InputOutputArray mask, Point seedPoint, Scalar newVal, Rect* rect, Scalar loDiff, Scalar upDiff, int flags)":[159,2,1,""],"int floodFill(InputOutputArray image, Point seedPoint, Scalar newVal, Rect* rect, Scalar loDiff, Scalar upDiff, int flags)":[159,2,1,""],"int free_space":[118,5,1,""],"int getKernelType(InputArray kernel, Point anchor)":[155,2,1,""],"int getNumThreads()":[124,2,1,""],"int getNumberOfCPUs()":[124,2,1,""],"int getOptimalDFTSize(int vecsize)":[123,2,1,""],"int getThreadNum()":[124,2,1,""],"int getTrackbarPos(const string&amp; trackbarname, const string&amp; winname)":[153,2,1,"int getTrackbarPos(const string& trackbarname, const string& winname)"],"int gpu::CascadeClassifier_GPU::detectMultiScale(const GpuMat&amp; image, GpuMat&amp; objectsBuf, Size maxObjectSize, Size minSize , double scaleFactor , int minNeighbors)":[146,2,1,"int gpu::CascadeClassifier_GPU::detectMultiScale(const GpuMat& image, GpuMat& objectsBuf, Size maxObjectSize, Size minSize , double scaleFactor , int minNeighbors)"],"int gpu::CascadeClassifier_GPU::detectMultiScale(const GpuMat&amp; image, GpuMat&amp; objectsBuf, double scaleFactor, int minNeighbors, Size minSize)":[146,2,1,"int gpu::CascadeClassifier_GPU::detectMultiScale(const GpuMat& image, GpuMat& objectsBuf, double scaleFactor, int minNeighbors, Size minSize)"],"int gpu::DeviceInfo::deviceID()":[143,2,1,""],"int gpu::DeviceInfo::majorVersion()":[143,2,1,""],"int gpu::DeviceInfo::minorVersion()":[143,2,1,""],"int gpu::DeviceInfo::multiProcessorCount()":[143,2,1,""],"int gpu::FAST_GPU::calcKeyPointsLocation(const GpuMat&amp; image, const GpuMat&amp; mask)":[139,2,1,"int gpu::FAST_GPU::calcKeyPointsLocation(const GpuMat& image, const GpuMat& mask)"],"int gpu::FAST_GPU::getKeyPoints(GpuMat&amp; keypoints)":[139,2,1,"int gpu::FAST_GPU::getKeyPoints(GpuMat& keypoints)"],"int gpu::FGDStatModel::update(const cv::gpu::GpuMat&amp; curFrame)":[149,2,1,"int gpu::FGDStatModel::update(const cv::gpu::GpuMat& curFrame)"],"int gpu::countNonZero(const GpuMat&amp; src)":[145,2,1,"int gpu::countNonZero(const GpuMat& src)"],"int gpu::countNonZero(const GpuMat&amp; src, GpuMat&amp; buf)":[145,2,1,"int gpu::countNonZero(const GpuMat& src, GpuMat& buf)"],"int gpu::getCudaEnabledDeviceCount()":[143,2,1,""],"int gpu::getDevice()":[143,2,1,""],"int hashsize":[120,5,1,""],"int header_size":[118,5,1,""],"int height":[120,5,1,""],"int imageSize":[120,5,1,""],"int inversed":[172,5,1,""],"int iterations":[219,5,1,""],"int maxFeatures":[149,5,1,""],"int max_iter":[120,5,1,""],"int meanShift(InputArray probImage, Rect&amp; window, TermCriteria criteria)":[219,2,1,"int meanShift(InputArray probImage, Rect& window, TermCriteria criteria)"],"int nChannels":[120,5,1,""],"int nOctaveLayers":[184,5,1,""],"int nOctaves":[184,5,1,""],"int nSize":[120,5,1,""],"int nmixtures":[219,5,1,""],"int nscales":[219,5,1,""],"int numFeatures":[187,5,1,""],"int numInitializationFrames":[149,5,1,""],"int num_components":[187,5,1,""],"int num_filters":[187,5,1,""],"int ocl::countNonZero(const oclMat &amp;src)":[195,2,1,"int ocl::countNonZero(const oclMat &src)"],"int ocl::getOpenCLDevices(DevicesInfo&amp; devices, int deviceType , const PlatformInfo* platform)":[200,2,1,"int ocl::getOpenCLDevices(DevicesInfo& devices, int deviceType , const PlatformInfo* platform)"],"int ocl::getOpenCLPlatforms(PlatformsInfo&amp; platforms)":[200,2,1,"int ocl::getOpenCLPlatforms(PlatformsInfo& platforms)"],"int octave":[128,5,1,""],"int ogl::Arrays::size() const":[122,2,1,""],"int ord::split_point":[172,5,1,""],"int origin":[120,5,1,""],"int quantizationLevels":[149,5,1,""],"int rows":[120,5,1,""],"int sample_count":[172,5,1,""],"int sizeX":[187,5,1,""],"int sizeY":[187,5,1,""],"int solveCubic(InputArray coeffs, OutputArray roots)":[123,2,1,""],"int split_criteria":[171,5,1,""],"int start_index":[118,5,1,""],"int step":[120,5,1,""],"int tag":[121,5,1,""],"int total":[118,5,1,""],"int type":[120,5,1,""],"int upright":[184,5,1,""],"int var_idx":[172,5,1,""],"int waitKey(int delay)":[153,2,1,""],"int warps":[219,5,1,""],"int width":[120,5,1,""],"int widthStep":[120,5,1,""],"int* num_part_filters":[187,5,1,""],"int* refcount":[120,5,1,""],"int64 getCPUTickCount()":[124,2,1,""],"int64 getTickCount()":[124,2,1,""],"int[] BorderConst":[120,5,1,""],"int[] BorderMode":[120,5,1,""],"int[] size":[120,5,1,""],"int[] subset":[172,5,1,""],"ocl::BackgroundSubtractor":[201,1,1,""],"ocl::BaseColumnFilter_GPU":[192,1,1,""],"ocl::BaseFilter_GPU":[192,1,1,""],"ocl::BaseRowFilter_GPU":[192,1,1,""],"ocl::BruteForceMatcher_OCL_base":[191,1,1,""],"ocl::FarnebackOpticalFlow":[201,1,1,""],"ocl::FilterEngine_GPU":[192,1,1,""],"ocl::GoodFeaturesToTrackDetector_OCL":[201,1,1,""],"ocl::GoodFeaturesToTrackDetector_OCL::GoodFeaturesToTrackDetector_OCL(int maxCorners , double qualityLevel , double minDistance , int blockSize , bool useHarrisDetector , double harrisK)":[201,2,1,""],"ocl::HOGDescriptor":[191,3,1,""],"ocl::HOGDescriptor::HOGDescriptor(Size win_size, Size block_size, Size block_stride, Size cell_size, int nbins, double win_sigma, double threshold_L2hys, bool gamma_correction, int nlevels)":[191,2,1,""],"ocl::KNearestNeighbour : public ocl::CvKNearest":[196,1,1,""],"ocl::KalmanFilter":[201,1,1,""],"ocl::KalmanFilter::KalmanFilter()":[201,2,1,""],"ocl::KalmanFilter::KalmanFilter(int dynamParams, int measureParams, int controlParams, int type)":[201,2,1,""],"ocl::MOG : public ocl::BackgroundSubtractor":[201,1,1,""],"ocl::MOG2 : public ocl::BackgroundSubtractor":[201,1,1,""],"ocl::MOG2::MOG2(int nmixtures)":[201,2,1,""],"ocl::MOG::MOG(int nmixtures)":[201,2,1,""],"ocl::MatchTemplateBuf":[197,3,1,""],"ocl::OclCascadeClassifier : public CascadeClassifier":[197,1,1,""],"ocl::PyrLKOpticalFlow":[201,1,1,""],"ocl::SURF_OCL : public Feature2D":[184,1,1,""],"ocl::StereoBM_OCL":[189,1,1,""],"ocl::StereoBM_OCL::StereoBM_OCL()":[189,2,1,""],"ocl::StereoBM_OCL::StereoBM_OCL(int preset, int ndisparities , int winSize)":[189,2,1,""],"ocl::StereoBeliefPropagation":[189,1,1,""],"ocl::StereoBeliefPropagation::StereoBeliefPropagation(int ndisp , int iters , int levels , int msg_type)":[189,2,1,""],"ocl::StereoBeliefPropagation::StereoBeliefPropagation(int ndisp, int iters, int levels, float max_data_term, float data_weight, float max_disc_term, float disc_single_jump, int msg_type)":[189,2,1,""],"ocl::StereoConstantSpaceBP":[189,1,1,""],"ocl::StereoConstantSpaceBP::StereoConstantSpaceBP(int ndisp , int iters , int levels , int nr_plane , int msg_type)":[189,2,1,""],"ocl::StereoConstantSpaceBP::StereoConstantSpaceBP(int ndisp, int iters, int levels, int nr_plane, float max_data_term, float data_weight, float max_disc_term, float disc_single_jump, int min_disp_th , int msg_type)":[189,2,1,""],"ocl::oclMat":[190,1,1,""],"oclMat&amp; ocl::oclMat::setTo(const Scalar &amp;s, const oclMat &amp;mask)":[199,2,1,"oclMat& ocl::oclMat::setTo(const Scalar &s, const oclMat &mask)"],"of2::BOWMSCTrainer : public of2::BOWTrainer":[111,1,1,""],"of2::BOWMSCTrainer::BOWMSCTrainer(double clusterSize)":[111,2,1,""],"of2::ChowLiuTree":[111,1,1,""],"of2::ChowLiuTree::ChowLiuTree()":[111,2,1,""],"of2::FabMap":[111,1,1,""],"of2::IMatch":[111,3,1,""],"ogl::Arrays":[122,1,1,""],"ogl::Buffer":[122,1,1,""],"ogl::Buffer::Buffer()":[122,2,1,""],"ogl::Buffer::Buffer(InputArray arr, Target target , bool autoRelease)":[122,2,1,""],"ogl::Buffer::Buffer(Size asize, int atype, Target target , bool autoRelease)":[122,2,1,""],"ogl::Buffer::Buffer(Size asize, int atype, unsigned int abufId, bool autoRelease)":[122,2,1,""],"ogl::Buffer::Buffer(int arows, int acols, int atype, Target target , bool autoRelease)":[122,2,1,""],"ogl::Buffer::Buffer(int arows, int acols, int atype, unsigned int abufId, bool autoRelease)":[122,2,1,""],"ogl::Buffer::Target":[122,8,1,""],"ogl::Texture2D":[122,1,1,""],"ogl::Texture2D::Format":[122,8,1,""],"ogl::Texture2D::Texture2D()":[122,2,1,""],"ogl::Texture2D::Texture2D(InputArray arr, bool autoRelease)":[122,2,1,""],"ogl::Texture2D::Texture2D(Size asize, Format aformat, bool autoRelease)":[122,2,1,""],"ogl::Texture2D::Texture2D(Size asize, Format aformat, unsigned int atexId, bool autoRelease)":[122,2,1,""],"ogl::Texture2D::Texture2D(int arows, int acols, Format aformat, bool autoRelease)":[122,2,1,""],"ogl::Texture2D::Texture2D(int arows, int acols, Format aformat, unsigned int atexId, bool autoRelease)":[122,2,1,""],"schar* cvGetSeqElem(const CvSeq* seq, int index)":[118,4,1,""],"schar* cvSeqInsert(CvSeq* seq, int before_index, const void* element)":[118,4,1,""],"schar* cvSeqPush(CvSeq* seq, const void* element)":[118,4,1,""],"schar* cvSeqPushFront(CvSeq* seq, const void* element)":[118,4,1,""],"schar* cvSeqSearch(CvSeq* seq, const void* elem, CvCmpFunc func, int is_sorted, int* elem_idx, void* userdata)":[118,4,1,""],"size_t FileNode::size() const":[125,2,1,""],"size_t LatentSvmDetector::getClassCount() const":[187,2,1,""],"size_t Mat::elemSize() const":[114,2,1,""],"size_t Mat::elemSize1() const":[114,2,1,""],"size_t Mat::step1(int i) const":[114,2,1,""],"size_t Mat::total() const":[114,2,1,""],"size_t SparseMat::elemSize() const":[114,2,1,""],"size_t SparseMat::hash(const int* idx) const":[114,2,1,""],"size_t SparseMat::hash(int i0) const":[114,2,1,""],"size_t SparseMat::hash(int i0, int i1) const":[114,2,1,""],"size_t SparseMat::hash(int i0, int i1, int i2) const":[114,2,1,""],"size_t SparseMat::nzcount() const":[114,2,1,""],"size_t alignSize(size_t sz, int n)":[124,2,1,""],"size_t gpu::DeviceInfo::freeMemory()":[143,2,1,""],"size_t gpu::DeviceInfo::totalMemory()":[143,2,1,""],"size_t gpu::HOGDescriptor::getBlockHistogramSize() const":[146,2,1,""],"size_t gpu::HOGDescriptor::getDescriptorSize() const":[146,2,1,""],"size_t ocl::HOGDescriptor::getBlockHistogramSize() const":[191,2,1,""],"size_t ocl::HOGDescriptor::getDescriptorSize() const":[191,2,1,""],"static Camera KinectCamera(const Size &amp;window_size)":[222,2,1,"static Camera KinectCamera(const Size &window_size)"],"static Mat Mat::diag(const Mat&amp; d)":[114,2,1,"static Mat Mat::diag(const Mat& d)"],"static MatExpr Mat::eye(Size size, int type)":[114,2,1,""],"static MatExpr Mat::eye(int rows, int cols, int type)":[114,2,1,""],"static MatExpr Mat::ones(Size size, int type)":[114,2,1,""],"static MatExpr Mat::ones(int ndims, const int* sz, int type)":[114,2,1,""],"static MatExpr Mat::ones(int rows, int cols, int type)":[114,2,1,""],"static MatExpr Mat::zeros(Size size, int type)":[114,2,1,""],"static MatExpr Mat::zeros(int ndims, const int* sz, int type)":[114,2,1,""],"static MatExpr Mat::zeros(int rows, int cols, int type)":[114,2,1,""],"static Mesh load(const String&amp; file)":[222,2,1,"static Mesh load(const String& file)"],"static Widget fromPlyFile(const String &amp;file_name)":[223,2,1,"static Widget fromPlyFile(const String &file_name)"],"static bool gpu::CudaMem::canMapHostMemory()":[138,2,1,""],"static bool gpu::TargetArchs::builtWith(FeatureSet feature_set)":[143,2,1,""],"static bool gpu::TargetArchs::has(int major, int minor)":[143,2,1,""],"static bool gpu::TargetArchs::hasBin(int major, int minor)":[143,2,1,""],"static bool gpu::TargetArchs::hasEqualOrGreater(int major, int minor)":[143,2,1,""],"static bool gpu::TargetArchs::hasEqualOrGreaterBin(int major, int minor)":[143,2,1,""],"static bool gpu::TargetArchs::hasEqualOrGreaterPtx(int major, int minor)":[143,2,1,""],"static bool gpu::TargetArchs::hasEqualOrLessPtx(int major, int minor)":[143,2,1,""],"static bool gpu::TargetArchs::hasPtx(int major, int minor)":[143,2,1,""],"static int RTreeClassifier::countNonZeroElements(float *vec, int n, double tol)":[166,2,1,""],"static string FileStorage::getDefaultObjectName(const string&amp; filename)":[125,2,1,"static string FileStorage::getDefaultObjectName(const string& filename)"],"static vector&lt;float&gt; gpu::HOGDescriptor::getDefaultPeopleDetector()":[146,2,1,"static vector<float> gpu::HOGDescriptor::getDefaultPeopleDetector()"],"static vector&lt;float&gt; gpu::HOGDescriptor::getPeopleDetector48x96()":[146,2,1,"static vector<float> gpu::HOGDescriptor::getPeopleDetector48x96()"],"static vector&lt;float&gt; gpu::HOGDescriptor::getPeopleDetector64x128()":[146,2,1,"static vector<float> gpu::HOGDescriptor::getPeopleDetector64x128()"],"static vector&lt;float&gt; ocl::HOGDescriptor::getDefaultPeopleDetector()":[191,2,1,"static vector<float> ocl::HOGDescriptor::getDefaultPeopleDetector()"],"static vector&lt;float&gt; ocl::HOGDescriptor::getPeopleDetector48x96()":[191,2,1,"static vector<float> ocl::HOGDescriptor::getPeopleDetector48x96()"],"static vector&lt;float&gt; ocl::HOGDescriptor::getPeopleDetector64x128()":[191,2,1,"static vector<float> ocl::HOGDescriptor::getPeopleDetector64x128()"],"static void SVD::backSubst(InputArray w, InputArray u, InputArray vt, InputArray rhs, OutputArray dst)":[123,2,1,""],"static void SVD::compute(InputArray src, OutputArray w, OutputArray u, OutputArray vt, int flags)":[123,2,1,""],"static void SVD::compute(InputArray src, OutputArray w, int flags)":[123,2,1,""],"static void SVD::solveZ(InputArray src, OutputArray dst)":[123,2,1,""],"static void gpu::BruteForceMatcher_GPU_base::matchDownload(const GpuMat&amp; trainIdx, const GpuMat&amp; distance, std::vector&lt;DMatch&gt;&amp;matches)":[139,2,1,"static void gpu::BruteForceMatcher_GPU_base::matchDownload(const GpuMat& trainIdx, const GpuMat& distance, std::vector<DMatch>&matches)"],"static void gpu::BruteForceMatcher_GPU_base::matchDownload(const GpuMat&amp; trainIdx, const GpuMat&amp; imgIdx, const GpuMat&amp; distance, std::vector&lt;DMatch&gt;&amp; matches)":[139,2,1,"static void gpu::BruteForceMatcher_GPU_base::matchDownload(const GpuMat& trainIdx, const GpuMat& imgIdx, const GpuMat& distance, std::vector<DMatch>& matches)"],"static void ocl::BruteForceMatcher_OCL_base::matchDownload(const oclMat&amp; trainIdx, const oclMat&amp; distance, std::vector&lt;DMatch&gt;&amp; matches)":[191,2,1,"static void ocl::BruteForceMatcher_OCL_base::matchDownload(const oclMat& trainIdx, const oclMat& distance, std::vector<DMatch>& matches)"],"static void ocl::BruteForceMatcher_OCL_base::matchDownload(const oclMat&amp; trainIdx, const oclMat&amp; imgIdx, const oclMat&amp; distance, std::vector&lt;DMatch&gt;&amp; matches)":[191,2,1,"static void ocl::BruteForceMatcher_OCL_base::matchDownload(const oclMat& trainIdx, const oclMat& imgIdx, const oclMat& distance, std::vector<DMatch>& matches)"],"static void ogl::Buffer::unbind(Target target)":[122,2,1,""],"static void setProp(Widget &amp;widget, vtkSmartPointer&lt;vtkProp&gt; prop)":[223,2,1,"static void setProp(Widget &widget, vtkSmartPointer<vtkProp> prop)"],"static vtkSmartPointer&lt;vtkProp&gt; getProp(const Widget &amp;widget)":[223,2,1,"static vtkSmartPointer<vtkProp> getProp(const Widget &widget)"],"string Algorithm::name() const":[114,2,1,""],"string FileNode::name() const":[125,2,1,""],"string FileStorage::releaseAndGetString()":[125,2,1,""],"string gpu::DeviceInfo::name() const":[143,2,1,""],"superres::SuperResolution : public Algorithm, public superres::FrameSource":[217,1,1,""],"template&lt;typename Distance&gt; int flann::hierarchicalClustering(const Mat&amp; features, Mat&amp; centers, const cvflann::KMeansIndexParams&amp; params, Distance d)":[135,2,1,"template<typename Distance> int flann::hierarchicalClustering(const Mat& features, Mat& centers, const cvflann::KMeansIndexParams& params, Distance d)"],"template&lt;typename T&gt; T&amp; Mat::at(Point pt)":[114,2,1,"template<typename T> T& Mat::at(Point pt)"],"template&lt;typename T&gt; T&amp; Mat::at(const int* idx)":[114,2,1,"template<typename T> T& Mat::at(const int* idx)"],"template&lt;typename T&gt; T&amp; Mat::at(int i) const":[114,2,1,"template<typename T> T& Mat::at(int i) const"],"template&lt;typename T&gt; T&amp; Mat::at(int i, int j)":[114,2,1,"template<typename T> T& Mat::at(int i, int j)"],"template&lt;typename T&gt; T&amp; Mat::at(int i, int j, int k)":[114,2,1,"template<typename T> T& Mat::at(int i, int j, int k)"],"template&lt;typename T&gt; const T&amp; Mat::at(Point pt) const":[114,2,1,"template<typename T> const T& Mat::at(Point pt) const"],"template&lt;typename T&gt; const T&amp; Mat::at(const int* idx) const":[114,2,1,"template<typename T> const T& Mat::at(const int* idx) const"],"template&lt;typename T&gt; const T&amp; Mat::at(int i) const":[114,2,1,"template<typename T> const T& Mat::at(int i) const"],"template&lt;typename T&gt; const T&amp; Mat::at(int i, int j) const":[114,2,1,"template<typename T> const T& Mat::at(int i, int j) const"],"template&lt;typename T&gt; const T&amp; Mat::at(int i, int j, int k) const":[114,2,1,"template<typename T> const T& Mat::at(int i, int j, int k) const"],"template&lt;typename T&gt; explicit Mat::Mat(const vector&lt;T&gt;&amp; vec, bool copyData)":[114,2,1,"template<typename T> explicit Mat::Mat(const vector<T>& vec, bool copyData)"],"template&lt;typename T&gt; void Mat::pop_back(size_t nelems)":[114,2,1,"template<typename T> void Mat::pop_back(size_t nelems)"],"template&lt;typename T&gt; void Mat::push_back(const T&amp; elem)":[114,2,1,"template<typename T> void Mat::push_back(const T& elem)"],"template&lt;typename T, int m, int n&gt; explicit Mat::Mat(const Matx&lt;T, m, n&gt;&amp; vec, bool copyData)":[114,2,1,"template<typename T, int m, int n> explicit Mat::Mat(const Matx<T, m, n>& vec, bool copyData)"],"template&lt;typename T, int n&gt; explicit Mat::Mat(const Vec&lt;T, n&gt;&amp; vec, bool copyData)":[114,2,1,"template<typename T, int n> explicit Mat::Mat(const Vec<T, n>& vec, bool copyData)"],"template&lt;typename _Tp&gt; FileNodeIterator&amp; operator &gt;&gt; (FileNodeIterator&amp; it, _Tp&amp; value)":[125,2,1,"template<typename _Tp> FileNodeIterator& operator >> (FileNodeIterator& it, _Tp& value)"],"template&lt;typename _Tp&gt; FileNodeIterator&amp; operator &gt;&gt; (FileNodeIterator&amp; it, vector&lt;_Tp&gt;&amp; vec)":[125,2,1,"template<typename _Tp> FileNodeIterator& operator >> (FileNodeIterator& it, vector<_Tp>& vec)"],"template&lt;typename _Tp&gt; FileStorage&amp; operator &lt;&lt; (FileStorage&amp; fs, const _Tp&amp; value)":[125,2,1,"template<typename _Tp> FileStorage& operator << (FileStorage& fs, const _Tp& value)"],"template&lt;typename _Tp&gt; FileStorage&amp; operator &lt;&lt; (FileStorage&amp; fs, const vector&lt;_Tp&gt;&amp; vec)":[125,2,1,"template<typename _Tp> FileStorage& operator << (FileStorage& fs, const vector<_Tp>& vec)"],"template&lt;typename _Tp&gt; MatConstIterator_&lt;_Tp&gt; Mat::begin() const":[114,2,1,"template<typename _Tp> MatConstIterator_<_Tp> Mat::begin() const"],"template&lt;typename _Tp&gt; MatConstIterator_&lt;_Tp&gt; Mat::end() const":[114,2,1,"template<typename _Tp> MatConstIterator_<_Tp> Mat::end() const"],"template&lt;typename _Tp&gt; MatIterator_&lt;_Tp&gt; Mat::begin()":[114,2,1,"template<typename _Tp> MatIterator_<_Tp> Mat::begin()"],"template&lt;typename _Tp&gt; MatIterator_&lt;_Tp&gt; Mat::end()":[114,2,1,"template<typename _Tp> MatIterator_<_Tp> Mat::end()"],"template&lt;typename _Tp&gt; Ptr&lt;_Tp&gt; Algorithm::create(const string&amp; name)":[114,2,1,"template<typename _Tp> Ptr<_Tp> Algorithm::create(const string& name)"],"template&lt;typename _Tp&gt; Ptr::operator _Tp* ()":[114,2,1,"template<typename _Tp> Ptr::operator _Tp* ()"],"template&lt;typename _Tp&gt; Ptr::operator const _Tp*() const":[114,2,1,"template<typename _Tp> Ptr::operator const _Tp*() const"],"template&lt;typename _Tp&gt; _Tp randu()":[123,2,1,"template<typename _Tp> _Tp randu()"],"template&lt;typename _Tp&gt; _Tp* Mat::ptr(int i0)":[114,2,1,"template<typename _Tp> _Tp* Mat::ptr(int i0)"],"template&lt;typename _Tp&gt; _Tp* Ptr::operator -&gt; ()":[114,2,1,"template<typename _Tp> _Tp* Ptr::operator -> ()"],"template&lt;typename _Tp&gt; _Tp* alignPtr(_Tp* ptr, int n)":[124,2,1,"template<typename _Tp> _Tp* alignPtr(_Tp* ptr, int n)"],"template&lt;typename _Tp&gt; _Tp* allocate(size_t n)":[124,2,1,"template<typename _Tp> _Tp* allocate(size_t n)"],"template&lt;typename _Tp&gt; const _Tp* Mat::ptr(int i0) const":[114,2,1,"template<typename _Tp> const _Tp* Mat::ptr(int i0) const"],"template&lt;typename _Tp&gt; const _Tp* Ptr::operator -&gt; () const":[114,2,1,"template<typename _Tp> const _Tp* Ptr::operator -> () const"],"template&lt;typename _Tp&gt; typename ParamType&lt;_Tp&gt;::member_type Algorithm::get(const string&amp; name) const":[114,2,1,"template<typename _Tp> typename ParamType<_Tp>::member_type Algorithm::get(const string& name) const"],"template&lt;typename _Tp&gt; void deallocate(_Tp* ptr, size_t n)":[124,2,1,"template<typename _Tp> void deallocate(_Tp* ptr, size_t n)"],"template&lt;typename _Tp&gt; void operator &gt;&gt; (const FileNode&amp; n, _Tp&amp; value)":[125,2,1,"template<typename _Tp> void operator >> (const FileNode& n, _Tp& value)"],"template&lt;typename _Tp&gt; void operator &gt;&gt; (const FileNode&amp; n, vector&lt;_Tp&gt;&amp; vec)":[125,2,1,"template<typename _Tp> void operator >> (const FileNode& n, vector<_Tp>& vec)"],"template&lt;typename _Tp, class _EqPredicate&gt; int partition(const vector&lt;_Tp&gt;&amp; vec, vector&lt;int&gt;&amp; labels, _EqPredicate predicate)":[115,2,1,"template<typename _Tp, class _EqPredicate> int partition(const vector<_Tp>& vec, vector<int>& labels, _EqPredicate predicate)"],"template&lt;typename _W&gt; _W cast()":[223,2,1,"template<typename _W> _W cast()"],"uchar nShadowDetection":[149,5,1,""],"uchar* Mat::ptr(int i0)":[114,2,1,""],"uchar* SparseMat::ptr(const int* idx, bool createMissing, size_t* hashval)":[114,2,1,""],"uchar* SparseMat::ptr(int i0, bool createMissing, size_t* hashval)":[114,2,1,""],"uchar* SparseMat::ptr(int i0, int i1, bool createMissing, size_t* hashval)":[114,2,1,""],"uchar* SparseMat::ptr(int i0, int i1, int i2, bool createMissing, size_t* hashval)":[114,2,1,""],"uchar* cvPtr1D(const CvArr* arr, int idx0, int* type)":[120,4,1,""],"uchar* cvPtr2D(const CvArr* arr, int idx0, int idx1, int* type)":[120,4,1,""],"uchar* cvPtr3D(const CvArr* arr, int idx0, int idx1, int idx2, int* type)":[120,4,1,""],"uchar* cvPtrND(const CvArr* arr, const int* idx, int* type, int create_node, unsigned* precalc_hashval)":[120,4,1,""],"union data":[120,5,1,""],"unsigned RNG::next()":[123,2,1,""],"unsigned RNG::operator ()()":[123,2,1,""],"unsigned RNG::operator ()(unsigned N)":[123,2,1,""],"unsigned cvRandInt(CvRNG* rng)":[120,4,1,""],"unsigned int l":[187,5,1,""],"unsigned int x":[187,5,1,""],"unsigned int y":[187,5,1,""],"vector&lt;int&gt; FREAK::selectPairs(const vector&lt;Mat&gt;&amp; images, vector&lt;vector&lt;KeyPoint&gt; &gt;&amp; keypoints, const double corrThresh , bool verbose)":[131,2,1,"vector<int> FREAK::selectPairs(const vector<Mat>& images, vector<vector<KeyPoint> >& keypoints, const double corrThresh , bool verbose)"],"vector&lt;int&gt; FaceRecognizer::getLabelsByString(const string&amp; str)":[104,2,1,"vector<int> FaceRecognizer::getLabelsByString(const string& str)"],"virtual FormatInfo gpu::VideoReader_GPU::VideoSource::format() const = 0":[149,2,1,""],"virtual Mat of2::BOWMSCTrainer::cluster() const":[111,2,1,""],"virtual Mat of2::BOWMSCTrainer::cluster(const Mat&amp; descriptors) const":[111,2,1,"virtual Mat of2::BOWMSCTrainer::cluster(const Mat& descriptors) const"],"virtual bool gpu::VideoReader_GPU::VideoSource::hasError() const = 0":[149,2,1,""],"virtual bool gpu::VideoReader_GPU::VideoSource::isStarted() const = 0":[149,2,1,""],"virtual uchar* gpu::VideoWriter_GPU::EncoderCallBack::acquireBitStream(int* bufferSize) = 0":[149,2,1,""],"virtual void add(const Mat&amp; queryImgDescriptor)":[111,2,1,"virtual void add(const Mat& queryImgDescriptor)"],"virtual void add(const vector&lt;Mat&gt;&amp; queryImgDescriptors)":[111,2,1,"virtual void add(const vector<Mat>& queryImgDescriptors)"],"virtual void addTraining(const Mat&amp; queryImgDescriptor)":[111,2,1,"virtual void addTraining(const Mat& queryImgDescriptor)"],"virtual void addTraining(const vector&lt;Mat&gt;&amp; queryImgDescriptors)":[111,2,1,"virtual void addTraining(const vector<Mat>& queryImgDescriptors)"],"virtual void gpu::VideoReader_GPU::VideoSource::start() = 0":[149,2,1,""],"virtual void gpu::VideoReader_GPU::VideoSource::stop() = 0":[149,2,1,""],"virtual void gpu::VideoWriter_GPU::EncoderCallBack::onBeginFrame(int frameNumber, PicType picType) = 0":[149,2,1,""],"virtual void gpu::VideoWriter_GPU::EncoderCallBack::onEndFrame(int frameNumber, PicType picType) = 0":[149,2,1,""],"virtual void gpu::VideoWriter_GPU::EncoderCallBack::releaseBitStream(unsigned char* data, int size) = 0":[149,2,1,""],"void AdjusterAdapter::tooFew(int min, int n_detected)":[128,2,1,""],"void AdjusterAdapter::tooMany(int max, int n_detected)":[128,2,1,""],"void Algorithm::getList(vector&lt;string&gt;&amp; algorithms)":[114,2,1,"void Algorithm::getList(vector<string>& algorithms)"],"void Algorithm::read(const FileNode&amp; fn)":[114,2,1,"void Algorithm::read(const FileNode& fn)"],"void Algorithm::set(const string&amp; name, bool value)":[114,2,1,"void Algorithm::set(const string& name, bool value)"],"void Algorithm::set(const string&amp; name, const Mat&amp; value)":[114,2,1,"void Algorithm::set(const string& name, const Mat& value)"],"void Algorithm::set(const string&amp; name, const Ptr&lt;Algorithm&gt;&amp; value)":[114,2,1,"void Algorithm::set(const string& name, const Ptr<Algorithm>& value)"],"void Algorithm::set(const string&amp; name, const string&amp; value)":[114,2,1,"void Algorithm::set(const string& name, const string& value)"],"void Algorithm::set(const string&amp; name, const vector&lt;Mat&gt;&amp; value)":[114,2,1,"void Algorithm::set(const string& name, const vector<Mat>& value)"],"void Algorithm::set(const string&amp; name, double value)":[114,2,1,"void Algorithm::set(const string& name, double value)"],"void Algorithm::set(const string&amp; name, int value)":[114,2,1,"void Algorithm::set(const string& name, int value)"],"void Algorithm::write(FileStorage&amp; fs) const":[114,2,1,"void Algorithm::write(FileStorage& fs) const"],"void BOWImgDescriptorExtractor::compute(const Mat&amp; image, vector&lt;KeyPoint&gt;&amp; keypoints, Mat&amp; imgDescriptor, vector&lt;vector&lt;int&gt; &gt;* pointIdxsOfClusters, Mat* descriptors)":[133,2,1,"void BOWImgDescriptorExtractor::compute(const Mat& image, vector<KeyPoint>& keypoints, Mat& imgDescriptor, vector<vector<int> >* pointIdxsOfClusters, Mat* descriptors)"],"void BOWImgDescriptorExtractor::setVocabulary(const Mat&amp; vocabulary)":[133,2,1,"void BOWImgDescriptorExtractor::setVocabulary(const Mat& vocabulary)"],"void BOWTrainer::add(const Mat&amp; descriptors)":[133,2,1,"void BOWTrainer::add(const Mat& descriptors)"],"void BRISK::operator()(InputArray image, InputArray mask, vector&lt;KeyPoint&gt;&amp; keypoints, OutputArray descriptors, bool useProvidedKeypoints) const":[131,2,1,"void BRISK::operator()(InputArray image, InputArray mask, vector<KeyPoint>& keypoints, OutputArray descriptors, bool useProvidedKeypoints) const"],"void BackgroundSubtractor::getBackgroundImage(OutputArray backgroundImage) const":[219,2,1,""],"void BackgroundSubtractor::operator()(InputArray image, OutputArray fgmask, double learningRate)":[219,2,1,""],"void BackgroundSubtractorMOG2::getBackgroundImage(OutputArray backgroundImage)":[219,2,1,""],"void BackgroundSubtractorMOG2::operator()(InputArray image, OutputArray fgmask, double learningRate)":[219,2,1,""],"void BackgroundSubtractorMOG::operator()(InputArray image, OutputArray fgmask, double learningRate)":[219,2,1,""],"void Canny(InputArray image, OutputArray edges, double threshold1, double threshold2, int apertureSize, bool L2gradient)":[154,2,1,""],"void CascadeClassifier::detectMultiScale(const Mat&amp; image, vector&lt;Rect&gt;&amp; objects, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize)":[186,2,1,"void CascadeClassifier::detectMultiScale(const Mat& image, vector<Rect>& objects, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize)"],"void CvANN_MLP::create(const CvMat* layerSizes, int activateFunc, double fparam1, double fparam2)":[179,2,1,""],"void CvANN_MLP::create(const Mat&amp; layerSizes, int activateFunc, double fparam1, double fparam2)":[179,2,1,"void CvANN_MLP::create(const Mat& layerSizes, int activateFunc, double fparam1, double fparam2)"],"void CvBoost::prune(CvSlice slice)":[171,2,1,""],"void CvEM::getCovs(std::vector&lt;cv::Mat&gt;&amp; covs) const":[165,2,1,"void CvEM::getCovs(std::vector<cv::Mat>& covs) const"],"void CvEM::read(CvFileStorage* fs, CvFileNode* node)":[165,2,1,""],"void CvEM::write(CvFileStorage* fs, const char* name) const":[165,2,1,""],"void CvGBTrees::clear()":[175,2,1,""],"void CvMLData::change_var_idx(int vi, bool state)":[178,2,1,""],"void CvMLData::change_var_type(int var_idx, int type)":[178,2,1,""],"void CvMLData::mix_train_and_test_idx()":[178,2,1,""],"void CvMLData::set_delimiter(char ch)":[178,2,1,""],"void CvMLData::set_miss_ch(char ch)":[178,2,1,""],"void CvMLData::set_response_idx(int idx)":[178,2,1,""],"void CvMLData::set_train_test_split(const CvTrainTestSplit * spl)":[178,2,1,""],"void CvMLData::set_var_types(const char* str)":[178,2,1,""],"void CvStatModel::clear()":[182,2,1,""],"void CvStatModel::load(const char* filename, const char* name)":[182,2,1,""],"void CvStatModel::read(CvFileStorage* storage, CvFileNode* node)":[182,2,1,""],"void CvStatModel::save(const char* filename, const char* name)":[182,2,1,""],"void CvStatModel::write(CvFileStorage* storage, const char* name)":[182,2,1,""],"void DenseOpticalFlow::calc(InputArray I0, InputArray I1, InputOutputArray flow)":[219,2,1,""],"void DenseOpticalFlow::collectGarbage()":[219,2,1,""],"void DescriptorExtractor::compute(const Mat&amp; image, vector&lt;KeyPoint&gt;&amp; keypoints, Mat&amp; descriptors) const":[126,2,1,"void DescriptorExtractor::compute(const Mat& image, vector<KeyPoint>& keypoints, Mat& descriptors) const"],"void DescriptorExtractor::compute(const vector&lt;Mat&gt;&amp; images, vector&lt;vector&lt;KeyPoint&gt; &gt;&amp; keypoints, vector&lt;Mat&gt;&amp; descriptors) const":[126,2,1,"void DescriptorExtractor::compute(const vector<Mat>& images, vector<vector<KeyPoint> >& keypoints, vector<Mat>& descriptors) const"],"void DescriptorMatcher::add(const vector&lt;Mat&gt;&amp; descriptors)":[127,2,1,"void DescriptorMatcher::add(const vector<Mat>& descriptors)"],"void DescriptorMatcher::clear()":[127,2,1,""],"void DescriptorMatcher::knnMatch(const Mat&amp; queryDescriptors, const Mat&amp; trainDescriptors, vector&lt;vector&lt;DMatch&gt; &gt;&amp; matches, int k, const Mat&amp; mask, bool compactResult) const":[127,2,1,"void DescriptorMatcher::knnMatch(const Mat& queryDescriptors, const Mat& trainDescriptors, vector<vector<DMatch> >& matches, int k, const Mat& mask, bool compactResult) const"],"void DescriptorMatcher::knnMatch(const Mat&amp; queryDescriptors, vector&lt;vector&lt;DMatch&gt; &gt;&amp; matches, int k, const vector&lt;Mat&gt;&amp; masks, bool compactResult)":[127,2,1,"void DescriptorMatcher::knnMatch(const Mat& queryDescriptors, vector<vector<DMatch> >& matches, int k, const vector<Mat>& masks, bool compactResult)"],"void DescriptorMatcher::match(const Mat&amp; queryDescriptors, const Mat&amp; trainDescriptors, vector&lt;DMatch&gt;&amp; matches, const Mat&amp; mask) const":[127,2,1,"void DescriptorMatcher::match(const Mat& queryDescriptors, const Mat& trainDescriptors, vector<DMatch>& matches, const Mat& mask) const"],"void DescriptorMatcher::match(const Mat&amp; queryDescriptors, vector&lt;DMatch&gt;&amp; matches, const vector&lt;Mat&gt;&amp; masks)":[127,2,1,"void DescriptorMatcher::match(const Mat& queryDescriptors, vector<DMatch>& matches, const vector<Mat>& masks)"],"void DescriptorMatcher::radiusMatch(const Mat&amp; queryDescriptors, const Mat&amp; trainDescriptors, vector&lt;vector&lt;DMatch&gt; &gt;&amp; matches, float maxDistance, const Mat&amp; mask, bool compactResult) const":[127,2,1,"void DescriptorMatcher::radiusMatch(const Mat& queryDescriptors, const Mat& trainDescriptors, vector<vector<DMatch> >& matches, float maxDistance, const Mat& mask, bool compactResult) const"],"void DescriptorMatcher::radiusMatch(const Mat&amp; queryDescriptors, vector&lt;vector&lt;DMatch&gt; &gt;&amp; matches, float maxDistance, const vector&lt;Mat&gt;&amp; masks, bool compactResult)":[127,2,1,"void DescriptorMatcher::radiusMatch(const Mat& queryDescriptors, vector<vector<DMatch> >& matches, float maxDistance, const vector<Mat>& masks, bool compactResult)"],"void DescriptorMatcher::train()":[127,2,1,""],"void FAST(InputArray image, vector&lt;KeyPoint&gt;&amp; keypoints, int threshold, bool nonmaxSuppression)":[131,2,1,"void FAST(InputArray image, vector<KeyPoint>& keypoints, int threshold, bool nonmaxSuppression)"],"void FASTX(InputArray image, vector&lt;KeyPoint&gt;&amp; keypoints, int threshold, bool nonmaxSuppression, int type)":[131,2,1,"void FASTX(InputArray image, vector<KeyPoint>& keypoints, int threshold, bool nonmaxSuppression, int type)"],"void FaceRecognizer::load(const FileStorage&amp; fs) = 0":[104,2,1,"void FaceRecognizer::load(const FileStorage& fs) = 0"],"void FaceRecognizer::load(const string&amp; filename)":[104,2,1,"void FaceRecognizer::load(const string& filename)"],"void FaceRecognizer::predict(InputArray src, int &amp; label, double &amp; confidence) const = 0":[104,2,1,"void FaceRecognizer::predict(InputArray src, int & label, double & confidence) const = 0"],"void FaceRecognizer::save(FileStorage&amp; fs) const":[104,2,1,"void FaceRecognizer::save(FileStorage& fs) const"],"void FaceRecognizer::save(const string&amp; filename) const":[104,2,1,"void FaceRecognizer::save(const string& filename) const"],"void FaceRecognizer::train(InputArrayOfArrays src, InputArray labels) = 0":[104,2,1,""],"void FaceRecognizer::update(InputArrayOfArrays src, InputArray labels)":[104,2,1,""],"void FeatureDetector::detect(const Mat&amp; image, vector&lt;KeyPoint&gt;&amp; keypoints, const Mat&amp; mask) const":[128,2,1,"void FeatureDetector::detect(const Mat& image, vector<KeyPoint>& keypoints, const Mat& mask) const"],"void FeatureDetector::detect(const vector&lt;Mat&gt;&amp; images, vector&lt;vector&lt;KeyPoint&gt; &gt;&amp; keypoints, const vector&lt;Mat&gt;&amp; masks) const":[128,2,1,"void FeatureDetector::detect(const vector<Mat>& images, vector<vector<KeyPoint> >& keypoints, const vector<Mat>& masks) const"],"void FileNode::readRaw(const string&amp; fmt, uchar* vec, size_t len) const":[125,2,1,"void FileNode::readRaw(const string& fmt, uchar* vec, size_t len) const"],"void FileStorage::release()":[125,2,1,""],"void FileStorage::writeObj(const string&amp; name, const void* obj)":[125,2,1,"void FileStorage::writeObj(const string& name, const void* obj)"],"void FileStorage::writeRaw(const string&amp; fmt, const uchar* vec, size_t len)":[125,2,1,"void FileStorage::writeRaw(const string& fmt, const uchar* vec, size_t len)"],"void GaussianBlur(InputArray src, OutputArray dst, Size ksize, double sigmaX, double sigmaY, int borderType)":[155,2,1,""],"void GenericDescriptorMatcher::add(const vector&lt;Mat&gt;&amp; images, vector&lt;vector&lt;KeyPoint&gt; &gt;&amp; keypoints)":[129,2,1,"void GenericDescriptorMatcher::add(const vector<Mat>& images, vector<vector<KeyPoint> >& keypoints)"],"void GenericDescriptorMatcher::classify(const Mat&amp; queryImage, vector&lt;KeyPoint&gt;&amp; queryKeypoints)":[129,2,1,"void GenericDescriptorMatcher::classify(const Mat& queryImage, vector<KeyPoint>& queryKeypoints)"],"void GenericDescriptorMatcher::classify(const Mat&amp; queryImage, vector&lt;KeyPoint&gt;&amp; queryKeypoints, const Mat&amp; trainImage, vector&lt;KeyPoint&gt;&amp; trainKeypoints) const":[129,2,1,"void GenericDescriptorMatcher::classify(const Mat& queryImage, vector<KeyPoint>& queryKeypoints, const Mat& trainImage, vector<KeyPoint>& trainKeypoints) const"],"void GenericDescriptorMatcher::clear()":[129,2,1,""],"void GenericDescriptorMatcher::knnMatch(const Mat&amp; queryImage, vector&lt;KeyPoint&gt;&amp; queryKeypoints, const Mat&amp; trainImage, vector&lt;KeyPoint&gt;&amp; trainKeypoints, vector&lt;vector&lt;DMatch&gt; &gt;&amp; matches, int k, const Mat&amp; mask, bool compactResult) const":[129,2,1,"void GenericDescriptorMatcher::knnMatch(const Mat& queryImage, vector<KeyPoint>& queryKeypoints, const Mat& trainImage, vector<KeyPoint>& trainKeypoints, vector<vector<DMatch> >& matches, int k, const Mat& mask, bool compactResult) const"],"void GenericDescriptorMatcher::knnMatch(const Mat&amp; queryImage, vector&lt;KeyPoint&gt;&amp; queryKeypoints, vector&lt;vector&lt;DMatch&gt; &gt;&amp; matches, int k, const vector&lt;Mat&gt;&amp; masks, bool compactResult)":[129,2,1,"void GenericDescriptorMatcher::knnMatch(const Mat& queryImage, vector<KeyPoint>& queryKeypoints, vector<vector<DMatch> >& matches, int k, const vector<Mat>& masks, bool compactResult)"],"void GenericDescriptorMatcher::match(const Mat&amp; queryImage, vector&lt;KeyPoint&gt;&amp; queryKeypoints, const Mat&amp; trainImage, vector&lt;KeyPoint&gt;&amp; trainKeypoints, vector&lt;DMatch&gt;&amp; matches, const Mat&amp; mask) const":[129,2,1,"void GenericDescriptorMatcher::match(const Mat& queryImage, vector<KeyPoint>& queryKeypoints, const Mat& trainImage, vector<KeyPoint>& trainKeypoints, vector<DMatch>& matches, const Mat& mask) const"],"void GenericDescriptorMatcher::match(const Mat&amp; queryImage, vector&lt;KeyPoint&gt;&amp; queryKeypoints, vector&lt;DMatch&gt;&amp; matches, const vector&lt;Mat&gt;&amp; masks)":[129,2,1,"void GenericDescriptorMatcher::match(const Mat& queryImage, vector<KeyPoint>& queryKeypoints, vector<DMatch>& matches, const vector<Mat>& masks)"],"void GenericDescriptorMatcher::radiusMatch(const Mat&amp; queryImage, vector&lt;KeyPoint&gt;&amp; queryKeypoints, const Mat&amp; trainImage, vector&lt;KeyPoint&gt;&amp; trainKeypoints, vector&lt;vector&lt;DMatch&gt; &gt;&amp; matches, float maxDistance, const Mat&amp; mask, bool compactResult) const":[129,2,1,"void GenericDescriptorMatcher::radiusMatch(const Mat& queryImage, vector<KeyPoint>& queryKeypoints, const Mat& trainImage, vector<KeyPoint>& trainKeypoints, vector<vector<DMatch> >& matches, float maxDistance, const Mat& mask, bool compactResult) const"],"void GenericDescriptorMatcher::radiusMatch(const Mat&amp; queryImage, vector&lt;KeyPoint&gt;&amp; queryKeypoints, vector&lt;vector&lt;DMatch&gt; &gt;&amp; matches, float maxDistance, const vector&lt;Mat&gt;&amp; masks, bool compactResult)":[129,2,1,"void GenericDescriptorMatcher::radiusMatch(const Mat& queryImage, vector<KeyPoint>& queryKeypoints, vector<vector<DMatch> >& matches, float maxDistance, const vector<Mat>& masks, bool compactResult)"],"void GenericDescriptorMatcher::read(const FileNode&amp; fn)":[129,2,1,"void GenericDescriptorMatcher::read(const FileNode& fn)"],"void GenericDescriptorMatcher::train()":[129,2,1,""],"void GenericDescriptorMatcher::write(FileStorage&amp; fs) const":[129,2,1,"void GenericDescriptorMatcher::write(FileStorage& fs) const"],"void HoughCircles(InputArray image, OutputArray circles, int method, double dp, double minDist, double param1, double param2, int minRadius, int maxRadius)":[154,2,1,""],"void HoughLines(InputArray image, OutputArray lines, double rho, double theta, int threshold, double srn, double stn)":[154,2,1,""],"void HoughLinesP(InputArray image, OutputArray lines, double rho, double theta, int threshold, double minLineLength, double maxLineGap)":[154,2,1,""],"void HuMoments(const Moments&amp; m, OutputArray hu)":[162,2,1,"void HuMoments(const Moments& m, OutputArray hu)"],"void HuMoments(const Moments&amp; moments, double hu[7])":[162,2,1,"void HuMoments(const Moments& moments, double hu[7])"],"void KalmanFilter::init(int dynamParams, int measureParams, int controlParams, int type)":[219,2,1,""],"void LUT(InputArray src, InputArray lut, OutputArray dst, int interpolation)":[123,2,1,""],"void Laplacian(InputArray src, OutputArray dst, int ddepth, int ksize, double scale, double delta, int borderType)":[155,2,1,""],"void LatentSvmDetector::clear()":[187,2,1,""],"void LatentSvmDetector::detect(const Mat&amp; image, vector&lt;ObjectDetection&gt;&amp; objectDetections, float overlapThreshold, int numThreads)":[187,2,1,"void LatentSvmDetector::detect(const Mat& image, vector<ObjectDetection>& objectDetections, float overlapThreshold, int numThreads)"],"void MSER::operator()(const Mat&amp; image, vector&lt;vector&lt;Point&gt; &gt;&amp; msers, const Mat&amp; mask) const":[131,2,1,"void MSER::operator()(const Mat& image, vector<vector<Point> >& msers, const Mat& mask) const"],"void Mat::addref()":[114,2,1,""],"void Mat::assignTo(Mat&amp; m, int type) const":[114,2,1,"void Mat::assignTo(Mat& m, int type) const"],"void Mat::convertTo(OutputArray m, int rtype, double alpha, double beta) const":[114,2,1,""],"void Mat::copyTo(OutputArray m) const":[114,2,1,""],"void Mat::copyTo(OutputArray m, InputArray mask) const":[114,2,1,""],"void Mat::create(Size size, int type)":[114,2,1,""],"void Mat::create(int ndims, const int* sizes, int type)":[114,2,1,""],"void Mat::create(int rows, int cols, int type)":[114,2,1,""],"void Mat::locateROI(Size&amp; wholeSize, Point&amp; ofs) const":[114,2,1,"void Mat::locateROI(Size& wholeSize, Point& ofs) const"],"void Mat::push_back(const Mat&amp; m)":[114,2,1,"void Mat::push_back(const Mat& m)"],"void Mat::release()":[114,2,1,""],"void Mat::reserve(size_t sz)":[114,2,1,""],"void Mat::resize(size_t sz)":[114,2,1,""],"void Mat::resize(size_t sz, const Scalar&amp; s)":[114,2,1,"void Mat::resize(size_t sz, const Scalar& s)"],"void ORB::operator()(InputArray image, InputArray mask, vector&lt;KeyPoint&gt;&amp; keypoints, OutputArray descriptors, bool useProvidedKeypoints) const":[131,2,1,"void ORB::operator()(InputArray image, InputArray mask, vector<KeyPoint>& keypoints, OutputArray descriptors, bool useProvidedKeypoints) const"],"void PCA::backProject(InputArray vec, OutputArray result) const":[123,2,1,""],"void PCA::project(InputArray vec, OutputArray result) const":[123,2,1,""],"void Ptr::addref()":[114,2,1,""],"void Ptr::delete_obj()":[114,2,1,""],"void Ptr::release()":[114,2,1,""],"void RNG::fill(InputOutputArray mat, int distType, InputArray a, InputArray b, bool saturateRange)":[123,2,1,""],"void RTreeClassifier::getSignature(IplImage *patch, float *sig)":[166,2,1,""],"void RTreeClassifier::getSignature(IplImage *patch, uchar *sig)":[166,2,1,""],"void RTreeClassifier::getSparseSignature(IplImage *patch, float *sig, float thresh)":[166,2,1,""],"void RTreeClassifier::read(const char* file_name)":[166,2,1,""],"void RTreeClassifier::read(std::istream &amp; is)":[166,2,1,"void RTreeClassifier::read(std::istream & is)"],"void RTreeClassifier::setQuantization(int num_quant_bits)":[166,2,1,""],"void RTreeClassifier::train(vector&lt;BaseKeypoint&gt; const&amp; base_set, RNG &amp; rng, PatchGenerator &amp; make_patch, int num_trees, int depth, int views, size_t reduced_num_dim, int num_quant_bits)":[166,2,1,"void RTreeClassifier::train(vector<BaseKeypoint> const& base_set, RNG & rng, PatchGenerator & make_patch, int num_trees, int depth, int views, size_t reduced_num_dim, int num_quant_bits)"],"void RTreeClassifier::train(vector&lt;BaseKeypoint&gt; const&amp; base_set, RNG &amp; rng, int num_trees, int depth, int views, size_t reduced_num_dim, int num_quant_bits)":[166,2,1,"void RTreeClassifier::train(vector<BaseKeypoint> const& base_set, RNG & rng, int num_trees, int depth, int views, size_t reduced_num_dim, int num_quant_bits)"],"void RTreeClassifier::write(const char* file_name) const":[166,2,1,""],"void RTreeClassifier::write(std::ostream &amp;os) const":[166,2,1,"void RTreeClassifier::write(std::ostream &os) const"],"void RandomizedTree::applyQuantization(int num_quant_bits)":[166,2,1,""],"void RandomizedTree::train(vector&lt;BaseKeypoint&gt; const&amp; base_set, RNG &amp; rng, PatchGenerator &amp; make_patch, int depth, int views, size_t reduced_num_dim, int num_quant_bits)":[166,2,1,"void RandomizedTree::train(vector<BaseKeypoint> const& base_set, RNG & rng, PatchGenerator & make_patch, int depth, int views, size_t reduced_num_dim, int num_quant_bits)"],"void RandomizedTree::train(vector&lt;BaseKeypoint&gt; const&amp; base_set, RNG &amp; rng, int depth, int views, size_t reduced_num_dim, int num_quant_bits)":[166,2,1,"void RandomizedTree::train(vector<BaseKeypoint> const& base_set, RNG & rng, int depth, int views, size_t reduced_num_dim, int num_quant_bits)"],"void RandomizedTree::write(const char* file_name) const":[166,2,1,""],"void RandomizedTree::write(std::ostream &amp;os) const":[166,2,1,"void RandomizedTree::write(std::ostream &os) const"],"void Retina::activateContoursProcessing(const bool activate)":[112,2,1,""],"void Retina::activateMovingContoursProcessing(const bool activate)":[112,2,1,""],"void Retina::clearBuffers()":[112,2,1,""],"void Retina::getMagno(Mat &amp; retinaOutput_magno)":[112,2,1,"void Retina::getMagno(Mat & retinaOutput_magno)"],"void Retina::getMagno(std::valarray&lt;float&gt; &amp; retinaOutput_magno)":[112,2,1,"void Retina::getMagno(std::valarray<float> & retinaOutput_magno)"],"void Retina::getParvo(Mat &amp; retinaOutput_parvo)":[112,2,1,"void Retina::getParvo(Mat & retinaOutput_parvo)"],"void Retina::getParvo(std::valarray&lt;float&gt; &amp; retinaOutput_parvo)":[112,2,1,"void Retina::getParvo(std::valarray<float> & retinaOutput_parvo)"],"void Retina::run(const Mat &amp; inputImage)":[112,2,1,"void Retina::run(const Mat & inputImage)"],"void Retina::setColorSaturation(const bool saturateColors , const float colorSaturationValue)":[112,2,1,""],"void Retina::setup(FileStorage &amp; fs, const bool applyDefaultSetupOnFailure)":[112,2,1,"void Retina::setup(FileStorage & fs, const bool applyDefaultSetupOnFailure)"],"void Retina::setup(RetinaParameters newParameters)":[112,2,1,""],"void Retina::setup(std::string retinaParameterFile , const bool applyDefaultSetupOnFailure)":[112,2,1,""],"void Retina::setupIPLMagnoChannel(const bool normaliseOutput , const float parasolCells_beta , const float parasolCells_tau , const float parasolCells_k , const float amacrinCellsTemporalCutFrequency , const float V0CompressionParameter , const float localAdaptintegration_tau , const float localAdaptintegration_k)":[112,2,1,""],"void Retina::setupOPLandIPLParvoChannel(const bool colorMode , const bool normaliseOutput , const float photoreceptorsLocalAdaptationSensitivity , const float photoreceptorsTemporalConstant , const float photoreceptorsSpatialConstant , const float horizontalCellsGain , const float HcellsTemporalConstant , const float HcellsSpatialConstant , const float ganglionCellsSensitivity)":[112,2,1,""],"void Retina::write(FileStorage&amp; fs) const":[112,2,1,"void Retina::write(FileStorage& fs) const"],"void Retina::write(std::string fs) const":[112,2,1,""],"void Rodrigues(InputArray src, OutputArray dst, OutputArray jacobian)":[101,2,1,""],"void RotatedRect::points(Point2f pts[]) const":[114,2,1,""],"void SIFT::operator()(InputArray img, InputArray mask, vector&lt;KeyPoint&gt;&amp; keypoints, OutputArray descriptors, bool useProvidedKeypoints)":[184,2,1,"void SIFT::operator()(InputArray img, InputArray mask, vector<KeyPoint>& keypoints, OutputArray descriptors, bool useProvidedKeypoints)"],"void SURF::operator()(InputArray img, InputArray mask, vector&lt;KeyPoint&gt;&amp; keypoints) const":[184,2,1,"void SURF::operator()(InputArray img, InputArray mask, vector<KeyPoint>& keypoints) const"],"void SURF::operator()(InputArray img, InputArray mask, vector&lt;KeyPoint&gt;&amp; keypoints, OutputArray descriptors, bool useProvidedKeypoints)":[184,2,1,"void SURF::operator()(InputArray img, InputArray mask, vector<KeyPoint>& keypoints, OutputArray descriptors, bool useProvidedKeypoints)"],"void SVD::backSubst(InputArray rhs, OutputArray dst) const":[123,2,1,""],"void Scharr(InputArray src, OutputArray dst, int ddepth, int dx, int dy, double scale, double delta, int borderType)":[155,2,1,""],"void Sobel(InputArray src, OutputArray dst, int ddepth, int dx, int dy, int ksize, double scale, double delta, int borderType)":[155,2,1,""],"void SparseMat::addref()":[114,2,1,""],"void SparseMat::clear()":[114,2,1,""],"void SparseMat::convertTo(Mat&amp; m, int rtype, double alpha, double beta) const":[114,2,1,"void SparseMat::convertTo(Mat& m, int rtype, double alpha, double beta) const"],"void SparseMat::convertTo(SparseMat&amp; m, int rtype, double alpha) const":[114,2,1,"void SparseMat::convertTo(SparseMat& m, int rtype, double alpha) const"],"void SparseMat::copyTo(Mat&amp; m) const":[114,2,1,"void SparseMat::copyTo(Mat& m) const"],"void SparseMat::copyTo(SparseMat&amp; m) const":[114,2,1,"void SparseMat::copyTo(SparseMat& m) const"],"void SparseMat::create(int dims, const int* _sizes, int _type)":[114,2,1,""],"void SparseMat::erase(const int* idx, size_t* hashval)":[114,2,1,""],"void SparseMat::erase(int i0, int i1, int i2, size_t* hashval)":[114,2,1,""],"void SparseMat::erase(int i0, int i1, size_t* hashval)":[114,2,1,""],"void SparseMat::release()":[114,2,1,""],"void StereoBM::operator()(InputArray left, InputArray right, OutputArray disparity, int disptype)":[101,2,1,""],"void StereoSGBM::operator()(InputArray left, InputArray right, OutputArray disp)":[101,2,1,""],"void StereoVar::operator()(const Mat&amp; left, const Mat&amp; right, Mat&amp; disp)":[113,2,1,"void StereoVar::operator()(const Mat& left, const Mat& right, Mat& disp)"],"void VideoCapture::release()":[152,2,1,""],"void VideoWriter::write(const Mat&amp; image)":[152,2,1,"void VideoWriter::write(const Mat& image)"],"void Viz3d::showWidget(const String &amp;id, const Widget &amp;widget, const Affine3d &amp;pose)":[222,2,1,"void Viz3d::showWidget(const String &id, const Widget &widget, const Affine3d &pose)"],"void absdiff(InputArray src1, InputArray src2, OutputArray dst)":[123,2,1,""],"void accumulate(InputArray src, InputOutputArray dst, InputArray mask)":[160,2,1,""],"void accumulateProduct(InputArray src1, InputArray src2, InputOutputArray dst, InputArray mask)":[160,2,1,""],"void accumulateSquare(InputArray src, InputOutputArray dst, InputArray mask)":[160,2,1,""],"void accumulateWeighted(InputArray src, InputOutputArray dst, double alpha, InputArray mask)":[160,2,1,""],"void adaptiveBilateralFilter(InputArray src, OutputArray dst, Size ksize, double sigmaSpace, double maxSigmaColor , Point anchor, int borderType)":[155,2,1,""],"void adaptiveThreshold(InputArray src, OutputArray dst, double maxValue, int adaptiveMethod, int thresholdType, int blockSize, double C)":[159,2,1,""],"void add(InputArray src1, InputArray src2, OutputArray dst, InputArray mask, int dtype)":[123,2,1,""],"void addCloud(InputArray cloud, InputArray colors, const Affine3d &amp;pose)":[223,2,1,"void addCloud(InputArray cloud, InputArray colors, const Affine3d &pose)"],"void addCloud(InputArray cloud, const Color &amp;color , const Affine3d &amp;pose)":[223,2,1,"void addCloud(InputArray cloud, const Color &color , const Affine3d &pose)"],"void addText(const Mat&amp; img, const string&amp; text, Point org, CvFont font)":[151,2,1,"void addText(const Mat& img, const string& text, Point org, CvFont font)"],"void addWeighted(InputArray src1, double alpha, InputArray src2, double beta, double gamma, OutputArray dst, int dtype)":[123,2,1,""],"void addWidget(const Widget3D&amp; widget, const Affine3d &amp;pose)":[223,2,1,"void addWidget(const Widget3D& widget, const Affine3d &pose)"],"void applyColorMap(InputArray src, OutputArray dst, int colormap)":[103,2,1,""],"void applyTransform(const Affine3d &amp;transform)":[223,2,1,"void applyTransform(const Affine3d &transform)"],"void approxPolyDP(InputArray curve, OutputArray approxCurve, double epsilon, bool closed)":[162,2,1,""],"void arrowedLine(Mat&amp; img, Point pt1, Point pt2, const Scalar&amp; color, int thickness, int line_type, int shift, double tipLength)":[117,2,1,"void arrowedLine(Mat& img, Point pt1, Point pt2, const Scalar& color, int thickness, int line_type, int shift, double tipLength)"],"void bilateralFilter(InputArray src, OutputArray dst, int d, double sigmaColor, double sigmaSpace, int borderType)":[155,2,1,""],"void bitwise_and(InputArray src1, InputArray src2, OutputArray dst, InputArray mask)":[123,2,1,""],"void bitwise_not(InputArray src, OutputArray dst, InputArray mask)":[123,2,1,""],"void bitwise_or(InputArray src1, InputArray src2, OutputArray dst, InputArray mask)":[123,2,1,""],"void bitwise_xor(InputArray src1, InputArray src2, OutputArray dst, InputArray mask)":[123,2,1,""],"void blur(InputArray src, OutputArray dst, Size ksize, Point anchor, int borderType)":[155,2,1,""],"void boxFilter(InputArray src, OutputArray dst, int ddepth, Size ksize, Point anchor, bool normalize, int borderType)":[155,2,1,""],"void buildPyramid(InputArray src, OutputArrayOfArrays dst, int maxlevel, int borderType)":[155,2,1,""],"void calcBackProject(const Mat* images, int nimages, const int* channels, InputArray hist, OutputArray backProject, const float** ranges, double scale, bool uniform)":[157,2,1,""],"void calcBackProject(const Mat* images, int nimages, const int* channels, const SparseMat&amp; hist, OutputArray backProject, const float** ranges, double scale, bool uniform)":[157,2,1,"void calcBackProject(const Mat* images, int nimages, const int* channels, const SparseMat& hist, OutputArray backProject, const float** ranges, double scale, bool uniform)"],"void calcCovarMatrix(InputArray samples, OutputArray covar, OutputArray mean, int flags, int ctype)":[123,2,1,""],"void calcCovarMatrix(const Mat* samples, int nsamples, Mat&amp; covar, Mat&amp; mean, int flags, int ctype)":[123,2,1,"void calcCovarMatrix(const Mat* samples, int nsamples, Mat& covar, Mat& mean, int flags, int ctype)"],"void calcHist(const Mat* images, int nimages, const int* channels, InputArray mask, OutputArray hist, int dims, const int* histSize, const float** ranges, bool uniform, bool accumulate)":[157,2,1,""],"void calcHist(const Mat* images, int nimages, const int* channels, InputArray mask, SparseMat&amp; hist, int dims, const int* histSize, const float** ranges, bool uniform, bool accumulate)":[157,2,1,"void calcHist(const Mat* images, int nimages, const int* channels, InputArray mask, SparseMat& hist, int dims, const int* histSize, const float** ranges, bool uniform, bool accumulate)"],"void calcMotionGradient(InputArray mhi, OutputArray mask, OutputArray orientation, double delta1, double delta2, int apertureSize)":[219,2,1,""],"void calcOpticalFlowFarneback(InputArray prev, InputArray next, InputOutputArray flow, double pyr_scale, int levels, int winsize, int iterations, int poly_n, double poly_sigma, int flags)":[219,2,1,""],"void calcOpticalFlowPyrLK(InputArray prevImg, InputArray nextImg, InputArray prevPts, InputOutputArray nextPts, OutputArray status, OutputArray err, Size winSize, int maxLevel, TermCriteria criteria, int flags, double minEigThreshold)":[219,2,1,""],"void calcOpticalFlowSF(Mat&amp; from, Mat&amp; to, Mat&amp; flow, int layers, int averaging_block_size, int max_flow)":[219,2,1,"void calcOpticalFlowSF(Mat& from, Mat& to, Mat& flow, int layers, int averaging_block_size, int max_flow)"],"void calcOpticalFlowSF(Mat&amp; from, Mat&amp; to, Mat&amp; flow, int layers, int averaging_block_size, int max_flow, double sigma_dist, double sigma_color, int postprocess_window, double sigma_dist_fix, double sigma_color_fix, double occ_thr, int upscale_averaging_radius, double upscale_sigma_dist, double upscale_sigma_color, double speed_up_thr)":[219,2,1,"void calcOpticalFlowSF(Mat& from, Mat& to, Mat& flow, int layers, int averaging_block_size, int max_flow, double sigma_dist, double sigma_color, int postprocess_window, double sigma_dist_fix, double sigma_color_fix, double occ_thr, int upscale_averaging_radius, double upscale_sigma_dist, double upscale_sigma_color, double speed_up_thr)"],"void calibrationMatrixValues(InputArray cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, double&amp; fovx, double&amp; fovy, double&amp; focalLength, Point2d&amp; principalPoint, double&amp; aspectRatio)":[101,2,1,"void calibrationMatrixValues(InputArray cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, double& fovx, double& fovy, double& focalLength, Point2d& principalPoint, double& aspectRatio)"],"void cartToPolar(InputArray x, InputArray y, OutputArray magnitude, OutputArray angle, bool angleInDegrees)":[123,2,1,""],"void circle(Mat&amp; img, Point center, int radius, const Scalar&amp; color, int thickness, int lineType, int shift)":[117,2,1,"void circle(Mat& img, Point center, int radius, const Scalar& color, int thickness, int lineType, int shift)"],"void compare(InputArray src1, InputArray src2, OutputArray dst, int cmpop)":[123,2,1,""],"void compare(const Mat&amp; queryImgDescriptor, const Mat&amp; testImgDescriptors, vector&lt;IMatch&gt;&amp; matches, const Mat&amp; mask)":[111,2,1,"void compare(const Mat& queryImgDescriptor, const Mat& testImgDescriptors, vector<IMatch>& matches, const Mat& mask)"],"void compare(const Mat&amp; queryImgDescriptor, const vector&lt;Mat&gt;&amp; testImgDescriptors, vector&lt;IMatch&gt;&amp; matches, const Mat&amp; mask)":[111,2,1,"void compare(const Mat& queryImgDescriptor, const vector<Mat>& testImgDescriptors, vector<IMatch>& matches, const Mat& mask)"],"void compare(const Mat&amp; queryImgDescriptor, vector&lt;IMatch&gt;&amp; matches, bool addQuery , const Mat&amp; mask)":[111,2,1,"void compare(const Mat& queryImgDescriptor, vector<IMatch>& matches, bool addQuery , const Mat& mask)"],"void compare(const vector&lt;Mat&gt;&amp; queryImgDescriptors, const vector&lt;Mat&gt;&amp; testImgDescriptors, vector&lt;IMatch&gt;&amp; matches, const Mat&amp; mask)":[111,2,1,"void compare(const vector<Mat>& queryImgDescriptors, const vector<Mat>& testImgDescriptors, vector<IMatch>& matches, const Mat& mask)"],"void compare(const vector&lt;Mat&gt;&amp; queryImgDescriptors, vector&lt;IMatch&gt;&amp; matches, bool addQuery , const Mat&amp; mask)":[111,2,1,"void compare(const vector<Mat>& queryImgDescriptors, vector<IMatch>& matches, bool addQuery , const Mat& mask)"],"void completeSymm(InputOutputArray mtx, bool lowerToUpper)":[123,2,1,""],"void composeRT(InputArray rvec1, InputArray tvec1, InputArray rvec2, InputArray tvec2, OutputArray rvec3, OutputArray tvec3, OutputArray dr3dr1, OutputArray dr3dt1, OutputArray dr3dr2, OutputArray dr3dt2, OutputArray dt3dr1, OutputArray dt3dt1, OutputArray dt3dr2, OutputArray dt3dt2)":[101,2,1,""],"void computeCorrespondEpilines(InputArray points, int whichImage, InputArray F, OutputArray lines)":[101,2,1,""],"void computeProjectionMatrix(Matx44d &amp;proj) const":[222,2,1,"void computeProjectionMatrix(Matx44d &proj) const"],"void converTo3DRay(const Point3d &amp;window_coord, Point3d &amp;origin, Vec3d &amp;direction)":[222,2,1,"void converTo3DRay(const Point3d &window_coord, Point3d &origin, Vec3d &direction)"],"void convertMaps(InputArray map1, InputArray map2, OutputArray dstmap1, OutputArray dstmap2, int dstmap1type, bool nninterpolation)":[156,2,1,""],"void convertPointsFromHomogeneous(InputArray src, OutputArray dst)":[101,2,1,""],"void convertPointsHomogeneous(InputArray src, OutputArray dst)":[101,2,1,""],"void convertPointsToHomogeneous(InputArray src, OutputArray dst)":[101,2,1,""],"void convertScaleAbs(InputArray src, OutputArray dst, double alpha, double beta)":[123,2,1,""],"void convertToWindowCoordinates(const Point3d &amp;pt, Point3d &amp;window_coord)":[222,2,1,"void convertToWindowCoordinates(const Point3d &pt, Point3d &window_coord)"],"void convexHull(InputArray points, OutputArray hull, bool clockwise, bool returnPoints)":[162,2,1,""],"void convexityDefects(InputArray contour, InputArray convexhull, OutputArray convexityDefects)":[162,2,1,""],"void copyMakeBorder(InputArray src, OutputArray dst, int top, int bottom, int left, int right, int borderType, const Scalar&amp; value)":[155,2,1,"void copyMakeBorder(InputArray src, OutputArray dst, int top, int bottom, int left, int right, int borderType, const Scalar& value)"],"void cornerEigenValsAndVecs(InputArray src, OutputArray dst, int blockSize, int ksize, int borderType)":[154,2,1,""],"void cornerHarris(InputArray src, OutputArray dst, int blockSize, int ksize, double k, int borderType)":[154,2,1,""],"void cornerMinEigenVal(InputArray src, OutputArray dst, int blockSize, int ksize, int borderType)":[154,2,1,""],"void cornerSubPix(InputArray image, InputOutputArray corners, Size winSize, Size zeroZone, TermCriteria criteria)":[154,2,1,""],"void correctMatches(InputArray F, InputArray points1, InputArray points2, OutputArray newPoints1, OutputArray newPoints2)":[101,2,1,""],"void createHanningWindow(OutputArray dst, Size winSize, int type)":[160,2,1,""],"void cvAbsDiff(const CvArr* src1, const CvArr* src2, CvArr* dst)":[123,4,1,""],"void cvAbsDiffS(const CvArr* src, CvArr* dst, CvScalar value)":[123,4,1,""],"void cvAcc(const CvArr* image, CvArr* sum, const CvArr* mask)":[160,4,1,""],"void cvAdaptiveThreshold(const CvArr* src, CvArr* dst, double max_value, int adaptive_method, int threshold_type, int block_size, double param1)":[159,4,1,""],"void cvAdd(const CvArr* src1, const CvArr* src2, CvArr* dst, const CvArr* mask)":[123,4,1,""],"void cvAddS(const CvArr* src, CvScalar value, CvArr* dst, const CvArr* mask)":[123,4,1,""],"void cvAddText(const CvArr* img, const char* text, CvPoint org, CvFont * arg2)":[151,4,1,""],"void cvAddWeighted(const CvArr* src1, double alpha, const CvArr* src2, double beta, double gamma, CvArr* dst)":[123,4,1,""],"void cvAnd(const CvArr* src1, const CvArr* src2, CvArr* dst, const CvArr* mask)":[123,4,1,""],"void cvAndS(const CvArr* src, CvScalar value, CvArr* dst, const CvArr* mask)":[123,4,1,""],"void cvAvgSdv(const CvArr* arr, CvScalar* mean, CvScalar* std_dev, const CvArr* mask)":[123,4,1,""],"void cvCalcBackProject(IplImage** image, CvArr* backProject, const CvHistogram* hist)":[157,4,1,""],"void cvCalcBackProjectPatch(IplImage** images, CvArr* dst, CvSize patch_size, CvHistogram* hist, int method, double factor)":[157,4,1,""],"void cvCalcCovarMatrix(const CvArr** vects, int count, CvArr* cov_mat, CvArr* avg, int flags)":[123,4,1,""],"void cvCalcHist(IplImage** image, CvHistogram* hist, int accumulate, const CvArr* mask)":[157,4,1,""],"void cvCalcMotionGradient(const CvArr* mhi, CvArr* mask, CvArr* orientation, double delta1, double delta2, int aperture_size)":[219,4,1,""],"void cvCalcOpticalFlowBM(const CvArr* prev, const CvArr* curr, CvSize block_size, CvSize shift_size, CvSize max_range, int use_previous, CvArr* velx, CvArr* vely)":[169,4,1,""],"void cvCalcOpticalFlowFarneback(const CvArr* prev, const CvArr* next, CvArr* flow, double pyr_scale, int levels, int winsize, int iterations, int poly_n, double poly_sigma, int flags)":[219,4,1,""],"void cvCalcOpticalFlowHS(const CvArr* prev, const CvArr* curr, int use_previous, CvArr* velx, CvArr* vely, double lambda, CvTermCriteria criteria)":[169,4,1,""],"void cvCalcOpticalFlowLK(const CvArr* prev, const CvArr* curr, CvSize win_size, CvArr* velx, CvArr* vely)":[169,4,1,""],"void cvCalcOpticalFlowPyrLK(const CvArr* prev, const CvArr* curr, CvArr* prev_pyr, CvArr* curr_pyr, const CvPoint2D32f* prev_features, CvPoint2D32f* curr_features, int count, CvSize win_size, int level, char* status, float* track_error, CvTermCriteria criteria, int flags)":[219,4,1,""],"void cvCalcPGH(const CvSeq* contour, CvHistogram* hist)":[167,4,1,""],"void cvCalcProbDensity(const CvHistogram* hist1, const CvHistogram* hist2, CvHistogram* dst_hist, double scale)":[157,4,1,""],"void cvCalcSubdivVoronoi2D(CvSubdiv2D* subdiv)":[170,4,1,""],"void cvCanny(const CvArr* image, CvArr* edges, double threshold1, double threshold2, int aperture_size)":[154,4,1,""],"void cvCartToPolar(const CvArr* x, const CvArr* y, CvArr* magnitude, CvArr* angle, int angle_in_degrees)":[123,4,1,""],"void cvCircle(CvArr* img, CvPoint center, int radius, CvScalar color, int thickness, int line_type, int shift)":[117,4,1,""],"void cvClearGraph(CvGraph* graph)":[118,4,1,""],"void cvClearHist(CvHistogram* hist)":[157,4,1,""],"void cvClearMemStorage(CvMemStorage* storage)":[118,4,1,""],"void cvClearND(CvArr* arr, const int* idx)":[120,4,1,""],"void cvClearSeq(CvSeq* seq)":[118,4,1,""],"void cvClearSet(CvSet* set_header)":[118,4,1,""],"void cvClearSubdivVoronoi2D(CvSubdiv2D* subdiv)":[170,4,1,""],"void cvCmp(const CvArr* src1, const CvArr* src2, CvArr* dst, int cmp_op)":[123,4,1,""],"void cvCmpS(const CvArr* src, double value, CvArr* dst, int cmp_op)":[123,4,1,""],"void cvComputeCorrespondEpilines(const CvMat* points, int which_image, const CvMat* fundamental_matrix, CvMat* correspondent_lines)":[101,4,1,""],"void cvConvertPointsHomogeneous(const CvMat* src, CvMat* dst)":[101,4,1,""],"void cvConvertScale(const CvArr* src, CvArr* dst, double scale, double shift)":[120,4,1,""],"void cvConvertScaleAbs(const CvArr* src, CvArr* dst, double scale, double shift)":[123,4,1,""],"void cvCopy(const CvArr* src, CvArr* dst, const CvArr* mask)":[120,4,1,""],"void cvCopyHist(const CvHistogram* src, CvHistogram** dst)":[157,4,1,""],"void cvCopyMakeBorder(const CvArr* src, CvArr* dst, CvPoint offset, int bordertype, CvScalar value)":[155,4,1,""],"void cvCornerEigenValsAndVecs(const CvArr* image, CvArr* eigenvv, int block_size, int aperture_size)":[154,4,1,""],"void cvCornerHarris(const CvArr* image, CvArr* harris_response, int block_size, int aperture_size, double k)":[154,4,1,""],"void cvCornerMinEigenVal(const CvArr* image, CvArr* eigenval, int block_size, int aperture_size)":[154,4,1,""],"void cvCorrectMatches(CvMat* F, CvMat* points1, CvMat* points2, CvMat* new_points1, CvMat* new_points2)":[101,4,1,""],"void cvCreateData(CvArr* arr)":[120,4,1,""],"void cvCrossProduct(const CvArr* src1, const CvArr* src2, CvArr* dst)":[120,4,1,""],"void cvCvtColor(const CvArr* src, CvArr* dst, int code)":[159,4,1,""],"void cvDCT(const CvArr* src, CvArr* dst, int flags)":[123,4,1,""],"void cvDFT(const CvArr* src, CvArr* dst, int flags, int nonzero_rows)":[123,4,1,""],"void cvDecRefData(CvArr* arr)":[120,4,1,""],"void cvDecomposeProjectionMatrix(const CvMat * projMatr, CvMat * calibMatr, CvMat * rotMatr, CvMat * posVect, CvMat * rotMatrX, CvMat * rotMatrY, CvMat * rotMatrZ, CvPoint3D64f * eulerAngles)":[101,4,1,""],"void cvDestroyAllWindows()":[153,4,1,""],"void cvDestroyWindow(const char* name)":[153,4,1,""],"void cvDilate(const CvArr* src, CvArr* dst, IplConvKernel* element, int iterations)":[155,4,1,""],"void cvDisplayOverlay(const char* name, const char* text, int delayms)":[151,4,1,""],"void cvDisplayStatusBar(const char* name, const char* text, int delayms)":[151,4,1,""],"void cvDistTransform(const CvArr* src, CvArr* dst, int distance_type, int mask_size, const float* mask, CvArr* labels, int labelType)":[159,4,1,""],"void cvDiv(const CvArr* src1, const CvArr* src2, CvArr* dst, double scale)":[123,4,1,""],"void cvDrawChessboardCorners(CvArr* image, CvSize pattern_size, CvPoint2D32f* corners, int count, int pattern_was_found)":[101,4,1,""],"void cvDrawContours(CvArr *img, CvSeq* contour, CvScalar externalColor, CvScalar holeColor, int maxLevel, int thickness, int lineType)":[162,4,1,""],"void cvEigenVV(CvArr* mat, CvArr* evects, CvArr* evals, double eps, int lowindex, int highindex)":[123,4,1,""],"void cvEllipse(CvArr* img, CvPoint center, CvSize axes, double angle, double start_angle, double end_angle, CvScalar color, int thickness, int line_type, int shift)":[117,4,1,""],"void cvEllipseBox(CvArr* img, CvBox2D box, CvScalar color, int thickness, int line_type, int shift)":[117,4,1,""],"void cvEndWriteStruct(CvFileStorage* fs)":[121,4,1,""],"void cvEqualizeHist(const CvArr* src, CvArr* dst)":[157,4,1,""],"void cvErode(const CvArr* src, CvArr* dst, IplConvKernel* element, int iterations)":[155,4,1,""],"void cvError(int status, const char* func_name, const char* err_msg, const char* file_name, int line)":[124,4,1,""],"void cvExp(const CvArr* src, CvArr* dst)":[123,4,1,""],"void cvExtractSURF(const CvArr* image, const CvArr* mask, CvSeq** keypoints, CvSeq** descriptors, CvMemStorage* storage, CvSURFParams params)":[184,4,1,""],"void cvFillConvexPoly(CvArr* img, const CvPoint* pts, int npts, CvScalar color, int line_type, int shift)":[117,4,1,""],"void cvFillPoly(CvArr* img, CvPoint** pts, const int* npts, int contours, CvScalar color, int line_type, int shift)":[117,4,1,""],"void cvFilter2D(const CvArr* src, CvArr* dst, const CvMat* kernel, CvPoint anchor)":[155,4,1,""],"void cvFindCornerSubPix(const CvArr* image, CvPoint2D32f* corners, int count, CvSize win, CvSize zero_zone, CvTermCriteria criteria)":[154,4,1,""],"void cvFindExtrinsicCameraParams2(const CvMat* object_points, const CvMat* image_points, const CvMat* camera_matrix, const CvMat* distortion_coeffs, CvMat* rotation_vector, CvMat* translation_vector, int use_extrinsic_guess)":[101,4,1,""],"void cvFindStereoCorrespondenceBM(const CvArr* left, const CvArr* right, CvArr* disparity, CvStereoBMState* state)":[101,4,1,""],"void cvFitLine(const CvArr* points, int dist_type, double param, double reps, double aeps, float* line)":[162,4,1,""],"void cvFlip(const CvArr* src, CvArr* dst, int flip_mode)":[123,4,1,""],"void cvFloodFill(CvArr* image, CvPoint seed_point, CvScalar new_val, CvScalar lo_diff, CvScalar up_diff, CvConnectedComp* comp, int flags, CvArr* mask)":[159,4,1,""],"void cvFlushSeqWriter(CvSeqWriter* writer)":[118,4,1,""],"void cvFree(void** pptr)":[124,4,1,""],"void cvGEMM(const CvArr* src1, const CvArr* src2, double alpha, const CvArr* src3, double beta, CvArr* dst, int tABC)":[123,4,1,""],"void cvGetHuMoments(CvMoments* moments, CvHuMoments* hu_moments)":[162,4,1,""],"void cvGetMinMaxHistValue(const CvHistogram* hist, float* min_value, float* max_value, int* min_idx, int* max_idx)":[157,4,1,""],"void cvGetOptimalNewCameraMatrix(const CvMat* camera_matrix, const CvMat* dist_coeffs, CvSize image_size, double alpha, CvMat* new_camera_matrix, CvSize new_imag_size, CvRect* valid_pixel_ROI, int center_principal_point)":[101,4,1,""],"void cvGetQuadrangleSubPix(const CvArr* src, CvArr* dst, const CvMat* map_matrix)":[156,4,1,""],"void cvGetRawData(const CvArr* arr, uchar** data, int* step, CvSize* roi_size)":[120,4,1,""],"void cvGetRectSubPix(const CvArr* src, CvArr* dst, CvPoint2D32f center)":[156,4,1,""],"void cvGetTextSize(const char* text_string, const CvFont* font, CvSize* text_size, int* baseline)":[117,4,1,""],"void cvGoodFeaturesToTrack(const CvArr* image, CvArr* eig_image, CvArr* temp_image, CvPoint2D32f* corners, int* corner_count, double quality_level, double min_distance, const CvArr* mask, int block_size, int use_harris, double k)":[154,4,1,""],"void cvGraphRemoveEdge(CvGraph* graph, int start_idx, int end_idx)":[118,4,1,""],"void cvGraphRemoveEdgeByPtr(CvGraph* graph, CvGraphVtx* start_vtx, CvGraphVtx* end_vtx)":[118,4,1,""],"void cvInRange(const CvArr* src, const CvArr* lower, const CvArr* upper, CvArr* dst)":[123,4,1,""],"void cvInRangeS(const CvArr* src, CvScalar lower, CvScalar upper, CvArr* dst)":[123,4,1,""],"void cvInitFont(CvFont* font, int font_face, double hscale, double vscale, double shear, int thickness, int line_type)":[117,4,1,""],"void cvInitIntrinsicParams2D(const CvMat* object_points, const CvMat* image_points, const CvMat* npoints, CvSize image_size, CvMat* camera_matrix, double aspect_ratio)":[101,4,1,""],"void cvInitTreeNodeIterator(CvTreeNodeIterator* tree_iterator, const void* first, int max_level)":[118,4,1,""],"void cvInitUndistortMap(const CvMat* camera_matrix, const CvMat* distortion_coeffs, CvArr* mapx, CvArr* mapy)":[156,4,1,""],"void cvInitUndistortRectifyMap(const CvMat* camera_matrix, const CvMat* dist_coeffs, const CvMat * R, const CvMat* new_camera_matrix, CvArr* mapx, CvArr* mapy)":[156,4,1,""],"void cvInpaint(const CvArr* src, const CvArr* inpaint_mask, CvArr* dst, double inpaintRange, int flags)":[203,4,1,""],"void cvInsertNodeIntoTree(void* node, void* parent, void* frame)":[118,4,1,""],"void cvIntegral(const CvArr* image, CvArr* sum, CvArr* sqsum, CvArr* tilted_sum)":[159,4,1,""],"void cvLUT(const CvArr* src, CvArr* dst, const CvArr* lut)":[123,4,1,""],"void cvLaplace(const CvArr* src, CvArr* dst, int aperture_size)":[155,4,1,""],"void cvLine(CvArr* img, CvPoint pt1, CvPoint pt2, CvScalar color, int thickness, int line_type, int shift)":[117,4,1,""],"void cvLinearPolar(const CvArr* src, CvArr* dst, CvPoint2D32f center, double maxRadius, int flags)":[156,4,1,""],"void cvLoadWindowParameters(const char* name)":[151,4,1,""],"void cvLog(const CvArr* src, CvArr* dst)":[123,4,1,""],"void cvLogPolar(const CvArr* src, CvArr* dst, CvPoint2D32f center, double M, int flags)":[156,4,1,""],"void cvMatchTemplate(const CvArr* image, const CvArr* templ, CvArr* result, int method)":[161,4,1,""],"void cvMax(const CvArr* src1, const CvArr* src2, CvArr* dst)":[123,4,1,""],"void cvMaxS(const CvArr* src, double value, CvArr* dst)":[123,4,1,""],"void cvMerge(const CvArr* src0, const CvArr* src1, const CvArr* src2, const CvArr* src3, CvArr* dst)":[123,4,1,""],"void cvMin(const CvArr* src1, const CvArr* src2, CvArr* dst)":[123,4,1,""],"void cvMinMaxLoc(const CvArr* arr, double* min_val, double* max_val, CvPoint* min_loc, CvPoint* max_loc, const CvArr* mask)":[123,4,1,""],"void cvMinS(const CvArr* src, double value, CvArr* dst)":[123,4,1,""],"void cvMixChannels(const CvArr** src, int src_count, CvArr** dst, int dst_count, const int* from_to, int pair_count)":[123,4,1,""],"void cvMoments(const CvArr* arr, CvMoments* moments, int binary)":[162,4,1,""],"void cvMorphologyEx(const CvArr* src, CvArr* dst, CvArr* temp, IplConvKernel* element, int operation, int iterations)":[155,4,1,""],"void cvMoveWindow(const char* name, int x, int y)":[153,4,1,""],"void cvMul(const CvArr* src1, const CvArr* src2, CvArr* dst, double scale)":[123,4,1,""],"void cvMulSpectrums(const CvArr* src1, const CvArr* src2, CvArr* dst, int flags)":[123,4,1,""],"void cvMulTransposed(const CvArr* src, CvArr* dst, int order, const CvArr* delta, double scale)":[123,4,1,""],"void cvMultiplyAcc(const CvArr* image1, const CvArr* image2, CvArr* acc, const CvArr* mask)":[160,4,1,""],"void cvNormalizeHist(CvHistogram* hist, double factor)":[157,4,1,""],"void cvNot(const CvArr* src, CvArr* dst)":[123,4,1,""],"void cvOr(const CvArr* src1, const CvArr* src2, CvArr* dst, const CvArr* mask)":[123,4,1,""],"void cvOrS(const CvArr* src, CvScalar value, CvArr* dst, const CvArr* mask)":[123,4,1,""],"void cvPerspectiveTransform(const CvArr* src, CvArr* dst, const CvMat* mat)":[123,4,1,""],"void cvPolarToCart(const CvArr* magnitude, const CvArr* angle, CvArr* x, CvArr* y, int angle_in_degrees)":[123,4,1,""],"void cvPolyLine(CvArr* img, CvPoint** pts, const int* npts, int contours, int is_closed, CvScalar color, int thickness, int line_type, int shift)":[117,4,1,""],"void cvPow(const CvArr* src, CvArr* dst, double power)":[123,4,1,""],"void cvPreCornerDetect(const CvArr* image, CvArr* corners, int aperture_size)":[154,4,1,""],"void cvProjectPoints2(const CvMat* object_points, const CvMat* rotation_vector, const CvMat* translation_vector, const CvMat* camera_matrix, const CvMat* distortion_coeffs, CvMat* image_points, CvMat* dpdrot, CvMat* dpdt, CvMat* dpdf, CvMat* dpdc, CvMat* dpddist, double aspect_ratio)":[101,4,1,""],"void cvPutText(CvArr* img, const char* text, CvPoint org, const CvFont* font, CvScalar color)":[117,4,1,""],"void cvPyrDown(const CvArr* src, CvArr* dst, int filter)":[155,4,1,""],"void cvPyrMeanShiftFiltering(const CvArr* src, CvArr* dst, double sp, double sr, int max_level, CvTermCriteria termcrit)":[155,4,1,""],"void cvRQDecomp3x3(const CvMat * matrixM, CvMat * matrixR, CvMat * matrixQ, CvMat * matrixQx, CvMat * matrixQy, CvMat * matrixQz, CvPoint3D64f * eulerAngles)":[101,4,1,""],"void cvRandArr(CvRNG* rng, CvArr* arr, int dist_type, CvScalar param1, CvScalar param2)":[120,4,1,""],"void cvReadRawData(const CvFileStorage* fs, const CvFileNode* src, void* dst, const char* dt)":[121,4,1,""],"void cvReadRawDataSlice(const CvFileStorage* fs, CvSeqReader* reader, int count, void* dst, const char* dt)":[121,4,1,""],"void cvRectangle(CvArr* img, CvPoint pt1, CvPoint pt2, CvScalar color, int thickness, int line_type, int shift)":[117,4,1,""],"void cvReduce(const CvArr* src, CvArr* dst, int dim, int op)":[123,4,1,""],"void cvRegisterType(const CvTypeInfo* info)":[121,4,1,""],"void cvRelease(void** struct_ptr)":[121,4,1,""],"void cvReleaseCapture(CvCapture** capture)":[152,4,1,""],"void cvReleaseData(CvArr* arr)":[120,4,1,""],"void cvReleaseFileStorage(CvFileStorage** fs)":[121,4,1,""],"void cvReleaseGraphScanner(CvGraphScanner** scanner)":[118,4,1,""],"void cvReleaseHist(CvHistogram** hist)":[157,4,1,""],"void cvReleaseImage(IplImage** image)":[120,4,1,""],"void cvReleaseImageHeader(IplImage** image)":[120,4,1,""],"void cvReleaseLatentSvmDetector(CvLatentSvmDetector** detector)":[187,2,1,""],"void cvReleaseMat(CvMat** mat)":[120,4,1,""],"void cvReleaseMatND(CvMatND** mat)":[120,4,1,""],"void cvReleaseMemStorage(CvMemStorage** storage)":[118,4,1,""],"void cvReleaseSparseMat(CvSparseMat** mat)":[120,4,1,""],"void cvReleaseVideoWriter(CvVideoWriter** writer)":[152,4,1,""],"void cvRemap(const CvArr* src, CvArr* dst, const CvArr* mapx, const CvArr* mapy, int flags, CvScalar fillval)":[156,4,1,""],"void cvRepeat(const CvArr* src, CvArr* dst)":[123,4,1,""],"void cvReprojectImageTo3D(const CvArr* disparityImage, CvArr* _3dImage, const CvMat* Q, int handleMissingValues)":[101,4,1,""],"void cvResetImageROI(IplImage* image)":[120,4,1,""],"void cvResize(const CvArr* src, CvArr* dst, int interpolation)":[156,4,1,""],"void cvResizeWindow(const char* name, int width, int height)":[153,4,1,""],"void cvRestoreMemStoragePos(CvMemStorage* storage, CvMemStoragePos* pos)":[118,4,1,""],"void cvRunningAvg(const CvArr* image, CvArr* acc, double alpha, const CvArr* mask)":[160,4,1,""],"void cvSVBkSb(const CvArr* W, const CvArr* U, const CvArr* V, const CvArr* B, CvArr* X, int flags)":[123,4,1,""],"void cvSVD(CvArr* A, CvArr* W, CvArr* U, CvArr* V, int flags)":[123,4,1,""],"void cvSave(const char* filename, const void* struct_ptr, const char* name, const char* comment, CvAttrList attributes)":[121,4,1,""],"void cvSaveMemStoragePos(const CvMemStorage* storage, CvMemStoragePos* pos)":[118,4,1,""],"void cvSaveWindowParameters(const char* name)":[151,4,1,""],"void cvScaleAdd(const CvArr* src1, CvScalar scale, const CvArr* src2, CvArr* dst)":[123,4,1,""],"void cvSeqInsertSlice(CvSeq* seq, int before_index, const CvArr* from_arr)":[118,4,1,""],"void cvSeqInvert(CvSeq* seq)":[118,4,1,""],"void cvSeqPop(CvSeq* seq, void* element)":[118,4,1,""],"void cvSeqPopFront(CvSeq* seq, void* element)":[118,4,1,""],"void cvSeqPopMulti(CvSeq* seq, void* elements, int count, int in_front)":[118,4,1,""],"void cvSeqPushMulti(CvSeq* seq, const void* elements, int count, int in_front)":[118,4,1,""],"void cvSeqRemove(CvSeq* seq, int index)":[118,4,1,""],"void cvSeqRemoveSlice(CvSeq* seq, CvSlice slice)":[118,4,1,""],"void cvSeqSort(CvSeq* seq, CvCmpFunc func, void* userdata)":[118,4,1,""],"void cvSet(CvArr* arr, CvScalar value, const CvArr* mask)":[120,4,1,""],"void cvSet1D(CvArr* arr, int idx0, CvScalar value)":[120,4,1,""],"void cvSet2D(CvArr* arr, int idx0, int idx1, CvScalar value)":[120,4,1,""],"void cvSet3D(CvArr* arr, int idx0, int idx1, int idx2, CvScalar value)":[120,4,1,""],"void cvSetData(CvArr* arr, void* data, int step)":[120,4,1,""],"void cvSetHistBinRanges(CvHistogram* hist, float** ranges, int uniform)":[157,4,1,""],"void cvSetIPLAllocators(Cv_iplCreateImageHeader create_header, Cv_iplAllocateImageData allocate_data, Cv_iplDeallocate deallocate, Cv_iplCreateROI create_roi, Cv_iplCloneImage clone_image)":[120,4,1,""],"void cvSetIdentity(CvArr* mat, CvScalar value)":[123,4,1,""],"void cvSetImageCOI(IplImage* image, int coi)":[120,4,1,""],"void cvSetImageROI(IplImage* image, CvRect rect)":[120,4,1,""],"void cvSetImagesForHaarClassifierCascade(CvHaarClassifierCascade* cascade, const CvArr* sum, const CvArr* sqsum, const CvArr* tilted_sum, double scale)":[186,4,1,""],"void cvSetMouseCallback(const char* window_name, CvMouseCallback on_mouse, void* param)":[153,4,1,""],"void cvSetND(CvArr* arr, const int* idx, CvScalar value)":[120,4,1,""],"void cvSetOpenGlDrawCallback(const char* window_name, CvOpenGlDrawCallback callback, void* userdata)":[151,4,1,""],"void cvSetReal1D(CvArr* arr, int idx0, double value)":[120,4,1,""],"void cvSetReal2D(CvArr* arr, int idx0, int idx1, double value)":[120,4,1,""],"void cvSetReal3D(CvArr* arr, int idx0, int idx1, int idx2, double value)":[120,4,1,""],"void cvSetRealND(CvArr* arr, const int* idx, double value)":[120,4,1,""],"void cvSetRemove(CvSet* set_header, int index)":[118,4,1,""],"void cvSetRemoveByPtr(CvSet* set_header, void* elem)":[118,4,1,""],"void cvSetSeqBlockSize(CvSeq* seq, int delta_elems)":[118,4,1,""],"void cvSetSeqReaderPos(CvSeqReader* reader, int index, int is_relative)":[118,4,1,""],"void cvSetTrackbarPos(const char* trackbar_name, const char* window_name, int pos)":[153,4,1,""],"void cvSetWindowProperty(const char* name, int prop_id, double prop_value)":[151,4,1,""],"void cvSetZero(CvArr* arr)":[120,4,1,""],"void cvShowImage(const char* name, const CvArr* image)":[153,4,1,""],"void cvSmooth(const CvArr* src, CvArr* dst, int smoothtype, int size1, int size2, double sigma1, double sigma2)":[155,4,1,""],"void cvSobel(const CvArr* src, CvArr* dst, int xorder, int yorder, int aperture_size)":[155,4,1,""],"void cvSplit(const CvArr* src, CvArr* dst0, CvArr* dst1, CvArr* dst2, CvArr* dst3)":[123,4,1,""],"void cvSquareAcc(const CvArr* image, CvArr* sqsum, const CvArr* mask)":[160,4,1,""],"void cvStartAppendToSeq(CvSeq* seq, CvSeqWriter* writer)":[118,4,1,""],"void cvStartNextStream(CvFileStorage* fs)":[121,4,1,""],"void cvStartReadRawData(const CvFileStorage* fs, const CvFileNode* src, CvSeqReader* reader)":[121,4,1,""],"void cvStartReadSeq(const CvSeq* seq, CvSeqReader* reader, int reverse)":[118,4,1,""],"void cvStartWriteSeq(int seq_flags, int header_size, int elem_size, CvMemStorage* storage, CvSeqWriter* writer)":[118,4,1,""],"void cvStartWriteStruct(CvFileStorage* fs, const char* name, int struct_flags, const char* type_name, CvAttrList attributes)":[121,4,1,""],"void cvStereoRectify(const CvMat* camera_matrix1, const CvMat* camera_matrix2, const CvMat* dist_coeffs1, const CvMat* dist_coeffs2, CvSize image_size, const CvMat* R, const CvMat* T, CvMat* R1, CvMat* R2, CvMat* P1, CvMat* P2, CvMat* Q, int flags, double alpha, CvSize new_image_size, CvRect* valid_pix_ROI1, CvRect* valid_pix_ROI2)":[101,4,1,""],"void cvSub(const CvArr* src1, const CvArr* src2, CvArr* dst, const CvArr* mask)":[123,4,1,""],"void cvSubRS(const CvArr* src, CvScalar value, CvArr* dst, const CvArr* mask)":[123,4,1,""],"void cvSubS(const CvArr* src, CvScalar value, CvArr* dst, const CvArr* mask)":[123,4,1,""],"void cvThreshHist(CvHistogram* hist, double threshold)":[157,4,1,""],"void cvTransform(const CvArr* src, CvArr* dst, const CvMat* transmat, const CvMat* shiftvec)":[123,4,1,""],"void cvTranspose(const CvArr* src, CvArr* dst)":[123,4,1,""],"void cvTriangulatePoints(CvMat* projMatr1, CvMat* projMatr2, CvMat* projPoints1, CvMat* projPoints2, CvMat* points4D)":[101,4,1,""],"void cvUndistort2(const CvArr* src, CvArr* dst, const CvMat* camera_matrix, const CvMat* distortion_coeffs, const CvMat* new_camera_matrix)":[156,4,1,""],"void cvUndistortPoints(const CvMat* src, CvMat* dst, const CvMat* camera_matrix, const CvMat* dist_coeffs, const CvMat* R, const CvMat* P)":[156,4,1,""],"void cvUnregisterType(const char* type_name)":[121,4,1,""],"void cvUpdateMotionHistory(const CvArr* silhouette, CvArr* mhi, double timestamp, double duration)":[219,4,1,""],"void cvWarpAffine(const CvArr* src, CvArr* dst, const CvMat* map_matrix, int flags, CvScalar fillval)":[156,4,1,""],"void cvWarpPerspective(const CvArr* src, CvArr* dst, const CvMat* map_matrix, int flags, CvScalar fillval)":[156,4,1,""],"void cvWatershed(const CvArr* image, CvArr* markers)":[159,4,1,""],"void cvWrite(CvFileStorage* fs, const char* name, const void* ptr, CvAttrList attributes)":[121,4,1,""],"void cvWriteComment(CvFileStorage* fs, const char* comment, int eol_comment)":[121,4,1,""],"void cvWriteFileNode(CvFileStorage* fs, const char* new_node_name, const CvFileNode* node, int embed)":[121,4,1,""],"void cvWriteInt(CvFileStorage* fs, const char* name, int value)":[121,4,1,""],"void cvWriteRawData(CvFileStorage* fs, const void* src, int len, const char* dt)":[121,4,1,""],"void cvWriteReal(CvFileStorage* fs, const char* name, double value)":[121,4,1,""],"void cvWriteString(CvFileStorage* fs, const char* name, const char* str, int quote)":[121,4,1,""],"void cvXor(const CvArr* src1, const CvArr* src2, CvArr* dst, const CvArr* mask)":[123,4,1,""],"void cvXorS(const CvArr* src, CvScalar value, CvArr* dst, const CvArr* mask)":[123,4,1,""],"void cvmSet(CvMat* mat, int row, int col, double value)":[120,4,1,""],"void cvtColor(InputArray src, OutputArray dst, int code, int dstCn)":[159,2,1,""],"void dct(InputArray src, OutputArray dst, int flags)":[123,2,1,""],"void decomposeProjectionMatrix(InputArray projMatrix, OutputArray cameraMatrix, OutputArray rotMatrix, OutputArray transVect, OutputArray rotMatrixX, OutputArray rotMatrixY, OutputArray rotMatrixZ, OutputArray eulerAngles)":[101,2,1,""],"void destroyAllWindows()":[153,2,1,""],"void destroyWindow(const string&amp; winname)":[153,2,1,"void destroyWindow(const string& winname)"],"void detail::Blender::blend(Mat &amp;dst, Mat &amp;dst_mask)":[207,2,1,"void detail::Blender::blend(Mat &dst, Mat &dst_mask)"],"void detail::Blender::feed(const Mat &amp;img, const Mat &amp;mask, Point tl)":[207,2,1,"void detail::Blender::feed(const Mat &img, const Mat &mask, Point tl)"],"void detail::Blender::prepare(const std::vector&lt;Point&gt; &amp;corners, const std::vector&lt;Size&gt; &amp;sizes)":[207,2,1,"void detail::Blender::prepare(const std::vector<Point> &corners, const std::vector<Size> &sizes)"],"void detail::BundleAdjusterBase::calcError(Mat &amp;err)":[213,2,1,"void detail::BundleAdjusterBase::calcError(Mat &err)"],"void detail::BundleAdjusterBase::calcJacobian(Mat &amp;jac)":[213,2,1,"void detail::BundleAdjusterBase::calcJacobian(Mat &jac)"],"void detail::BundleAdjusterBase::obtainRefinedCameraParams(std::vector&lt;CameraParams&gt; &amp;cameras) const":[213,2,1,"void detail::BundleAdjusterBase::obtainRefinedCameraParams(std::vector<CameraParams> &cameras) const"],"void detail::BundleAdjusterBase::setUpInitialCameraParams(const std::vector&lt;CameraParams&gt; &amp;cameras)":[213,2,1,"void detail::BundleAdjusterBase::setUpInitialCameraParams(const std::vector<CameraParams> &cameras)"],"void detail::CylindricalWarper::CylindricalWarper(float scale)":[216,2,1,""],"void detail::Estimator::estimate(const std::vector&lt;ImageFeatures&gt; &amp;features, const std::vector&lt;MatchesInfo&gt; &amp;pairwise_matches, std::vector&lt;CameraParams&gt; &amp;cameras)":[213,2,1,"void detail::Estimator::estimate(const std::vector<ImageFeatures> &features, const std::vector<MatchesInfo> &pairwise_matches, std::vector<CameraParams> &cameras)"],"void detail::ExposureCompensator::apply(int index, Point corner, Mat &amp;image, const Mat &amp;mask)":[209,2,1,"void detail::ExposureCompensator::apply(int index, Point corner, Mat &image, const Mat &mask)"],"void detail::ExposureCompensator::feed(const std::vector&lt;Point&gt; &amp;corners, const std::vector&lt;Mat&gt; &amp;images, const std::vector&lt;Mat&gt; &amp;masks)":[209,2,1,"void detail::ExposureCompensator::feed(const std::vector<Point> &corners, const std::vector<Mat> &images, const std::vector<Mat> &masks)"],"void detail::ExposureCompensator::feed(const std::vector&lt;Point&gt; &amp;corners, const std::vector&lt;Mat&gt; &amp;images, const std::vector&lt;std::pair&lt;Mat,uchar&gt; &gt; &amp;masks)":[209,2,1,"void detail::ExposureCompensator::feed(const std::vector<Point> &corners, const std::vector<Mat> &images, const std::vector<std::pair<Mat,uchar> > &masks)"],"void detail::FeaturesFinder::collectGarbage()":[212,2,1,""],"void detail::FeaturesFinder::find(const Mat &amp;image, ImageFeatures &amp;features)":[212,2,1,"void detail::FeaturesFinder::find(const Mat &image, ImageFeatures &features)"],"void detail::FeaturesFinder::operator ()(const Mat &amp;image, ImageFeatures &amp;features)":[212,2,1,"void detail::FeaturesFinder::operator ()(const Mat &image, ImageFeatures &features)"],"void detail::FeaturesFinder::operator ()(const Mat &amp;image, ImageFeatures &amp;features, const std::vector&lt;cv::Rect&gt; &amp;rois)":[212,2,1,"void detail::FeaturesFinder::operator ()(const Mat &image, ImageFeatures &features, const std::vector<cv::Rect> &rois)"],"void detail::FeaturesMatcher::collectGarbage()":[212,2,1,""],"void detail::FeaturesMatcher::match(const ImageFeatures &amp;features1, const ImageFeatures &amp;features2, MatchesInfo&amp; matches_info)":[212,2,1,"void detail::FeaturesMatcher::match(const ImageFeatures &features1, const ImageFeatures &features2, MatchesInfo& matches_info)"],"void detail::FeaturesMatcher::operator ()(const ImageFeatures &amp;features1, const ImageFeatures &amp;features2, MatchesInfo&amp; matches_info)":[212,2,1,"void detail::FeaturesMatcher::operator ()(const ImageFeatures &features1, const ImageFeatures &features2, MatchesInfo& matches_info)"],"void detail::FeaturesMatcher::operator ()(const std::vector&lt;ImageFeatures&gt; &amp; features, std::vector&lt;MatchesInfo&gt; &amp; pairwise_matches, const Mat &amp; mask)":[212,2,1,"void detail::FeaturesMatcher::operator ()(const std::vector<ImageFeatures> & features, std::vector<MatchesInfo> & pairwise_matches, const Mat & mask)"],"void detail::PairwiseSeamFinder::findInPair(size_t first, size_t second, Rect roi)":[214,2,1,""],"void detail::PlaneWarper::PlaneWarper(float scale)":[216,2,1,""],"void detail::RotationWarper::warpBackward(const Mat &amp;src, const Mat &amp;K, const Mat &amp;R, int interp_mode, int border_mode, Size dst_size, Mat &amp;dst)":[216,2,1,"void detail::RotationWarper::warpBackward(const Mat &src, const Mat &K, const Mat &R, int interp_mode, int border_mode, Size dst_size, Mat &dst)"],"void detail::SeamFinder::find(const std::vector&lt;Mat&gt; &amp;src, const std::vector&lt;Point&gt; &amp;corners, std::vector&lt;Mat&gt; &amp;masks)":[214,2,1,"void detail::SeamFinder::find(const std::vector<Mat> &src, const std::vector<Point> &corners, std::vector<Mat> &masks)"],"void detail::SphericalWarper::SphericalWarper(float scale)":[216,2,1,""],"void detail::estimateFocal(const std::vector&lt;ImageFeatures&gt; &amp;features, const std::vector&lt;MatchesInfo&gt; &amp;pairwise_matches, std::vector&lt;double&gt; &amp;focals)":[206,2,1,"void detail::estimateFocal(const std::vector<ImageFeatures> &features, const std::vector<MatchesInfo> &pairwise_matches, std::vector<double> &focals)"],"void detail::focalsFromHomography(const Mat &amp;H, double &amp;f0, double &amp;f1, bool &amp;f0_ok, bool &amp;f1_ok)":[206,2,1,"void detail::focalsFromHomography(const Mat &H, double &f0, double &f1, bool &f0_ok, bool &f1_ok)"],"void detail::waveCorrect(std::vector&lt;Mat&gt; &amp;rmats, WaveCorrectKind kind)":[213,2,1,"void detail::waveCorrect(std::vector<Mat> &rmats, WaveCorrectKind kind)"],"void dft(InputArray src, OutputArray dst, int flags, int nonzeroRows)":[123,2,1,""],"void dilate(InputArray src, OutputArray dst, InputArray kernel, Point anchor, int iterations, int borderType, const Scalar&amp; borderValue)":[155,2,1,"void dilate(InputArray src, OutputArray dst, InputArray kernel, Point anchor, int iterations, int borderType, const Scalar& borderValue)"],"void displayOverlay(const string&amp; winname, const string&amp; text, int delayms)":[151,2,1,"void displayOverlay(const string& winname, const string& text, int delayms)"],"void displayStatusBar(const string&amp; winname, const string&amp; text, int delayms)":[151,2,1,"void displayStatusBar(const string& winname, const string& text, int delayms)"],"void distanceTransform(InputArray src, OutputArray dst, OutputArray labels, int distanceType, int maskSize, int labelType)":[159,2,1,""],"void distanceTransform(InputArray src, OutputArray dst, int distanceType, int maskSize)":[159,2,1,""],"void divide(InputArray src1, InputArray src2, OutputArray dst, double scale, int dtype)":[123,2,1,""],"void divide(double scale, InputArray src2, OutputArray dst, int dtype)":[123,2,1,""],"void drawChessboardCorners(InputOutputArray image, Size patternSize, InputArray corners, bool patternWasFound)":[101,2,1,""],"void drawContours(InputOutputArray image, InputArrayOfArrays contours, int contourIdx, const Scalar&amp; color, int thickness, int lineType, InputArray hierarchy, int maxLevel, Point offset)":[162,2,1,"void drawContours(InputOutputArray image, InputArrayOfArrays contours, int contourIdx, const Scalar& color, int thickness, int lineType, InputArray hierarchy, int maxLevel, Point offset)"],"void drawKeypoints(const Mat&amp; image, const vector&lt;KeyPoint&gt;&amp; keypoints, Mat&amp; outImage, const Scalar&amp; color, int flags)":[130,2,1,"void drawKeypoints(const Mat& image, const vector<KeyPoint>& keypoints, Mat& outImage, const Scalar& color, int flags)"],"void drawMatches(const Mat&amp; img1, const vector&lt;KeyPoint&gt;&amp; keypoints1, const Mat&amp; img2, const vector&lt;KeyPoint&gt;&amp; keypoints2, const vector&lt;DMatch&gt;&amp; matches1to2, Mat&amp; outImg, const Scalar&amp; matchColor, const Scalar&amp; singlePointColor, const vector&lt;char&gt;&amp; matchesMask, int flags)":[130,2,1,"void drawMatches(const Mat& img1, const vector<KeyPoint>& keypoints1, const Mat& img2, const vector<KeyPoint>& keypoints2, const vector<DMatch>& matches1to2, Mat& outImg, const Scalar& matchColor, const Scalar& singlePointColor, const vector<char>& matchesMask, int flags)"],"void drawMatches(const Mat&amp; img1, const vector&lt;KeyPoint&gt;&amp; keypoints1, const Mat&amp; img2, const vector&lt;KeyPoint&gt;&amp; keypoints2, const vector&lt;vector&lt;DMatch&gt; &gt;&amp; matches1to2, Mat&amp; outImg, const Scalar&amp; matchColor, const Scalar&amp; singlePointColor, const vector&lt;vector&lt;char&gt; &gt;&amp; matchesMask, int flags)":[130,2,1,"void drawMatches(const Mat& img1, const vector<KeyPoint>& keypoints1, const Mat& img2, const vector<KeyPoint>& keypoints2, const vector<vector<DMatch> >& matches1to2, Mat& outImg, const Scalar& matchColor, const Scalar& singlePointColor, const vector<vector<char> >& matchesMask, int flags)"],"void ellipse(Mat&amp; img, Point center, Size axes, double angle, double startAngle, double endAngle, const Scalar&amp; color, int thickness, int lineType, int shift)":[117,2,1,"void ellipse(Mat& img, Point center, Size axes, double angle, double startAngle, double endAngle, const Scalar& color, int thickness, int lineType, int shift)"],"void ellipse(Mat&amp; img, const RotatedRect&amp; box, const Scalar&amp; color, int thickness, int lineType)":[117,2,1,"void ellipse(Mat& img, const RotatedRect& box, const Scalar& color, int thickness, int lineType)"],"void ellipse2Poly(Point center, Size axes, int angle, int arcStart, int arcEnd, int delta, vector&lt;Point&gt;&amp; pts)":[117,2,1,"void ellipse2Poly(Point center, Size axes, int angle, int arcStart, int arcEnd, int delta, vector<Point>& pts)"],"void equalizeHist(InputArray src, OutputArray dst)":[157,2,1,""],"void erode(InputArray src, OutputArray dst, InputArray kernel, Point anchor, int iterations, int borderType, const Scalar&amp; borderValue)":[155,2,1,"void erode(InputArray src, OutputArray dst, InputArray kernel, Point anchor, int iterations, int borderType, const Scalar& borderValue)"],"void error(const Exception&amp; exc)":[124,2,1,"void error(const Exception& exc)"],"void exp(InputArray src, OutputArray dst)":[123,2,1,""],"void extractImageCOI(const CvArr* arr, OutputArray coiimg, int coi)":[123,2,1,""],"void fastFree(void* ptr)":[124,2,1,""],"void fastNlMeansDenoising(InputArray src, OutputArray dst, float h, int templateWindowSize, int searchWindowSize)":[202,2,1,""],"void fastNlMeansDenoisingColored(InputArray src, OutputArray dst, float h, float hColor, int templateWindowSize, int searchWindowSize)":[202,2,1,""],"void fastNlMeansDenoisingColoredMulti(InputArrayOfArrays srcImgs, OutputArray dst, int imgToDenoiseIndex, int temporalWindowSize, float h, float hColor, int templateWindowSize, int searchWindowSize)":[202,2,1,""],"void fastNlMeansDenoisingMulti(InputArrayOfArrays srcImgs, OutputArray dst, int imgToDenoiseIndex, int temporalWindowSize, float h, int templateWindowSize, int searchWindowSize)":[202,2,1,""],"void fillConvexPoly(Mat&amp; img, const Point* pts, int npts, const Scalar&amp; color, int lineType, int shift)":[117,2,1,"void fillConvexPoly(Mat& img, const Point* pts, int npts, const Scalar& color, int lineType, int shift)"],"void fillPoly(Mat&amp; img, const Point** pts, const int* npts, int ncontours, const Scalar&amp; color, int lineType, int shift, Point offset)":[117,2,1,"void fillPoly(Mat& img, const Point** pts, const int* npts, int ncontours, const Scalar& color, int lineType, int shift, Point offset)"],"void filter2D(InputArray src, OutputArray dst, int ddepth, InputArray kernel, Point anchor, double delta, int borderType)":[155,2,1,""],"void filterSpeckles(InputOutputArray img, double newVal, int maxSpeckleSize, double maxDiff, InputOutputArray buf)":[101,2,1,""],"void finalize()":[223,2,1,""],"void findContours(InputOutputArray image, OutputArrayOfArrays contours, OutputArray hierarchy, int mode, int method, Point offset)":[162,2,1,""],"void findContours(InputOutputArray image, OutputArrayOfArrays contours, int mode, int method, Point offset)":[162,2,1,""],"void fisheye::distortPoints(InputArray undistorted, OutputArray distorted, InputArray K, InputArray D, double alpha)":[101,2,1,""],"void fisheye::estimateNewCameraMatrixForUndistortRectify(InputArray K, InputArray D, const Size &amp;image_size, InputArray R, OutputArray P, double balance , const Size&amp; new_size , double fov_scale)":[101,2,1,"void fisheye::estimateNewCameraMatrixForUndistortRectify(InputArray K, InputArray D, const Size &image_size, InputArray R, OutputArray P, double balance , const Size& new_size , double fov_scale)"],"void fisheye::initUndistortRectifyMap(InputArray K, InputArray D, InputArray R, InputArray P, const cv::Size&amp; size, int m1type, OutputArray map1, OutputArray map2)":[101,2,1,"void fisheye::initUndistortRectifyMap(InputArray K, InputArray D, InputArray R, InputArray P, const cv::Size& size, int m1type, OutputArray map1, OutputArray map2)"],"void fisheye::projectPoints(InputArray objectPoints, OutputArray imagePoints, InputArray rvec, InputArray tvec, InputArray K, InputArray D, double alpha , OutputArray jacobian)":[101,2,1,""],"void fisheye::projectPoints(InputArray objectPoints, OutputArray imagePoints, const Affine3d&amp; affine, InputArray K, InputArray D, double alpha , OutputArray jacobian)":[101,2,1,"void fisheye::projectPoints(InputArray objectPoints, OutputArray imagePoints, const Affine3d& affine, InputArray K, InputArray D, double alpha , OutputArray jacobian)"],"void fisheye::stereoRectify(InputArray K1, InputArray D1, InputArray K2, InputArray D2, const Size &amp;imageSize, InputArray R, InputArray tvec, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags, const Size &amp;newImageSize , double balance , double fov_scale)":[101,2,1,"void fisheye::stereoRectify(InputArray K1, InputArray D1, InputArray K2, InputArray D2, const Size &imageSize, InputArray R, InputArray tvec, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags, const Size &newImageSize , double balance , double fov_scale)"],"void fisheye::undistortImage(InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray Knew , const Size&amp; new_size)":[101,2,1,"void fisheye::undistortImage(InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray Knew , const Size& new_size)"],"void fisheye::undistortPoints(InputArray distorted, OutputArray undistorted, InputArray K, InputArray D, InputArray R , InputArray P)":[101,2,1,""],"void fitLine(InputArray points, OutputArray line, int distType, double param, double reps, double aeps)":[162,2,1,""],"void flann::Index_&lt;T&gt;::knnSearch(const Mat&amp; queries, Mat&amp; indices, Mat&amp; dists, int knn, const SearchParams&amp; params)":[136,2,1,"void flann::Index_<T>::knnSearch(const Mat& queries, Mat& indices, Mat& dists, int knn, const SearchParams& params)"],"void flann::Index_&lt;T&gt;::knnSearch(const vector&lt;T&gt;&amp; query, vector&lt;int&gt;&amp; indices, vector&lt;float&gt;&amp; dists, int knn, const SearchParams&amp; params)":[136,2,1,"void flann::Index_<T>::knnSearch(const vector<T>& query, vector<int>& indices, vector<float>& dists, int knn, const SearchParams& params)"],"void flann::Index_&lt;T&gt;::save(std::string filename)":[136,2,1,"void flann::Index_<T>::save(std::string filename)"],"void flip(InputArray src, OutputArray dst, int flipCode)":[123,2,1,""],"void gemm(InputArray src1, InputArray src2, double alpha, InputArray src3, double beta, OutputArray dst, int flags)":[123,2,1,""],"void getDerivKernels(OutputArray kx, OutputArray ky, int dx, int dy, int ksize, bool normalize, int ktype)":[155,2,1,""],"void getRectSubPix(InputArray image, Size patchSize, Point2f center, OutputArray patch, int patchType)":[156,2,1,""],"void goodFeaturesToTrack(InputArray image, OutputArray corners, int maxCorners, double qualityLevel, double minDistance, InputArray mask, int blockSize, bool useHarrisDetector, double k)":[154,2,1,""],"void gpu::BruteForceMatcher_GPU_base::knnMatch(const GpuMat&amp; query, const GpuMat&amp; train, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, int k, const GpuMat&amp; mask , bool compactResult)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::knnMatch(const GpuMat& query, const GpuMat& train, std::vector< std::vector<DMatch> >&matches, int k, const GpuMat& mask , bool compactResult)"],"void gpu::BruteForceMatcher_GPU_base::knnMatch(const GpuMat&amp; query, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, int k, const std::vector&lt;GpuMat&gt;&amp;masks , bool compactResult)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::knnMatch(const GpuMat& query, std::vector< std::vector<DMatch> >&matches, int k, const std::vector<GpuMat>&masks , bool compactResult)"],"void gpu::BruteForceMatcher_GPU_base::knnMatch2Collection(const GpuMat&amp; query, const GpuMat&amp; trainCollection, GpuMat&amp; trainIdx, GpuMat&amp; imgIdx, GpuMat&amp; distance, const GpuMat&amp; maskCollection , Stream&amp; stream)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::knnMatch2Collection(const GpuMat& query, const GpuMat& trainCollection, GpuMat& trainIdx, GpuMat& imgIdx, GpuMat& distance, const GpuMat& maskCollection , Stream& stream)"],"void gpu::BruteForceMatcher_GPU_base::knnMatch2Convert(const Mat&amp; trainIdx, const Mat&amp; imgIdx, const Mat&amp; distance, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp; matches, bool compactResult)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::knnMatch2Convert(const Mat& trainIdx, const Mat& imgIdx, const Mat& distance, std::vector< std::vector<DMatch> >& matches, bool compactResult)"],"void gpu::BruteForceMatcher_GPU_base::knnMatch2Download(const GpuMat&amp; trainIdx, const GpuMat&amp; imgIdx, const GpuMat&amp; distance, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp; matches, bool compactResult)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::knnMatch2Download(const GpuMat& trainIdx, const GpuMat& imgIdx, const GpuMat& distance, std::vector< std::vector<DMatch> >& matches, bool compactResult)"],"void gpu::BruteForceMatcher_GPU_base::knnMatchConvert(const Mat&amp; trainIdx, const Mat&amp; distance, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, bool compactResult)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::knnMatchConvert(const Mat& trainIdx, const Mat& distance, std::vector< std::vector<DMatch> >&matches, bool compactResult)"],"void gpu::BruteForceMatcher_GPU_base::knnMatchDownload(const GpuMat&amp; trainIdx, const GpuMat&amp; distance, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, bool compactResult)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::knnMatchDownload(const GpuMat& trainIdx, const GpuMat& distance, std::vector< std::vector<DMatch> >&matches, bool compactResult)"],"void gpu::BruteForceMatcher_GPU_base::knnMatchSingle(const GpuMat&amp; query, const GpuMat&amp; train, GpuMat&amp; trainIdx, GpuMat&amp; distance, GpuMat&amp; allDist, int k, const GpuMat&amp; mask , Stream&amp; stream)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::knnMatchSingle(const GpuMat& query, const GpuMat& train, GpuMat& trainIdx, GpuMat& distance, GpuMat& allDist, int k, const GpuMat& mask , Stream& stream)"],"void gpu::BruteForceMatcher_GPU_base::makeGpuCollection(GpuMat&amp; trainCollection, GpuMat&amp; maskCollection, const vector&lt;GpuMat&gt;&amp; masks)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::makeGpuCollection(GpuMat& trainCollection, GpuMat& maskCollection, const vector<GpuMat>& masks)"],"void gpu::BruteForceMatcher_GPU_base::match(const GpuMat&amp; query, const GpuMat&amp; train, std::vector&lt;DMatch&gt;&amp; matches, const GpuMat&amp; mask)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::match(const GpuMat& query, const GpuMat& train, std::vector<DMatch>& matches, const GpuMat& mask)"],"void gpu::BruteForceMatcher_GPU_base::match(const GpuMat&amp; query, std::vector&lt;DMatch&gt;&amp; matches, const std::vector&lt;GpuMat&gt;&amp; masks)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::match(const GpuMat& query, std::vector<DMatch>& matches, const std::vector<GpuMat>& masks)"],"void gpu::BruteForceMatcher_GPU_base::matchCollection(const GpuMat&amp; query, const GpuMat&amp; trainCollection, GpuMat&amp; trainIdx, GpuMat&amp; imgIdx, GpuMat&amp; distance, const GpuMat&amp; masks, Stream&amp; stream)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::matchCollection(const GpuMat& query, const GpuMat& trainCollection, GpuMat& trainIdx, GpuMat& imgIdx, GpuMat& distance, const GpuMat& masks, Stream& stream)"],"void gpu::BruteForceMatcher_GPU_base::matchConvert(const Mat&amp; trainIdx, const Mat&amp; distance, std::vector&lt;DMatch&gt;&amp;matches)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::matchConvert(const Mat& trainIdx, const Mat& distance, std::vector<DMatch>&matches)"],"void gpu::BruteForceMatcher_GPU_base::matchConvert(const Mat&amp; trainIdx, const Mat&amp; imgIdx, const Mat&amp; distance, std::vector&lt;DMatch&gt;&amp;matches)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::matchConvert(const Mat& trainIdx, const Mat& imgIdx, const Mat& distance, std::vector<DMatch>&matches)"],"void gpu::BruteForceMatcher_GPU_base::matchSingle(const GpuMat&amp; query, const GpuMat&amp; train, GpuMat&amp; trainIdx, GpuMat&amp; distance, const GpuMat&amp; mask , Stream&amp; stream)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::matchSingle(const GpuMat& query, const GpuMat& train, GpuMat& trainIdx, GpuMat& distance, const GpuMat& mask , Stream& stream)"],"void gpu::BruteForceMatcher_GPU_base::radiusMatch(const GpuMat&amp; query, const GpuMat&amp; train, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, float maxDistance, const GpuMat&amp; mask , bool compactResult)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::radiusMatch(const GpuMat& query, const GpuMat& train, std::vector< std::vector<DMatch> >&matches, float maxDistance, const GpuMat& mask , bool compactResult)"],"void gpu::BruteForceMatcher_GPU_base::radiusMatch(const GpuMat&amp; query, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, float maxDistance, const std::vector&lt;GpuMat&gt;&amp; masks , bool compactResult)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::radiusMatch(const GpuMat& query, std::vector< std::vector<DMatch> >&matches, float maxDistance, const std::vector<GpuMat>& masks , bool compactResult)"],"void gpu::BruteForceMatcher_GPU_base::radiusMatchCollection(const GpuMat&amp; query, GpuMat&amp; trainIdx, GpuMat&amp; imgIdx, GpuMat&amp; distance, GpuMat&amp; nMatches, float maxDistance, const std::vector&lt;GpuMat&gt;&amp; masks , Stream&amp; stream)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::radiusMatchCollection(const GpuMat& query, GpuMat& trainIdx, GpuMat& imgIdx, GpuMat& distance, GpuMat& nMatches, float maxDistance, const std::vector<GpuMat>& masks , Stream& stream)"],"void gpu::BruteForceMatcher_GPU_base::radiusMatchConvert(const Mat&amp; trainIdx, const Mat&amp; distance, const Mat&amp; nMatches, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, bool compactResult)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::radiusMatchConvert(const Mat& trainIdx, const Mat& distance, const Mat& nMatches, std::vector< std::vector<DMatch> >&matches, bool compactResult)"],"void gpu::BruteForceMatcher_GPU_base::radiusMatchConvert(const Mat&amp; trainIdx, const Mat&amp; imgIdx, const Mat&amp; distance, const Mat&amp; nMatches, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp; matches, bool compactResult)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::radiusMatchConvert(const Mat& trainIdx, const Mat& imgIdx, const Mat& distance, const Mat& nMatches, std::vector< std::vector<DMatch> >& matches, bool compactResult)"],"void gpu::BruteForceMatcher_GPU_base::radiusMatchDownload(const GpuMat&amp; trainIdx, const GpuMat&amp; distance, const GpuMat&amp; nMatches, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, bool compactResult)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::radiusMatchDownload(const GpuMat& trainIdx, const GpuMat& distance, const GpuMat& nMatches, std::vector< std::vector<DMatch> >&matches, bool compactResult)"],"void gpu::BruteForceMatcher_GPU_base::radiusMatchDownload(const GpuMat&amp; trainIdx, const GpuMat&amp; imgIdx, const GpuMat&amp; distance, const GpuMat&amp; nMatches, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp; matches, bool compactResult)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::radiusMatchDownload(const GpuMat& trainIdx, const GpuMat& imgIdx, const GpuMat& distance, const GpuMat& nMatches, std::vector< std::vector<DMatch> >& matches, bool compactResult)"],"void gpu::BruteForceMatcher_GPU_base::radiusMatchSingle(const GpuMat&amp; query, const GpuMat&amp; train, GpuMat&amp; trainIdx, GpuMat&amp; distance, GpuMat&amp; nMatches, float maxDistance, const GpuMat&amp; mask , Stream&amp; stream)":[139,2,1,"void gpu::BruteForceMatcher_GPU_base::radiusMatchSingle(const GpuMat& query, const GpuMat& train, GpuMat& trainIdx, GpuMat& distance, GpuMat& nMatches, float maxDistance, const GpuMat& mask , Stream& stream)"],"void gpu::Canny(const GpuMat&amp; dx, const GpuMat&amp; dy, CannyBuf&amp; buf, GpuMat&amp; edges, double low_thresh, double high_thresh, bool L2gradient)":[142,2,1,"void gpu::Canny(const GpuMat& dx, const GpuMat& dy, CannyBuf& buf, GpuMat& edges, double low_thresh, double high_thresh, bool L2gradient)"],"void gpu::Canny(const GpuMat&amp; dx, const GpuMat&amp; dy, GpuMat&amp; edges, double low_thresh, double high_thresh, bool L2gradient)":[142,2,1,"void gpu::Canny(const GpuMat& dx, const GpuMat& dy, GpuMat& edges, double low_thresh, double high_thresh, bool L2gradient)"],"void gpu::Canny(const GpuMat&amp; image, CannyBuf&amp; buf, GpuMat&amp; edges, double low_thresh, double high_thresh, int apperture_size , bool L2gradient)":[142,2,1,"void gpu::Canny(const GpuMat& image, CannyBuf& buf, GpuMat& edges, double low_thresh, double high_thresh, int apperture_size , bool L2gradient)"],"void gpu::Canny(const GpuMat&amp; image, GpuMat&amp; edges, double low_thresh, double high_thresh, int apperture_size , bool L2gradient)":[142,2,1,"void gpu::Canny(const GpuMat& image, GpuMat& edges, double low_thresh, double high_thresh, int apperture_size , bool L2gradient)"],"void gpu::CascadeClassifier_GPU::release()":[146,2,1,""],"void gpu::DisparityBilateralFilter::operator ()(const GpuMat&amp; disparity, const GpuMat&amp; image, GpuMat&amp; dst, Stream&amp; stream)":[137,2,1,"void gpu::DisparityBilateralFilter::operator ()(const GpuMat& disparity, const GpuMat& image, GpuMat& dst, Stream& stream)"],"void gpu::FAST_GPU::convertKeypoints(const Mat&amp; h_keypoints, std::vector&lt;KeyPoint&gt;&amp; keypoints)":[139,2,1,"void gpu::FAST_GPU::convertKeypoints(const Mat& h_keypoints, std::vector<KeyPoint>& keypoints)"],"void gpu::FAST_GPU::downloadKeypoints(const GpuMat&amp; d_keypoints, std::vector&lt;KeyPoint&gt;&amp; keypoints)":[139,2,1,"void gpu::FAST_GPU::downloadKeypoints(const GpuMat& d_keypoints, std::vector<KeyPoint>& keypoints)"],"void gpu::FAST_GPU::operator ()(const GpuMat&amp; image, const GpuMat&amp; mask, GpuMat&amp; keypoints)":[139,2,1,"void gpu::FAST_GPU::operator ()(const GpuMat& image, const GpuMat& mask, GpuMat& keypoints)"],"void gpu::FAST_GPU::operator ()(const GpuMat&amp; image, const GpuMat&amp; mask, std::vector&lt;KeyPoint&gt;&amp; keypoints)":[139,2,1,"void gpu::FAST_GPU::operator ()(const GpuMat& image, const GpuMat& mask, std::vector<KeyPoint>& keypoints)"],"void gpu::FAST_GPU::release()":[139,2,1,""],"void gpu::FGDStatModel::create(const cv::gpu::GpuMat&amp; firstFrame, const Params&amp; params)":[149,2,1,"void gpu::FGDStatModel::create(const cv::gpu::GpuMat& firstFrame, const Params& params)"],"void gpu::FGDStatModel::release()":[149,2,1,""],"void gpu::FarnebackOpticalFlow::operator ()(const GpuMat &amp;frame0, const GpuMat &amp;frame1, GpuMat &amp;flowx, GpuMat &amp;flowy, Stream &amp;s)":[149,2,1,"void gpu::FarnebackOpticalFlow::operator ()(const GpuMat &frame0, const GpuMat &frame1, GpuMat &flowx, GpuMat &flowy, Stream &s)"],"void gpu::FarnebackOpticalFlow::releaseMemory()":[149,2,1,""],"void gpu::FastNonLocalMeansDenoising::labMethod(const GpuMat&amp; src, GpuMat&amp; dst, float h_luminance, float h_color, int search_window , int block_size , Stream&amp; s)":[142,2,1,"void gpu::FastNonLocalMeansDenoising::labMethod(const GpuMat& src, GpuMat& dst, float h_luminance, float h_color, int search_window , int block_size , Stream& s)"],"void gpu::FastNonLocalMeansDenoising::simpleMethod(const GpuMat&amp; src, GpuMat&amp; dst, float h, int search_window , int block_size , Stream&amp; s)":[142,2,1,"void gpu::FastNonLocalMeansDenoising::simpleMethod(const GpuMat& src, GpuMat& dst, float h, int search_window , int block_size , Stream& s)"],"void gpu::GMG_GPU::initialize(Size frameSize, float min , float max)":[149,2,1,""],"void gpu::GMG_GPU::operator ()(const GpuMat&amp; frame, GpuMat&amp; fgmask, float learningRate, Stream&amp; stream)":[149,2,1,"void gpu::GMG_GPU::operator ()(const GpuMat& frame, GpuMat& fgmask, float learningRate, Stream& stream)"],"void gpu::GMG_GPU::release()":[149,2,1,""],"void gpu::GaussianBlur(const GpuMat&amp; src, GpuMat&amp; dst, Size ksize, GpuMat&amp; buf, double sigma1, double sigma2, int rowBorderType, int columnBorderType, Stream&amp; stream)":[141,2,1,"void gpu::GaussianBlur(const GpuMat& src, GpuMat& dst, Size ksize, GpuMat& buf, double sigma1, double sigma2, int rowBorderType, int columnBorderType, Stream& stream)"],"void gpu::GaussianBlur(const GpuMat&amp; src, GpuMat&amp; dst, Size ksize, double sigma1, double sigma2, int rowBorderType, int columnBorderType)":[141,2,1,"void gpu::GaussianBlur(const GpuMat& src, GpuMat& dst, Size ksize, double sigma1, double sigma2, int rowBorderType, int columnBorderType)"],"void gpu::GoodFeaturesToTrackDetector_GPU::operator ()(const GpuMat&amp; image, GpuMat&amp; corners, const GpuMat&amp; mask)":[149,2,1,"void gpu::GoodFeaturesToTrackDetector_GPU::operator ()(const GpuMat& image, GpuMat& corners, const GpuMat& mask)"],"void gpu::GoodFeaturesToTrackDetector_GPU::releaseMemory()":[149,2,1,""],"void gpu::HOGDescriptor::detect(const GpuMat&amp; img, vector&lt;Point&gt;&amp; found_locations, double hit_threshold, Size win_stride, Size padding)":[146,2,1,"void gpu::HOGDescriptor::detect(const GpuMat& img, vector<Point>& found_locations, double hit_threshold, Size win_stride, Size padding)"],"void gpu::HOGDescriptor::detectMultiScale(const GpuMat&amp; img, vector&lt;Rect&gt;&amp; found_locations, double hit_threshold, Size win_stride, Size padding, double scale0, int group_threshold)":[146,2,1,"void gpu::HOGDescriptor::detectMultiScale(const GpuMat& img, vector<Rect>& found_locations, double hit_threshold, Size win_stride, Size padding, double scale0, int group_threshold)"],"void gpu::HOGDescriptor::getDescriptors(const GpuMat&amp; img, Size win_stride, GpuMat&amp; descriptors, int descr_format)":[146,2,1,"void gpu::HOGDescriptor::getDescriptors(const GpuMat& img, Size win_stride, GpuMat& descriptors, int descr_format)"],"void gpu::HOGDescriptor::setSVMDetector(const vector&lt;float&gt;&amp; detector)":[146,2,1,"void gpu::HOGDescriptor::setSVMDetector(const vector<float>& detector)"],"void gpu::HoughCircles(const GpuMat&amp; src, GpuMat&amp; circles, HoughCirclesBuf&amp; buf, int method, float dp, float minDist, int cannyThreshold, int votesThreshold, int minRadius, int maxRadius, int maxCircles)":[142,2,1,"void gpu::HoughCircles(const GpuMat& src, GpuMat& circles, HoughCirclesBuf& buf, int method, float dp, float minDist, int cannyThreshold, int votesThreshold, int minRadius, int maxRadius, int maxCircles)"],"void gpu::HoughCircles(const GpuMat&amp; src, GpuMat&amp; circles, int method, float dp, float minDist, int cannyThreshold, int votesThreshold, int minRadius, int maxRadius, int maxCircles)":[142,2,1,"void gpu::HoughCircles(const GpuMat& src, GpuMat& circles, int method, float dp, float minDist, int cannyThreshold, int votesThreshold, int minRadius, int maxRadius, int maxCircles)"],"void gpu::HoughCirclesDownload(const GpuMat&amp; d_circles, OutputArray h_circles)":[142,2,1,"void gpu::HoughCirclesDownload(const GpuMat& d_circles, OutputArray h_circles)"],"void gpu::HoughLines(const GpuMat&amp; src, GpuMat&amp; lines, HoughLinesBuf&amp; buf, float rho, float theta, int threshold, bool doSort , int maxLines)":[142,2,1,"void gpu::HoughLines(const GpuMat& src, GpuMat& lines, HoughLinesBuf& buf, float rho, float theta, int threshold, bool doSort , int maxLines)"],"void gpu::HoughLines(const GpuMat&amp; src, GpuMat&amp; lines, float rho, float theta, int threshold, bool doSort , int maxLines)":[142,2,1,"void gpu::HoughLines(const GpuMat& src, GpuMat& lines, float rho, float theta, int threshold, bool doSort , int maxLines)"],"void gpu::HoughLinesDownload(const GpuMat&amp; d_lines, OutputArray h_lines, OutputArray h_votes)":[142,2,1,"void gpu::HoughLinesDownload(const GpuMat& d_lines, OutputArray h_lines, OutputArray h_votes)"],"void gpu::LUT(const GpuMat&amp; src, const Mat&amp; lut, GpuMat&amp; dst, Stream&amp; stream)":[147,2,1,"void gpu::LUT(const GpuMat& src, const Mat& lut, GpuMat& dst, Stream& stream)"],"void gpu::Laplacian(const GpuMat&amp; src, GpuMat&amp; dst, int ddepth, int ksize , double scale , int borderType , Stream&amp; stream)":[141,2,1,"void gpu::Laplacian(const GpuMat& src, GpuMat& dst, int ddepth, int ksize , double scale , int borderType , Stream& stream)"],"void gpu::MOG2_GPU::getBackgroundImage(GpuMat&amp; backgroundImage, Stream&amp; stream) const":[149,2,1,"void gpu::MOG2_GPU::getBackgroundImage(GpuMat& backgroundImage, Stream& stream) const"],"void gpu::MOG2_GPU::operator()(const GpuMat&amp; frame, GpuMat&amp; fgmask, float learningRate, Stream&amp; stream)":[149,2,1,"void gpu::MOG2_GPU::operator()(const GpuMat& frame, GpuMat& fgmask, float learningRate, Stream& stream)"],"void gpu::MOG2_GPU::release()":[149,2,1,""],"void gpu::MOG_GPU::getBackgroundImage(GpuMat&amp; backgroundImage, Stream&amp; stream) const":[149,2,1,"void gpu::MOG_GPU::getBackgroundImage(GpuMat& backgroundImage, Stream& stream) const"],"void gpu::MOG_GPU::operator()(const GpuMat&amp; frame, GpuMat&amp; fgmask, float learningRate , Stream&amp; stream)":[149,2,1,"void gpu::MOG_GPU::operator()(const GpuMat& frame, GpuMat& fgmask, float learningRate , Stream& stream)"],"void gpu::MOG_GPU::release()":[149,2,1,""],"void gpu::ORB_GPU::convertKeyPoints(Mat&amp; d_keypoints, std::vector&lt;KeyPoint&gt;&amp; keypoints)":[139,2,1,"void gpu::ORB_GPU::convertKeyPoints(Mat& d_keypoints, std::vector<KeyPoint>& keypoints)"],"void gpu::ORB_GPU::downloadKeyPoints(GpuMat&amp; d_keypoints, std::vector&lt;KeyPoint&gt;&amp; keypoints)":[139,2,1,"void gpu::ORB_GPU::downloadKeyPoints(GpuMat& d_keypoints, std::vector<KeyPoint>& keypoints)"],"void gpu::ORB_GPU::operator()(const GpuMat&amp; image, const GpuMat&amp; mask, GpuMat&amp; keypoints)":[139,2,1,"void gpu::ORB_GPU::operator()(const GpuMat& image, const GpuMat& mask, GpuMat& keypoints)"],"void gpu::ORB_GPU::operator()(const GpuMat&amp; image, const GpuMat&amp; mask, GpuMat&amp; keypoints, GpuMat&amp; descriptors)":[139,2,1,"void gpu::ORB_GPU::operator()(const GpuMat& image, const GpuMat& mask, GpuMat& keypoints, GpuMat& descriptors)"],"void gpu::ORB_GPU::operator()(const GpuMat&amp; image, const GpuMat&amp; mask, std::vector&lt;KeyPoint&gt;&amp; keypoints)":[139,2,1,"void gpu::ORB_GPU::operator()(const GpuMat& image, const GpuMat& mask, std::vector<KeyPoint>& keypoints)"],"void gpu::ORB_GPU::operator()(const GpuMat&amp; image, const GpuMat&amp; mask, std::vector&lt;KeyPoint&gt;&amp; keypoints, GpuMat&amp; descriptors)":[139,2,1,"void gpu::ORB_GPU::operator()(const GpuMat& image, const GpuMat& mask, std::vector<KeyPoint>& keypoints, GpuMat& descriptors)"],"void gpu::ORB_GPU::release()":[139,2,1,""],"void gpu::PyrLKOpticalFlow::dense(const GpuMat&amp; prevImg, const GpuMat&amp; nextImg, GpuMat&amp; u, GpuMat&amp; v, GpuMat* err)":[149,2,1,"void gpu::PyrLKOpticalFlow::dense(const GpuMat& prevImg, const GpuMat& nextImg, GpuMat& u, GpuMat& v, GpuMat* err)"],"void gpu::PyrLKOpticalFlow::releaseMemory()":[149,2,1,""],"void gpu::PyrLKOpticalFlow::sparse(const GpuMat&amp; prevImg, const GpuMat&amp; nextImg, const GpuMat&amp; prevPts, GpuMat&amp; nextPts, GpuMat&amp; status, GpuMat* err)":[149,2,1,"void gpu::PyrLKOpticalFlow::sparse(const GpuMat& prevImg, const GpuMat& nextImg, const GpuMat& prevPts, GpuMat& nextPts, GpuMat& status, GpuMat* err)"],"void gpu::Scharr(const GpuMat&amp; src, GpuMat&amp; dst, int ddepth, int dx, int dy, GpuMat&amp; buf, double scale, int rowBorderType, int columnBorderType, Stream&amp; stream)":[141,2,1,"void gpu::Scharr(const GpuMat& src, GpuMat& dst, int ddepth, int dx, int dy, GpuMat& buf, double scale, int rowBorderType, int columnBorderType, Stream& stream)"],"void gpu::Scharr(const GpuMat&amp; src, GpuMat&amp; dst, int ddepth, int dx, int dy, double scale, int rowBorderType, int columnBorderType)":[141,2,1,"void gpu::Scharr(const GpuMat& src, GpuMat& dst, int ddepth, int dx, int dy, double scale, int rowBorderType, int columnBorderType)"],"void gpu::Sobel(const GpuMat&amp; src, GpuMat&amp; dst, int ddepth, int dx, int dy, GpuMat&amp; buf, int ksize, double scale, int rowBorderType, int columnBorderType, Stream&amp; stream)":[141,2,1,"void gpu::Sobel(const GpuMat& src, GpuMat& dst, int ddepth, int dx, int dy, GpuMat& buf, int ksize, double scale, int rowBorderType, int columnBorderType, Stream& stream)"],"void gpu::Sobel(const GpuMat&amp; src, GpuMat&amp; dst, int ddepth, int dx, int dy, int ksize, double scale, int rowBorderType, int columnBorderType)":[141,2,1,"void gpu::Sobel(const GpuMat& src, GpuMat& dst, int ddepth, int dx, int dy, int ksize, double scale, int rowBorderType, int columnBorderType)"],"void gpu::StereoBM_GPU::operator ()(const GpuMat&amp; left, const GpuMat&amp; right, GpuMat&amp; disparity, Stream&amp; stream)":[137,2,1,"void gpu::StereoBM_GPU::operator ()(const GpuMat& left, const GpuMat& right, GpuMat& disparity, Stream& stream)"],"void gpu::StereoBeliefPropagation::estimateRecommendedParams(int width, int height, int&amp; ndisp, int&amp; iters, int&amp; levels)":[137,2,1,"void gpu::StereoBeliefPropagation::estimateRecommendedParams(int width, int height, int& ndisp, int& iters, int& levels)"],"void gpu::StereoBeliefPropagation::operator ()(const GpuMat&amp; data, GpuMat&amp; disparity, Stream&amp; stream)":[137,2,1,"void gpu::StereoBeliefPropagation::operator ()(const GpuMat& data, GpuMat& disparity, Stream& stream)"],"void gpu::StereoBeliefPropagation::operator ()(const GpuMat&amp; left, const GpuMat&amp; right, GpuMat&amp; disparity, Stream&amp; stream)":[137,2,1,"void gpu::StereoBeliefPropagation::operator ()(const GpuMat& left, const GpuMat& right, GpuMat& disparity, Stream& stream)"],"void gpu::StereoConstantSpaceBP::estimateRecommendedParams(int width, int height, int&amp; ndisp, int&amp; iters, int&amp; levels, int&amp; nr_plane)":[137,2,1,"void gpu::StereoConstantSpaceBP::estimateRecommendedParams(int width, int height, int& ndisp, int& iters, int& levels, int& nr_plane)"],"void gpu::StereoConstantSpaceBP::operator ()(const GpuMat&amp; left, const GpuMat&amp; right, GpuMat&amp; disparity, Stream&amp; stream)":[137,2,1,"void gpu::StereoConstantSpaceBP::operator ()(const GpuMat& left, const GpuMat& right, GpuMat& disparity, Stream& stream)"],"void gpu::Stream::enqueueConvert(const GpuMat&amp; src, GpuMat&amp; dst, int dtype, double a, double b)":[138,2,1,"void gpu::Stream::enqueueConvert(const GpuMat& src, GpuMat& dst, int dtype, double a, double b)"],"void gpu::Stream::enqueueCopy(const GpuMat&amp; src, GpuMat&amp; dst)":[138,2,1,"void gpu::Stream::enqueueCopy(const GpuMat& src, GpuMat& dst)"],"void gpu::Stream::enqueueDownload(const GpuMat&amp; src, CudaMem&amp; dst)":[138,2,1,"void gpu::Stream::enqueueDownload(const GpuMat& src, CudaMem& dst)"],"void gpu::Stream::enqueueDownload(const GpuMat&amp; src, Mat&amp; dst)":[138,2,1,"void gpu::Stream::enqueueDownload(const GpuMat& src, Mat& dst)"],"void gpu::Stream::enqueueHostCallback(StreamCallback callback, void* userData)":[138,2,1,""],"void gpu::Stream::enqueueMemSet(GpuMat&amp; src, Scalar val)":[138,2,1,"void gpu::Stream::enqueueMemSet(GpuMat& src, Scalar val)"],"void gpu::Stream::enqueueMemSet(GpuMat&amp; src, Scalar val, const GpuMat&amp; mask)":[138,2,1,"void gpu::Stream::enqueueMemSet(GpuMat& src, Scalar val, const GpuMat& mask)"],"void gpu::Stream::enqueueUpload(const CudaMem&amp; src, GpuMat&amp; dst)":[138,2,1,"void gpu::Stream::enqueueUpload(const CudaMem& src, GpuMat& dst)"],"void gpu::Stream::enqueueUpload(const Mat&amp; src, GpuMat&amp; dst)":[138,2,1,"void gpu::Stream::enqueueUpload(const Mat& src, GpuMat& dst)"],"void gpu::Stream::waitForCompletion()":[138,2,1,""],"void gpu::VideoReader_GPU::close()":[149,2,1,""],"void gpu::VideoReader_GPU::dumpFormat(std::ostream&amp; st)":[149,2,1,"void gpu::VideoReader_GPU::dumpFormat(std::ostream& st)"],"void gpu::VideoReader_GPU::open(const cv::Ptr&lt;VideoSource&gt;&amp; source)":[149,2,1,"void gpu::VideoReader_GPU::open(const cv::Ptr<VideoSource>& source)"],"void gpu::VideoReader_GPU::open(const std::string&amp; filename)":[149,2,1,"void gpu::VideoReader_GPU::open(const std::string& filename)"],"void gpu::VideoWriter_GPU::EncoderParams::load(const std::string&amp; configFile)":[149,2,1,"void gpu::VideoWriter_GPU::EncoderParams::load(const std::string& configFile)"],"void gpu::VideoWriter_GPU::EncoderParams::save(const std::string&amp; configFile) const":[149,2,1,"void gpu::VideoWriter_GPU::EncoderParams::save(const std::string& configFile) const"],"void gpu::VideoWriter_GPU::close()":[149,2,1,""],"void gpu::VideoWriter_GPU::open(const cv::Ptr&lt;EncoderCallBack&gt;&amp; encoderCallback, cv::Size frameSize, double fps, SurfaceFormat format)":[149,2,1,"void gpu::VideoWriter_GPU::open(const cv::Ptr<EncoderCallBack>& encoderCallback, cv::Size frameSize, double fps, SurfaceFormat format)"],"void gpu::VideoWriter_GPU::open(const cv::Ptr&lt;EncoderCallBack&gt;&amp; encoderCallback, cv::Size frameSize, double fps, const EncoderParams&amp; params, SurfaceFormat format)":[149,2,1,"void gpu::VideoWriter_GPU::open(const cv::Ptr<EncoderCallBack>& encoderCallback, cv::Size frameSize, double fps, const EncoderParams& params, SurfaceFormat format)"],"void gpu::VideoWriter_GPU::open(const std::string&amp; fileName, cv::Size frameSize, double fps, SurfaceFormat format)":[149,2,1,"void gpu::VideoWriter_GPU::open(const std::string& fileName, cv::Size frameSize, double fps, SurfaceFormat format)"],"void gpu::VideoWriter_GPU::open(const std::string&amp; fileName, cv::Size frameSize, double fps, const EncoderParams&amp; params, SurfaceFormat format)":[149,2,1,"void gpu::VideoWriter_GPU::open(const std::string& fileName, cv::Size frameSize, double fps, const EncoderParams& params, SurfaceFormat format)"],"void gpu::VideoWriter_GPU::write(const cv::gpu::GpuMat&amp; image, bool lastFrame)":[149,2,1,"void gpu::VideoWriter_GPU::write(const cv::gpu::GpuMat& image, bool lastFrame)"],"void gpu::abs(const GpuMat&amp; src, GpuMat&amp; dst, Stream&amp; stream)":[148,2,1,"void gpu::abs(const GpuMat& src, GpuMat& dst, Stream& stream)"],"void gpu::absdiff(const GpuMat&amp; a, const GpuMat&amp; b, GpuMat&amp; c, Stream&amp; stream)":[148,2,1,"void gpu::absdiff(const GpuMat& a, const GpuMat& b, GpuMat& c, Stream& stream)"],"void gpu::absdiff(const GpuMat&amp; a, const Scalar&amp; s, GpuMat&amp; c, Stream&amp; stream)":[148,2,1,"void gpu::absdiff(const GpuMat& a, const Scalar& s, GpuMat& c, Stream& stream)"],"void gpu::add(const GpuMat&amp; a, const GpuMat&amp; b, GpuMat&amp; c, const GpuMat&amp; mask, int dtype, Stream&amp; stream)":[148,2,1,"void gpu::add(const GpuMat& a, const GpuMat& b, GpuMat& c, const GpuMat& mask, int dtype, Stream& stream)"],"void gpu::add(const GpuMat&amp; a, const Scalar&amp; sc, GpuMat&amp; c, const GpuMat&amp; mask, int dtype, Stream&amp; stream)":[148,2,1,"void gpu::add(const GpuMat& a, const Scalar& sc, GpuMat& c, const GpuMat& mask, int dtype, Stream& stream)"],"void gpu::addWeighted(const GpuMat&amp; src1, double alpha, const GpuMat&amp; src2, double beta, double gamma, GpuMat&amp; dst, int dtype , Stream&amp; stream)":[148,2,1,"void gpu::addWeighted(const GpuMat& src1, double alpha, const GpuMat& src2, double beta, double gamma, GpuMat& dst, int dtype , Stream& stream)"],"void gpu::alphaComp(const GpuMat&amp; img1, const GpuMat&amp; img2, GpuMat&amp; dst, int alpha_op, Stream&amp; stream)":[142,2,1,"void gpu::alphaComp(const GpuMat& img1, const GpuMat& img2, GpuMat& dst, int alpha_op, Stream& stream)"],"void gpu::bilateralFilter(const GpuMat&amp; src, GpuMat&amp; dst, int kernel_size, float sigma_color, float sigma_spatial, int borderMode, Stream&amp; stream)":[142,2,1,"void gpu::bilateralFilter(const GpuMat& src, GpuMat& dst, int kernel_size, float sigma_color, float sigma_spatial, int borderMode, Stream& stream)"],"void gpu::bitwise_and(const GpuMat&amp; src1, const GpuMat&amp; src2, GpuMat&amp; dst, const GpuMat&amp; mask, Stream&amp; stream)":[148,2,1,"void gpu::bitwise_and(const GpuMat& src1, const GpuMat& src2, GpuMat& dst, const GpuMat& mask, Stream& stream)"],"void gpu::bitwise_and(const GpuMat&amp; src1, const Scalar&amp; sc, GpuMat&amp; dst, Stream&amp; stream)":[148,2,1,"void gpu::bitwise_and(const GpuMat& src1, const Scalar& sc, GpuMat& dst, Stream& stream)"],"void gpu::bitwise_not(const GpuMat&amp; src, GpuMat&amp; dst, const GpuMat&amp; mask, Stream&amp; stream)":[148,2,1,"void gpu::bitwise_not(const GpuMat& src, GpuMat& dst, const GpuMat& mask, Stream& stream)"],"void gpu::bitwise_or(const GpuMat&amp; src1, const GpuMat&amp; src2, GpuMat&amp; dst, const GpuMat&amp; mask, Stream&amp; stream)":[148,2,1,"void gpu::bitwise_or(const GpuMat& src1, const GpuMat& src2, GpuMat& dst, const GpuMat& mask, Stream& stream)"],"void gpu::bitwise_or(const GpuMat&amp; src1, const Scalar&amp; sc, GpuMat&amp; dst, Stream&amp; stream)":[148,2,1,"void gpu::bitwise_or(const GpuMat& src1, const Scalar& sc, GpuMat& dst, Stream& stream)"],"void gpu::bitwise_xor(const GpuMat&amp; src1, const GpuMat&amp; src2, GpuMat&amp; dst, const GpuMat&amp; mask, Stream&amp; stream)":[148,2,1,"void gpu::bitwise_xor(const GpuMat& src1, const GpuMat& src2, GpuMat& dst, const GpuMat& mask, Stream& stream)"],"void gpu::bitwise_xor(const GpuMat&amp; src1, const Scalar&amp; sc, GpuMat&amp; dst, Stream&amp; stream)":[148,2,1,"void gpu::bitwise_xor(const GpuMat& src1, const Scalar& sc, GpuMat& dst, Stream& stream)"],"void gpu::blendLinear(const GpuMat&amp; img1, const GpuMat&amp; img2, const GpuMat&amp; weights1, const GpuMat&amp; weights2, GpuMat&amp; result, Stream&amp; stream)":[142,2,1,"void gpu::blendLinear(const GpuMat& img1, const GpuMat& img2, const GpuMat& weights1, const GpuMat& weights2, GpuMat& result, Stream& stream)"],"void gpu::blur(const GpuMat&amp; src, GpuMat&amp; dst, Size ksize, Point anchor , Stream&amp; stream)":[141,2,1,"void gpu::blur(const GpuMat& src, GpuMat& dst, Size ksize, Point anchor , Stream& stream)"],"void gpu::boxFilter(const GpuMat&amp; src, GpuMat&amp; dst, int ddepth, Size ksize, Point anchor , Stream&amp; stream)":[141,2,1,"void gpu::boxFilter(const GpuMat& src, GpuMat& dst, int ddepth, Size ksize, Point anchor , Stream& stream)"],"void gpu::buildWarpAffineMaps(const Mat&amp; M, bool inverse, Size dsize, GpuMat&amp; xmap, GpuMat&amp; ymap, Stream&amp; stream)":[142,2,1,"void gpu::buildWarpAffineMaps(const Mat& M, bool inverse, Size dsize, GpuMat& xmap, GpuMat& ymap, Stream& stream)"],"void gpu::buildWarpCylindricalMaps(Size src_size, Rect dst_roi, const Mat &amp; K, const Mat&amp; R, float scale, GpuMat&amp; map_x, GpuMat&amp; map_y, Stream&amp; stream)":[142,2,1,"void gpu::buildWarpCylindricalMaps(Size src_size, Rect dst_roi, const Mat & K, const Mat& R, float scale, GpuMat& map_x, GpuMat& map_y, Stream& stream)"],"void gpu::buildWarpPlaneMaps(Size src_size, Rect dst_roi, const Mat &amp; K, const Mat&amp; R, const Mat &amp; T, float scale, GpuMat&amp; map_x, GpuMat&amp; map_y, Stream&amp; stream)":[142,2,1,"void gpu::buildWarpPlaneMaps(Size src_size, Rect dst_roi, const Mat & K, const Mat& R, const Mat & T, float scale, GpuMat& map_x, GpuMat& map_y, Stream& stream)"],"void gpu::buildWarpSphericalMaps(Size src_size, Rect dst_roi, const Mat &amp; K, const Mat&amp; R, float scale, GpuMat&amp; map_x, GpuMat&amp; map_y, Stream&amp; stream)":[142,2,1,"void gpu::buildWarpSphericalMaps(Size src_size, Rect dst_roi, const Mat & K, const Mat& R, float scale, GpuMat& map_x, GpuMat& map_y, Stream& stream)"],"void gpu::calcHist(const GpuMat&amp; src, GpuMat&amp; hist, GpuMat&amp; buf, Stream&amp; stream)":[142,2,1,"void gpu::calcHist(const GpuMat& src, GpuMat& hist, GpuMat& buf, Stream& stream)"],"void gpu::calcHist(const GpuMat&amp; src, GpuMat&amp; hist, Stream&amp; stream)":[142,2,1,"void gpu::calcHist(const GpuMat& src, GpuMat& hist, Stream& stream)"],"void gpu::cartToPolar(const GpuMat&amp; x, const GpuMat&amp; y, GpuMat&amp; magnitude, GpuMat&amp; angle, bool angleInDegrees, Stream&amp; stream)":[147,2,1,"void gpu::cartToPolar(const GpuMat& x, const GpuMat& y, GpuMat& magnitude, GpuMat& angle, bool angleInDegrees, Stream& stream)"],"void gpu::columnSum(const GpuMat&amp; src, GpuMat&amp; sum)":[142,2,1,"void gpu::columnSum(const GpuMat& src, GpuMat& sum)"],"void gpu::compare(const GpuMat&amp; a, Scalar sc, GpuMat&amp; c, int cmpop, Stream&amp; stream)":[148,2,1,"void gpu::compare(const GpuMat& a, Scalar sc, GpuMat& c, int cmpop, Stream& stream)"],"void gpu::compare(const GpuMat&amp; a, const GpuMat&amp; b, GpuMat&amp; c, int cmpop, Stream&amp; stream)":[148,2,1,"void gpu::compare(const GpuMat& a, const GpuMat& b, GpuMat& c, int cmpop, Stream& stream)"],"void gpu::convolve(const GpuMat&amp; image, const GpuMat&amp; templ, GpuMat&amp; result, bool ccorr)":[142,2,1,"void gpu::convolve(const GpuMat& image, const GpuMat& templ, GpuMat& result, bool ccorr)"],"void gpu::convolve(const GpuMat&amp; image, const GpuMat&amp; templ, GpuMat&amp; result, bool ccorr, ConvolveBuf&amp; buf, Stream&amp; stream)":[142,2,1,"void gpu::convolve(const GpuMat& image, const GpuMat& templ, GpuMat& result, bool ccorr, ConvolveBuf& buf, Stream& stream)"],"void gpu::copyMakeBorder(const GpuMat&amp; src, GpuMat&amp; dst, int top, int bottom, int left, int right, int borderType, const Scalar&amp; value , Stream&amp; stream)":[142,2,1,"void gpu::copyMakeBorder(const GpuMat& src, GpuMat& dst, int top, int bottom, int left, int right, int borderType, const Scalar& value , Stream& stream)"],"void gpu::cornerHarris(const GpuMat&amp; src, GpuMat&amp; dst, int blockSize, int ksize, double k, int borderType)":[142,2,1,"void gpu::cornerHarris(const GpuMat& src, GpuMat& dst, int blockSize, int ksize, double k, int borderType)"],"void gpu::cornerMinEigenVal(const GpuMat&amp; src, GpuMat&amp; dst, GpuMat&amp; Dx, GpuMat&amp; Dy, GpuMat&amp; buf, int blockSize, int ksize, int borderType, Stream&amp; stream)":[142,2,1,"void gpu::cornerMinEigenVal(const GpuMat& src, GpuMat& dst, GpuMat& Dx, GpuMat& Dy, GpuMat& buf, int blockSize, int ksize, int borderType, Stream& stream)"],"void gpu::cornerMinEigenVal(const GpuMat&amp; src, GpuMat&amp; dst, GpuMat&amp; Dx, GpuMat&amp; Dy, int blockSize, int ksize, int borderType)":[142,2,1,"void gpu::cornerMinEigenVal(const GpuMat& src, GpuMat& dst, GpuMat& Dx, GpuMat& Dy, int blockSize, int ksize, int borderType)"],"void gpu::cornerMinEigenVal(const GpuMat&amp; src, GpuMat&amp; dst, int blockSize, int ksize, int borderType)":[142,2,1,"void gpu::cornerMinEigenVal(const GpuMat& src, GpuMat& dst, int blockSize, int ksize, int borderType)"],"void gpu::createContinuous(Size size, int type, GpuMat&amp; m)":[138,2,1,"void gpu::createContinuous(Size size, int type, GpuMat& m)"],"void gpu::createContinuous(int rows, int cols, int type, GpuMat&amp; m)":[138,2,1,"void gpu::createContinuous(int rows, int cols, int type, GpuMat& m)"],"void gpu::cvtColor(const GpuMat&amp; src, GpuMat&amp; dst, int code, int dcn , Stream&amp; stream)":[142,2,1,"void gpu::cvtColor(const GpuMat& src, GpuMat& dst, int code, int dcn , Stream& stream)"],"void gpu::dft(const GpuMat&amp; src, GpuMat&amp; dst, Size dft_size, int flags, Stream&amp; stream)":[142,2,1,"void gpu::dft(const GpuMat& src, GpuMat& dst, Size dft_size, int flags, Stream& stream)"],"void gpu::dilate(const GpuMat&amp; src, GpuMat&amp; dst, const Mat&amp; kernel, GpuMat&amp; buf, Point anchor, int iterations, Stream&amp; stream)":[141,2,1,"void gpu::dilate(const GpuMat& src, GpuMat& dst, const Mat& kernel, GpuMat& buf, Point anchor, int iterations, Stream& stream)"],"void gpu::dilate(const GpuMat&amp; src, GpuMat&amp; dst, const Mat&amp; kernel, Point anchor, int iterations)":[141,2,1,"void gpu::dilate(const GpuMat& src, GpuMat& dst, const Mat& kernel, Point anchor, int iterations)"],"void gpu::divide(const GpuMat&amp; a, const GpuMat&amp; b, GpuMat&amp; c, double scale, int dtype, Stream&amp; stream)":[148,2,1,"void gpu::divide(const GpuMat& a, const GpuMat& b, GpuMat& c, double scale, int dtype, Stream& stream)"],"void gpu::divide(const GpuMat&amp; a, const Scalar&amp; sc, GpuMat&amp; c, double scale , int dtype , Stream&amp; stream)":[148,2,1,"void gpu::divide(const GpuMat& a, const Scalar& sc, GpuMat& c, double scale , int dtype , Stream& stream)"],"void gpu::divide(double scale, const GpuMat&amp; b, GpuMat&amp; c, int dtype, Stream&amp; stream)":[148,2,1,"void gpu::divide(double scale, const GpuMat& b, GpuMat& c, int dtype, Stream& stream)"],"void gpu::drawColorDisp(const GpuMat&amp; src_disp, GpuMat&amp; dst_disp, int ndisp, Stream&amp; stream)":[137,2,1,"void gpu::drawColorDisp(const GpuMat& src_disp, GpuMat& dst_disp, int ndisp, Stream& stream)"],"void gpu::ensureSizeIsEnough(Size size, int type, GpuMat&amp; m)":[138,2,1,"void gpu::ensureSizeIsEnough(Size size, int type, GpuMat& m)"],"void gpu::ensureSizeIsEnough(int rows, int cols, int type, GpuMat&amp; m)":[138,2,1,"void gpu::ensureSizeIsEnough(int rows, int cols, int type, GpuMat& m)"],"void gpu::equalizeHist(const GpuMat&amp; src, GpuMat&amp; dst, GpuMat&amp; hist, GpuMat&amp; buf, Stream&amp; stream)":[142,2,1,"void gpu::equalizeHist(const GpuMat& src, GpuMat& dst, GpuMat& hist, GpuMat& buf, Stream& stream)"],"void gpu::equalizeHist(const GpuMat&amp; src, GpuMat&amp; dst, GpuMat&amp; hist, Stream&amp; stream)":[142,2,1,"void gpu::equalizeHist(const GpuMat& src, GpuMat& dst, GpuMat& hist, Stream& stream)"],"void gpu::equalizeHist(const GpuMat&amp; src, GpuMat&amp; dst, Stream&amp; stream)":[142,2,1,"void gpu::equalizeHist(const GpuMat& src, GpuMat& dst, Stream& stream)"],"void gpu::erode(const GpuMat&amp; src, GpuMat&amp; dst, const Mat&amp; kernel, GpuMat&amp; buf, Point anchor, int iterations, Stream&amp; stream)":[141,2,1,"void gpu::erode(const GpuMat& src, GpuMat& dst, const Mat& kernel, GpuMat& buf, Point anchor, int iterations, Stream& stream)"],"void gpu::erode(const GpuMat&amp; src, GpuMat&amp; dst, const Mat&amp; kernel, Point anchor, int iterations)":[141,2,1,"void gpu::erode(const GpuMat& src, GpuMat& dst, const Mat& kernel, Point anchor, int iterations)"],"void gpu::evenLevels(GpuMat&amp; levels, int nLevels, int lowerLevel, int upperLevel)":[142,2,1,"void gpu::evenLevels(GpuMat& levels, int nLevels, int lowerLevel, int upperLevel)"],"void gpu::exp(const GpuMat&amp; a, GpuMat&amp; b, Stream&amp; stream)":[148,2,1,"void gpu::exp(const GpuMat& a, GpuMat& b, Stream& stream)"],"void gpu::filter2D(const GpuMat&amp; src, GpuMat&amp; dst, int ddepth, const Mat&amp; kernel, Point anchor, int borderType , Stream&amp; stream)":[141,2,1,"void gpu::filter2D(const GpuMat& src, GpuMat& dst, int ddepth, const Mat& kernel, Point anchor, int borderType , Stream& stream)"],"void gpu::flip(const GpuMat&amp; a, GpuMat&amp; b, int flipCode, Stream&amp; stream)":[147,2,1,"void gpu::flip(const GpuMat& a, GpuMat& b, int flipCode, Stream& stream)"],"void gpu::gemm(const GpuMat&amp; src1, const GpuMat&amp; src2, double alpha, const GpuMat&amp; src3, double beta, GpuMat&amp; dst, int flags , Stream&amp; stream)":[147,2,1,"void gpu::gemm(const GpuMat& src1, const GpuMat& src2, double alpha, const GpuMat& src3, double beta, GpuMat& dst, int flags , Stream& stream)"],"void gpu::histEven(const GpuMat&amp; src, GpuMat hist[4], GpuMat&amp; buf, int histSize[4], int lowerLevel[4], int upperLevel[4], Stream&amp; stream)":[142,2,1,"void gpu::histEven(const GpuMat& src, GpuMat hist[4], GpuMat& buf, int histSize[4], int lowerLevel[4], int upperLevel[4], Stream& stream)"],"void gpu::histEven(const GpuMat&amp; src, GpuMat hist[4], int histSize[4], int lowerLevel[4], int upperLevel[4], Stream&amp; stream)":[142,2,1,"void gpu::histEven(const GpuMat& src, GpuMat hist[4], int histSize[4], int lowerLevel[4], int upperLevel[4], Stream& stream)"],"void gpu::histEven(const GpuMat&amp; src, GpuMat&amp; hist, GpuMat&amp; buf, int histSize, int lowerLevel, int upperLevel, Stream&amp; stream)":[142,2,1,"void gpu::histEven(const GpuMat& src, GpuMat& hist, GpuMat& buf, int histSize, int lowerLevel, int upperLevel, Stream& stream)"],"void gpu::histEven(const GpuMat&amp; src, GpuMat&amp; hist, int histSize, int lowerLevel, int upperLevel, Stream&amp; stream)":[142,2,1,"void gpu::histEven(const GpuMat& src, GpuMat& hist, int histSize, int lowerLevel, int upperLevel, Stream& stream)"],"void gpu::histRange(const GpuMat&amp; src, GpuMat&amp; hist, const GpuMat&amp; levels, GpuMat&amp; buf, Stream&amp; stream)":[142,2,1,"void gpu::histRange(const GpuMat& src, GpuMat& hist, const GpuMat& levels, GpuMat& buf, Stream& stream)"],"void gpu::histRange(const GpuMat&amp; src, GpuMat&amp; hist, const GpuMat&amp; levels, Stream&amp; stream)":[142,2,1,"void gpu::histRange(const GpuMat& src, GpuMat& hist, const GpuMat& levels, Stream& stream)"],"void gpu::integral(const GpuMat&amp; src, GpuMat&amp; sum, Stream&amp; stream)":[142,2,1,"void gpu::integral(const GpuMat& src, GpuMat& sum, Stream& stream)"],"void gpu::interpolateFrames(const GpuMat&amp; frame0, const GpuMat&amp; frame1, const GpuMat&amp; fu, const GpuMat&amp; fv, const GpuMat&amp; bu, const GpuMat&amp; bv, float pos, GpuMat&amp; newFrame, GpuMat&amp; buf, Stream&amp; stream)":[149,2,1,"void gpu::interpolateFrames(const GpuMat& frame0, const GpuMat& frame1, const GpuMat& fu, const GpuMat& fv, const GpuMat& bu, const GpuMat& bv, float pos, GpuMat& newFrame, GpuMat& buf, Stream& stream)"],"void gpu::log(const GpuMat&amp; a, GpuMat&amp; b, Stream&amp; stream)":[148,2,1,"void gpu::log(const GpuMat& a, GpuMat& b, Stream& stream)"],"void gpu::lshift(const GpuMat&amp; src, Scalar_&lt;int&gt; sc, GpuMat&amp; dst, Stream&amp; stream)":[148,2,1,"void gpu::lshift(const GpuMat& src, Scalar_<int> sc, GpuMat& dst, Stream& stream)"],"void gpu::magnitude(const GpuMat&amp; x, const GpuMat&amp; y, GpuMat&amp; magnitude, Stream&amp; stream)":[147,2,1,"void gpu::magnitude(const GpuMat& x, const GpuMat& y, GpuMat& magnitude, Stream& stream)"],"void gpu::magnitude(const GpuMat&amp; xy, GpuMat&amp; magnitude, Stream&amp; stream)":[147,2,1,"void gpu::magnitude(const GpuMat& xy, GpuMat& magnitude, Stream& stream)"],"void gpu::magnitudeSqr(const GpuMat&amp; x, const GpuMat&amp; y, GpuMat&amp; magnitude, Stream&amp; stream)":[147,2,1,"void gpu::magnitudeSqr(const GpuMat& x, const GpuMat& y, GpuMat& magnitude, Stream& stream)"],"void gpu::magnitudeSqr(const GpuMat&amp; xy, GpuMat&amp; magnitude, Stream&amp; stream)":[147,2,1,"void gpu::magnitudeSqr(const GpuMat& xy, GpuMat& magnitude, Stream& stream)"],"void gpu::matchTemplate(const GpuMat&amp; image, const GpuMat&amp; templ, GpuMat&amp; result, int method, MatchTemplateBuf &amp;buf, Stream&amp; stream)":[142,2,1,"void gpu::matchTemplate(const GpuMat& image, const GpuMat& templ, GpuMat& result, int method, MatchTemplateBuf &buf, Stream& stream)"],"void gpu::matchTemplate(const GpuMat&amp; image, const GpuMat&amp; templ, GpuMat&amp; result, int method, Stream &amp;stream)":[142,2,1,"void gpu::matchTemplate(const GpuMat& image, const GpuMat& templ, GpuMat& result, int method, Stream &stream)"],"void gpu::max(const GpuMat&amp; src1, const GpuMat&amp; src2, GpuMat&amp; dst, Stream&amp; stream)":[148,2,1,"void gpu::max(const GpuMat& src1, const GpuMat& src2, GpuMat& dst, Stream& stream)"],"void gpu::max(const GpuMat&amp; src1, double src2, GpuMat&amp; dst, Stream&amp; stream)":[148,2,1,"void gpu::max(const GpuMat& src1, double src2, GpuMat& dst, Stream& stream)"],"void gpu::meanShiftFiltering(const GpuMat&amp; src, GpuMat&amp; dst, int sp, int sr, TermCriteria criteria, Stream&amp; stream)":[142,2,1,"void gpu::meanShiftFiltering(const GpuMat& src, GpuMat& dst, int sp, int sr, TermCriteria criteria, Stream& stream)"],"void gpu::meanShiftProc(const GpuMat&amp; src, GpuMat&amp; dstr, GpuMat&amp; dstsp, int sp, int sr, TermCriteria criteria, Stream&amp; stream)":[142,2,1,"void gpu::meanShiftProc(const GpuMat& src, GpuMat& dstr, GpuMat& dstsp, int sp, int sr, TermCriteria criteria, Stream& stream)"],"void gpu::meanShiftSegmentation(const GpuMat&amp; src, Mat&amp; dst, int sp, int sr, int minsize, TermCriteria criteria)":[142,2,1,"void gpu::meanShiftSegmentation(const GpuMat& src, Mat& dst, int sp, int sr, int minsize, TermCriteria criteria)"],"void gpu::meanStdDev(const GpuMat&amp; mtx, Scalar&amp; mean, Scalar&amp; stddev)":[145,2,1,"void gpu::meanStdDev(const GpuMat& mtx, Scalar& mean, Scalar& stddev)"],"void gpu::meanStdDev(const GpuMat&amp; mtx, Scalar&amp; mean, Scalar&amp; stddev, GpuMat&amp; buf)":[145,2,1,"void gpu::meanStdDev(const GpuMat& mtx, Scalar& mean, Scalar& stddev, GpuMat& buf)"],"void gpu::merge(const GpuMat* src, size_t n, GpuMat&amp; dst, Stream&amp; stream)":[147,2,1,"void gpu::merge(const GpuMat* src, size_t n, GpuMat& dst, Stream& stream)"],"void gpu::merge(const vector&lt;GpuMat&gt;&amp; src, GpuMat&amp; dst, Stream&amp; stream)":[147,2,1,"void gpu::merge(const vector<GpuMat>& src, GpuMat& dst, Stream& stream)"],"void gpu::min(const GpuMat&amp; src1, const GpuMat&amp; src2, GpuMat&amp; dst, Stream&amp; stream)":[148,2,1,"void gpu::min(const GpuMat& src1, const GpuMat& src2, GpuMat& dst, Stream& stream)"],"void gpu::min(const GpuMat&amp; src1, double src2, GpuMat&amp; dst, Stream&amp; stream)":[148,2,1,"void gpu::min(const GpuMat& src1, double src2, GpuMat& dst, Stream& stream)"],"void gpu::minMax(const GpuMat&amp; src, double* minVal, double* maxVal, const GpuMat&amp; mask)":[145,2,1,"void gpu::minMax(const GpuMat& src, double* minVal, double* maxVal, const GpuMat& mask)"],"void gpu::minMax(const GpuMat&amp; src, double* minVal, double* maxVal, const GpuMat&amp; mask, GpuMat&amp; buf)":[145,2,1,"void gpu::minMax(const GpuMat& src, double* minVal, double* maxVal, const GpuMat& mask, GpuMat& buf)"],"void gpu::minMaxLoc(const GpuMat&amp; src, double* minVal, double* maxVal, Point* minLoc, Point* maxLoc, const GpuMat&amp; mask)":[145,2,1,"void gpu::minMaxLoc(const GpuMat& src, double* minVal, double* maxVal, Point* minLoc, Point* maxLoc, const GpuMat& mask)"],"void gpu::minMaxLoc(const GpuMat&amp; src, double* minVal, double* maxVal, Point* minLoc, Point* maxLoc, const GpuMat&amp; mask, GpuMat&amp; valbuf, GpuMat&amp; locbuf)":[145,2,1,"void gpu::minMaxLoc(const GpuMat& src, double* minVal, double* maxVal, Point* minLoc, Point* maxLoc, const GpuMat& mask, GpuMat& valbuf, GpuMat& locbuf)"],"void gpu::morphologyEx(const GpuMat&amp; src, GpuMat&amp; dst, int op, const Mat&amp; kernel, GpuMat&amp; buf1, GpuMat&amp; buf2, Point anchor, int iterations, Stream&amp; stream)":[141,2,1,"void gpu::morphologyEx(const GpuMat& src, GpuMat& dst, int op, const Mat& kernel, GpuMat& buf1, GpuMat& buf2, Point anchor, int iterations, Stream& stream)"],"void gpu::morphologyEx(const GpuMat&amp; src, GpuMat&amp; dst, int op, const Mat&amp; kernel, Point anchor, int iterations)":[141,2,1,"void gpu::morphologyEx(const GpuMat& src, GpuMat& dst, int op, const Mat& kernel, Point anchor, int iterations)"],"void gpu::mulAndScaleSpectrums(const GpuMat&amp; a, const GpuMat&amp; b, GpuMat&amp; c, int flags, float scale, bool conjB, Stream&amp; stream)":[142,2,1,"void gpu::mulAndScaleSpectrums(const GpuMat& a, const GpuMat& b, GpuMat& c, int flags, float scale, bool conjB, Stream& stream)"],"void gpu::mulSpectrums(const GpuMat&amp; a, const GpuMat&amp; b, GpuMat&amp; c, int flags, bool conjB, Stream&amp; stream)":[142,2,1,"void gpu::mulSpectrums(const GpuMat& a, const GpuMat& b, GpuMat& c, int flags, bool conjB, Stream& stream)"],"void gpu::multiply(const GpuMat&amp; a, const GpuMat&amp; b, GpuMat&amp; c, double scale, int dtype, Stream&amp; stream)":[148,2,1,"void gpu::multiply(const GpuMat& a, const GpuMat& b, GpuMat& c, double scale, int dtype, Stream& stream)"],"void gpu::multiply(const GpuMat&amp; a, const Scalar&amp; sc, GpuMat&amp; c, double scale, int dtype, Stream&amp; stream)":[148,2,1,"void gpu::multiply(const GpuMat& a, const Scalar& sc, GpuMat& c, double scale, int dtype, Stream& stream)"],"void gpu::nonLocalMeans(const GpuMat&amp; src, GpuMat&amp; dst, float h, int search_window , int block_size , int borderMode , Stream&amp; s)":[142,2,1,"void gpu::nonLocalMeans(const GpuMat& src, GpuMat& dst, float h, int search_window , int block_size , int borderMode , Stream& s)"],"void gpu::normalize(const GpuMat&amp; src, GpuMat&amp; dst, double a, double b, int norm_type, int dtype, const GpuMat&amp; mask, GpuMat&amp; norm_buf, GpuMat&amp; cvt_buf)":[147,2,1,"void gpu::normalize(const GpuMat& src, GpuMat& dst, double a, double b, int norm_type, int dtype, const GpuMat& mask, GpuMat& norm_buf, GpuMat& cvt_buf)"],"void gpu::normalize(const GpuMat&amp; src, GpuMat&amp; dst, double alpha , double beta , int norm_type , int dtype , const GpuMat&amp; mask)":[147,2,1,"void gpu::normalize(const GpuMat& src, GpuMat& dst, double alpha , double beta , int norm_type , int dtype , const GpuMat& mask)"],"void gpu::phase(const GpuMat&amp; x, const GpuMat&amp; y, GpuMat&amp; angle, bool angleInDegrees, Stream&amp; stream)":[147,2,1,"void gpu::phase(const GpuMat& x, const GpuMat& y, GpuMat& angle, bool angleInDegrees, Stream& stream)"],"void gpu::polarToCart(const GpuMat&amp; magnitude, const GpuMat&amp; angle, GpuMat&amp; x, GpuMat&amp; y, bool angleInDegrees, Stream&amp; stream)":[147,2,1,"void gpu::polarToCart(const GpuMat& magnitude, const GpuMat& angle, GpuMat& x, GpuMat& y, bool angleInDegrees, Stream& stream)"],"void gpu::pow(const GpuMat&amp; src, double power, GpuMat&amp; dst, Stream&amp; stream)":[148,2,1,"void gpu::pow(const GpuMat& src, double power, GpuMat& dst, Stream& stream)"],"void gpu::pyrDown(const GpuMat&amp; src, GpuMat&amp; dst, Stream&amp; stream)":[142,2,1,"void gpu::pyrDown(const GpuMat& src, GpuMat& dst, Stream& stream)"],"void gpu::pyrUp(const GpuMat&amp; src, GpuMat&amp; dst, Stream&amp; stream)":[142,2,1,"void gpu::pyrUp(const GpuMat& src, GpuMat& dst, Stream& stream)"],"void gpu::rectStdDev(const GpuMat&amp; src, const GpuMat&amp; sqr, GpuMat&amp; dst, const Rect&amp; rect, Stream&amp; stream)":[142,2,1,"void gpu::rectStdDev(const GpuMat& src, const GpuMat& sqr, GpuMat& dst, const Rect& rect, Stream& stream)"],"void gpu::reduce(const GpuMat&amp; mtx, GpuMat&amp; vec, int dim, int reduceOp, int dtype , Stream&amp; stream)":[145,2,1,"void gpu::reduce(const GpuMat& mtx, GpuMat& vec, int dim, int reduceOp, int dtype , Stream& stream)"],"void gpu::registerPageLocked(Mat&amp; m)":[138,2,1,"void gpu::registerPageLocked(Mat& m)"],"void gpu::remap(const GpuMat&amp; src, GpuMat&amp; dst, const GpuMat&amp; xmap, const GpuMat&amp; ymap, int interpolation, int borderMode, Scalar borderValue, Stream&amp; stream)":[142,2,1,"void gpu::remap(const GpuMat& src, GpuMat& dst, const GpuMat& xmap, const GpuMat& ymap, int interpolation, int borderMode, Scalar borderValue, Stream& stream)"],"void gpu::reprojectImageTo3D(const GpuMat&amp; disp, GpuMat&amp; xyzw, const Mat&amp; Q, int dst_cn , Stream&amp; stream)":[137,2,1,"void gpu::reprojectImageTo3D(const GpuMat& disp, GpuMat& xyzw, const Mat& Q, int dst_cn , Stream& stream)"],"void gpu::resetDevice()":[143,2,1,""],"void gpu::resize(const GpuMat&amp; src, GpuMat&amp; dst, Size dsize, double fx, double fy, int interpolation , Stream&amp; stream)":[142,2,1,"void gpu::resize(const GpuMat& src, GpuMat& dst, Size dsize, double fx, double fy, int interpolation , Stream& stream)"],"void gpu::rotate(const GpuMat&amp; src, GpuMat&amp; dst, Size dsize, double angle, double xShift , double yShift , int interpolation , Stream&amp; stream)":[142,2,1,"void gpu::rotate(const GpuMat& src, GpuMat& dst, Size dsize, double angle, double xShift , double yShift , int interpolation , Stream& stream)"],"void gpu::rshift(const GpuMat&amp; src, Scalar_&lt;int&gt; sc, GpuMat&amp; dst, Stream&amp; stream)":[148,2,1,"void gpu::rshift(const GpuMat& src, Scalar_<int> sc, GpuMat& dst, Stream& stream)"],"void gpu::sepFilter2D(const GpuMat&amp; src, GpuMat&amp; dst, int ddepth, const Mat&amp; kernelX, const Mat&amp; kernelY, GpuMat&amp; buf, Point anchor, int rowBorderType, int columnBorderType, Stream&amp; stream)":[141,2,1,"void gpu::sepFilter2D(const GpuMat& src, GpuMat& dst, int ddepth, const Mat& kernelX, const Mat& kernelY, GpuMat& buf, Point anchor, int rowBorderType, int columnBorderType, Stream& stream)"],"void gpu::sepFilter2D(const GpuMat&amp; src, GpuMat&amp; dst, int ddepth, const Mat&amp; kernelX, const Mat&amp; kernelY, Point anchor, int rowBorderType, int columnBorderType)":[141,2,1,"void gpu::sepFilter2D(const GpuMat& src, GpuMat& dst, int ddepth, const Mat& kernelX, const Mat& kernelY, Point anchor, int rowBorderType, int columnBorderType)"],"void gpu::setDevice(int device)":[143,2,1,""],"void gpu::setGlDevice(int device)":[122,2,1,""],"void gpu::solvePnPRansac(const Mat&amp; object, const Mat&amp; image, const Mat&amp; camera_mat, const Mat&amp; dist_coef, Mat&amp; rvec, Mat&amp; tvec, bool use_extrinsic_guess, int num_iters, float max_dist, int min_inlier_count, vector&lt;int&gt;* inliers)":[137,2,1,"void gpu::solvePnPRansac(const Mat& object, const Mat& image, const Mat& camera_mat, const Mat& dist_coef, Mat& rvec, Mat& tvec, bool use_extrinsic_guess, int num_iters, float max_dist, int min_inlier_count, vector<int>* inliers)"],"void gpu::split(const GpuMat&amp; src, GpuMat* dst, Stream&amp; stream)":[147,2,1,"void gpu::split(const GpuMat& src, GpuMat* dst, Stream& stream)"],"void gpu::split(const GpuMat&amp; src, vector&lt;GpuMat&gt;&amp; dst, Stream&amp; stream)":[147,2,1,"void gpu::split(const GpuMat& src, vector<GpuMat>& dst, Stream& stream)"],"void gpu::sqr(const GpuMat&amp; src, GpuMat&amp; dst, Stream&amp; stream)":[148,2,1,"void gpu::sqr(const GpuMat& src, GpuMat& dst, Stream& stream)"],"void gpu::sqrIntegral(const GpuMat&amp; src, GpuMat&amp; sqsum, Stream&amp; stream)":[142,2,1,"void gpu::sqrIntegral(const GpuMat& src, GpuMat& sqsum, Stream& stream)"],"void gpu::sqrt(const GpuMat&amp; src, GpuMat&amp; dst, Stream&amp; stream)":[148,2,1,"void gpu::sqrt(const GpuMat& src, GpuMat& dst, Stream& stream)"],"void gpu::subtract(const GpuMat&amp; a, const GpuMat&amp; b, GpuMat&amp; c, const GpuMat&amp; mask, int dtype, Stream&amp; stream)":[148,2,1,"void gpu::subtract(const GpuMat& a, const GpuMat& b, GpuMat& c, const GpuMat& mask, int dtype, Stream& stream)"],"void gpu::subtract(const GpuMat&amp; a, const Scalar&amp; sc, GpuMat&amp; c, const GpuMat&amp; mask, int dtype, Stream&amp; stream)":[148,2,1,"void gpu::subtract(const GpuMat& a, const Scalar& sc, GpuMat& c, const GpuMat& mask, int dtype, Stream& stream)"],"void gpu::swapChannels(GpuMat&amp; image, const int dstOrder[4], Stream&amp; stream)":[142,2,1,"void gpu::swapChannels(GpuMat& image, const int dstOrder[4], Stream& stream)"],"void gpu::transpose(const GpuMat&amp; src1, GpuMat&amp; dst, Stream&amp; stream)":[147,2,1,"void gpu::transpose(const GpuMat& src1, GpuMat& dst, Stream& stream)"],"void gpu::unregisterPageLocked(Mat&amp; m)":[138,2,1,"void gpu::unregisterPageLocked(Mat& m)"],"void gpu::warpAffine(const GpuMat&amp; src, GpuMat&amp; dst, const Mat&amp; M, Size dsize, int flags, int borderMode, Scalar borderValue, Stream&amp; stream)":[142,2,1,"void gpu::warpAffine(const GpuMat& src, GpuMat& dst, const Mat& M, Size dsize, int flags, int borderMode, Scalar borderValue, Stream& stream)"],"void gpu::warpPerspective(const GpuMat&amp; src, GpuMat&amp; dst, const Mat&amp; M, Size dsize, int flags, int borderMode, Scalar borderValue, Stream&amp; stream)":[142,2,1,"void gpu::warpPerspective(const GpuMat& src, GpuMat& dst, const Mat& M, Size dsize, int flags, int borderMode, Scalar borderValue, Stream& stream)"],"void grabCut(InputArray img, InputOutputArray mask, Rect rect, InputOutputArray bgdModel, InputOutputArray fgdModel, int iterCount, int mode)":[159,2,1,""],"void groupRectangles(vector&lt;Rect&gt;&amp; rectList, int groupThreshold, double eps)":[186,2,1,"void groupRectangles(vector<Rect>& rectList, int groupThreshold, double eps)"],"void groupRectangles(vector&lt;Rect&gt;&amp; rectList, vector&lt;int&gt;&amp; weights, int groupThreshold, double eps)":[186,2,1,"void groupRectangles(vector<Rect>& rectList, vector<int>& weights, int groupThreshold, double eps)"],"void idct(InputArray src, OutputArray dst, int flags)":[123,2,1,""],"void idft(InputArray src, OutputArray dst, int flags, int nonzeroRows)":[123,2,1,""],"void imshow(const string&amp; winname, InputArray mat)":[153,2,1,"void imshow(const string& winname, InputArray mat)"],"void inRange(InputArray src, InputArray lowerb, InputArray upperb, OutputArray dst)":[123,2,1,""],"void initUndistortRectifyMap(InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray newCameraMatrix, Size size, int m1type, OutputArray map1, OutputArray map2)":[156,2,1,""],"void inpaint(InputArray src, InputArray inpaintMask, OutputArray dst, double inpaintRadius, int flags)":[203,2,1,""],"void insertImageCOI(InputArray coiimg, CvArr* arr, int coi)":[123,2,1,""],"void integral(InputArray src, OutputArray sum, OutputArray sqsum, OutputArray tilted, int sdepth)":[159,2,1,""],"void integral(InputArray src, OutputArray sum, OutputArray sqsum, int sdepth)":[159,2,1,""],"void integral(InputArray src, OutputArray sum, int sdepth)":[159,2,1,""],"void invertAffineTransform(InputArray M, OutputArray iM)":[156,2,1,""],"void line(Mat&amp; img, Point pt1, Point pt2, const Scalar&amp; color, int thickness, int lineType, int shift)":[117,2,1,"void line(Mat& img, Point pt1, Point pt2, const Scalar& color, int thickness, int lineType, int shift)"],"void loadWindowParameters(const string&amp; windowName)":[151,2,1,"void loadWindowParameters(const string& windowName)"],"void log(InputArray src, OutputArray dst)":[123,2,1,""],"void magnitude(InputArray x, InputArray y, OutputArray magnitude)":[123,2,1,""],"void matMulDeriv(InputArray A, InputArray B, OutputArray dABdA, OutputArray dABdB)":[101,2,1,""],"void matchTemplate(InputArray image, InputArray templ, OutputArray result, int method)":[161,2,1,""],"void max(InputArray src1, InputArray src2, OutputArray dst)":[123,2,1,""],"void max(const Mat&amp; src1, const Mat&amp; src2, Mat&amp; dst)":[123,2,1,"void max(const Mat& src1, const Mat& src2, Mat& dst)"],"void max(const Mat&amp; src1, double src2, Mat&amp; dst)":[123,2,1,"void max(const Mat& src1, double src2, Mat& dst)"],"void meanStdDev(InputArray src, OutputArray mean, OutputArray stddev, InputArray mask)":[123,2,1,""],"void medianBlur(InputArray src, OutputArray dst, int ksize)":[155,2,1,""],"void merge(InputArrayOfArrays mv, OutputArray dst)":[123,2,1,""],"void merge(const Mat* mv, size_t count, OutputArray dst)":[123,2,1,""],"void min(InputArray src1, InputArray src2, OutputArray dst)":[123,2,1,""],"void min(const Mat&amp; src1, const Mat&amp; src2, Mat&amp; dst)":[123,2,1,"void min(const Mat& src1, const Mat& src2, Mat& dst)"],"void min(const Mat&amp; src1, double src2, Mat&amp; dst)":[123,2,1,"void min(const Mat& src1, double src2, Mat& dst)"],"void minEnclosingCircle(InputArray points, Point2f&amp; center, float&amp; radius)":[162,2,1,"void minEnclosingCircle(InputArray points, Point2f& center, float& radius)"],"void minMaxIdx(InputArray src, double* minVal, double* maxVal, int* minIdx, int* maxIdx, InputArray mask)":[123,2,1,""],"void minMaxLoc(InputArray src, double* minVal, double* maxVal, Point* minLoc, Point* maxLoc, InputArray mask)":[123,2,1,""],"void minMaxLoc(const SparseMat&amp; a, double* minVal, double* maxVal, int* minIdx, int* maxIdx)":[123,2,1,"void minMaxLoc(const SparseMat& a, double* minVal, double* maxVal, int* minIdx, int* maxIdx)"],"void mixChannels(const Mat* src, size_t nsrcs, Mat* dst, size_t ndsts, const int* fromTo, size_t npairs)":[123,2,1,""],"void mixChannels(const vector&lt;Mat&gt;&amp; src, vector&lt;Mat&gt;&amp; dst, const int* fromTo, size_t npairs)":[123,2,1,"void mixChannels(const vector<Mat>& src, vector<Mat>& dst, const int* fromTo, size_t npairs)"],"void morphologyEx(InputArray src, OutputArray dst, int op, InputArray kernel, Point anchor, int iterations, int borderType, const Scalar&amp; borderValue)":[155,2,1,"void morphologyEx(InputArray src, OutputArray dst, int op, InputArray kernel, Point anchor, int iterations, int borderType, const Scalar& borderValue)"],"void moveWindow(const string&amp; winname, int x, int y)":[153,2,1,"void moveWindow(const string& winname, int x, int y)"],"void mulSpectrums(InputArray a, InputArray b, OutputArray c, int flags, bool conjB)":[123,2,1,""],"void mulTransposed(InputArray src, OutputArray dst, bool aTa, InputArray delta, double scale, int dtype)":[123,2,1,""],"void multiply(InputArray src1, InputArray src2, OutputArray dst, double scale, int dtype)":[123,2,1,""],"void namedWindow(const string&amp; winname, int flags)":[153,2,1,"void namedWindow(const string& winname, int flags)"],"void normalize(InputArray src, OutputArray dst, double alpha, double beta, int norm_type, int dtype, InputArray mask)":[123,2,1,""],"void normalize(const SparseMat&amp; src, SparseMat&amp; dst, double alpha, int normType)":[123,2,1,"void normalize(const SparseMat& src, SparseMat& dst, double alpha, int normType)"],"void ocl::BackgroundSubtractor::getBackgroundImage(oclMat&amp; backgroundImage) const":[201,2,1,"void ocl::BackgroundSubtractor::getBackgroundImage(oclMat& backgroundImage) const"],"void ocl::BackgroundSubtractor::operator()(const oclMat&amp; image, oclMat&amp; fgmask, float learningRate)":[201,2,1,"void ocl::BackgroundSubtractor::operator()(const oclMat& image, oclMat& fgmask, float learningRate)"],"void ocl::BruteForceMatcher_OCL_base::knnMatch(const oclMat&amp; query, const oclMat&amp; train, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, int k, const oclMat&amp; mask , bool compactResult)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::knnMatch(const oclMat& query, const oclMat& train, std::vector< std::vector<DMatch> >&matches, int k, const oclMat& mask , bool compactResult)"],"void ocl::BruteForceMatcher_OCL_base::knnMatch(const oclMat&amp; query, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, int k, const std::vector&lt;oclMat&gt;&amp;masks , bool compactResult)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::knnMatch(const oclMat& query, std::vector< std::vector<DMatch> >&matches, int k, const std::vector<oclMat>&masks , bool compactResult)"],"void ocl::BruteForceMatcher_OCL_base::knnMatch2Collection(const oclMat&amp; query, const oclMat&amp; trainCollection, oclMat&amp; trainIdx, oclMat&amp; imgIdx, oclMat&amp; distance, const oclMat&amp; maskCollection)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::knnMatch2Collection(const oclMat& query, const oclMat& trainCollection, oclMat& trainIdx, oclMat& imgIdx, oclMat& distance, const oclMat& maskCollection)"],"void ocl::BruteForceMatcher_OCL_base::knnMatch2Convert(const Mat&amp; trainIdx, const Mat&amp; imgIdx, const Mat&amp; distance, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp; matches, bool compactResult)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::knnMatch2Convert(const Mat& trainIdx, const Mat& imgIdx, const Mat& distance, std::vector< std::vector<DMatch> >& matches, bool compactResult)"],"void ocl::BruteForceMatcher_OCL_base::knnMatch2Download(const oclMat&amp; trainIdx, const oclMat&amp; imgIdx, const oclMat&amp; distance, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp; matches, bool compactResult)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::knnMatch2Download(const oclMat& trainIdx, const oclMat& imgIdx, const oclMat& distance, std::vector< std::vector<DMatch> >& matches, bool compactResult)"],"void ocl::BruteForceMatcher_OCL_base::knnMatchConvert(const Mat&amp; trainIdx, const Mat&amp; distance, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, bool compactResult)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::knnMatchConvert(const Mat& trainIdx, const Mat& distance, std::vector< std::vector<DMatch> >&matches, bool compactResult)"],"void ocl::BruteForceMatcher_OCL_base::knnMatchDownload(const oclMat&amp; trainIdx, const oclMat&amp; distance, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, bool compactResult)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::knnMatchDownload(const oclMat& trainIdx, const oclMat& distance, std::vector< std::vector<DMatch> >&matches, bool compactResult)"],"void ocl::BruteForceMatcher_OCL_base::knnMatchSingle(const oclMat&amp; query, const oclMat&amp; train, oclMat&amp; trainIdx, oclMat&amp; distance, oclMat&amp; allDist, int k, const oclMat&amp; mask)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::knnMatchSingle(const oclMat& query, const oclMat& train, oclMat& trainIdx, oclMat& distance, oclMat& allDist, int k, const oclMat& mask)"],"void ocl::BruteForceMatcher_OCL_base::makeGpuCollection(oclMat&amp; trainCollection, oclMat&amp; maskCollection, const vector&lt;oclMat&gt;&amp; masks)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::makeGpuCollection(oclMat& trainCollection, oclMat& maskCollection, const vector<oclMat>& masks)"],"void ocl::BruteForceMatcher_OCL_base::match(const oclMat&amp; query, const oclMat&amp; train, std::vector&lt;DMatch&gt;&amp; matches, const oclMat&amp; mask)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::match(const oclMat& query, const oclMat& train, std::vector<DMatch>& matches, const oclMat& mask)"],"void ocl::BruteForceMatcher_OCL_base::match(const oclMat&amp; query, std::vector&lt;DMatch&gt;&amp; matches, const std::vector&lt;oclMat&gt;&amp; masks)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::match(const oclMat& query, std::vector<DMatch>& matches, const std::vector<oclMat>& masks)"],"void ocl::BruteForceMatcher_OCL_base::matchCollection(const oclMat&amp; query, const oclMat&amp; trainCollection, oclMat&amp; trainIdx, oclMat&amp; imgIdx, oclMat&amp; distance, const oclMat&amp; masks)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::matchCollection(const oclMat& query, const oclMat& trainCollection, oclMat& trainIdx, oclMat& imgIdx, oclMat& distance, const oclMat& masks)"],"void ocl::BruteForceMatcher_OCL_base::matchConvert(const Mat&amp; trainIdx, const Mat&amp; distance, std::vector&lt;DMatch&gt;&amp;matches)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::matchConvert(const Mat& trainIdx, const Mat& distance, std::vector<DMatch>&matches)"],"void ocl::BruteForceMatcher_OCL_base::matchConvert(const Mat&amp; trainIdx, const Mat&amp; imgIdx, const Mat&amp; distance, std::vector&lt;DMatch&gt;&amp;matches)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::matchConvert(const Mat& trainIdx, const Mat& imgIdx, const Mat& distance, std::vector<DMatch>&matches)"],"void ocl::BruteForceMatcher_OCL_base::matchSingle(const oclMat&amp; query, const oclMat&amp; train, oclMat&amp; trainIdx, oclMat&amp; distance, const oclMat&amp; mask)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::matchSingle(const oclMat& query, const oclMat& train, oclMat& trainIdx, oclMat& distance, const oclMat& mask)"],"void ocl::BruteForceMatcher_OCL_base::radiusMatch(const oclMat&amp; query, const oclMat&amp; train, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, float maxDistance, const oclMat&amp; mask , bool compactResult)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::radiusMatch(const oclMat& query, const oclMat& train, std::vector< std::vector<DMatch> >&matches, float maxDistance, const oclMat& mask , bool compactResult)"],"void ocl::BruteForceMatcher_OCL_base::radiusMatch(const oclMat&amp; query, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, float maxDistance, const std::vector&lt;oclMat&gt;&amp; masks , bool compactResult)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::radiusMatch(const oclMat& query, std::vector< std::vector<DMatch> >&matches, float maxDistance, const std::vector<oclMat>& masks , bool compactResult)"],"void ocl::BruteForceMatcher_OCL_base::radiusMatchCollection(const oclMat&amp; query, oclMat&amp; trainIdx, oclMat&amp; imgIdx, oclMat&amp; distance, oclMat&amp; nMatches, float maxDistance, const std::vector&lt;oclMat&gt;&amp; masks)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::radiusMatchCollection(const oclMat& query, oclMat& trainIdx, oclMat& imgIdx, oclMat& distance, oclMat& nMatches, float maxDistance, const std::vector<oclMat>& masks)"],"void ocl::BruteForceMatcher_OCL_base::radiusMatchConvert(const Mat&amp; trainIdx, const Mat&amp; distance, const Mat&amp; nMatches, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, bool compactResult)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::radiusMatchConvert(const Mat& trainIdx, const Mat& distance, const Mat& nMatches, std::vector< std::vector<DMatch> >&matches, bool compactResult)"],"void ocl::BruteForceMatcher_OCL_base::radiusMatchConvert(const Mat&amp; trainIdx, const Mat&amp; imgIdx, const Mat&amp; distance, const Mat&amp; nMatches, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp; matches, bool compactResult)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::radiusMatchConvert(const Mat& trainIdx, const Mat& imgIdx, const Mat& distance, const Mat& nMatches, std::vector< std::vector<DMatch> >& matches, bool compactResult)"],"void ocl::BruteForceMatcher_OCL_base::radiusMatchDownload(const oclMat&amp; trainIdx, const oclMat&amp; distance, const oclMat&amp; nMatches, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp;matches, bool compactResult)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::radiusMatchDownload(const oclMat& trainIdx, const oclMat& distance, const oclMat& nMatches, std::vector< std::vector<DMatch> >&matches, bool compactResult)"],"void ocl::BruteForceMatcher_OCL_base::radiusMatchDownload(const oclMat&amp; trainIdx, const oclMat&amp; imgIdx, const oclMat&amp; distance, const oclMat&amp; nMatches, std::vector&lt; std::vector&lt;DMatch&gt; &gt;&amp; matches, bool compactResult)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::radiusMatchDownload(const oclMat& trainIdx, const oclMat& imgIdx, const oclMat& distance, const oclMat& nMatches, std::vector< std::vector<DMatch> >& matches, bool compactResult)"],"void ocl::BruteForceMatcher_OCL_base::radiusMatchSingle(const oclMat&amp; query, const oclMat&amp; train, oclMat&amp; trainIdx, oclMat&amp; distance, oclMat&amp; nMatches, float maxDistance, const oclMat&amp; mask)":[191,2,1,"void ocl::BruteForceMatcher_OCL_base::radiusMatchSingle(const oclMat& query, const oclMat& train, oclMat& trainIdx, oclMat& distance, oclMat& nMatches, float maxDistance, const oclMat& mask)"],"void ocl::Canny(const oclMat&amp; dx, const oclMat&amp; dy, CannyBuf&amp; buf, oclMat&amp; edges, double low_thresh, double high_thresh, bool L2gradient)":[191,2,1,"void ocl::Canny(const oclMat& dx, const oclMat& dy, CannyBuf& buf, oclMat& edges, double low_thresh, double high_thresh, bool L2gradient)"],"void ocl::Canny(const oclMat&amp; dx, const oclMat&amp; dy, oclMat&amp; edges, double low_thresh, double high_thresh, bool L2gradient)":[191,2,1,"void ocl::Canny(const oclMat& dx, const oclMat& dy, oclMat& edges, double low_thresh, double high_thresh, bool L2gradient)"],"void ocl::Canny(const oclMat&amp; image, CannyBuf&amp; buf, oclMat&amp; edges, double low_thresh, double high_thresh, int apperture_size , bool L2gradient)":[191,2,1,"void ocl::Canny(const oclMat& image, CannyBuf& buf, oclMat& edges, double low_thresh, double high_thresh, int apperture_size , bool L2gradient)"],"void ocl::Canny(const oclMat&amp; image, oclMat&amp; edges, double low_thresh, double high_thresh, int apperture_size , bool L2gradient)":[191,2,1,"void ocl::Canny(const oclMat& image, oclMat& edges, double low_thresh, double high_thresh, int apperture_size , bool L2gradient)"],"void ocl::FarnebackOpticalFlow::operator ()(const oclMat &amp;frame0, const oclMat &amp;frame1, oclMat &amp;flowx, oclMat &amp;flowy)":[201,2,1,"void ocl::FarnebackOpticalFlow::operator ()(const oclMat &frame0, const oclMat &frame1, oclMat &flowx, oclMat &flowy)"],"void ocl::FarnebackOpticalFlow::releaseMemory()":[201,2,1,""],"void ocl::GaussianBlur(const oclMat &amp;src, oclMat &amp;dst, Size ksize, double sigma1, double sigma2 , int bordertype)":[192,2,1,"void ocl::GaussianBlur(const oclMat &src, oclMat &dst, Size ksize, double sigma1, double sigma2 , int bordertype)"],"void ocl::GoodFeaturesToTrackDetector_OCL::operator ()(const oclMat&amp; image, oclMat&amp; corners, const oclMat&amp; mask)":[201,2,1,"void ocl::GoodFeaturesToTrackDetector_OCL::operator ()(const oclMat& image, oclMat& corners, const oclMat& mask)"],"void ocl::GoodFeaturesToTrackDetector_OCL::releaseMemory()":[201,2,1,""],"void ocl::HOGDescriptor::detect(const oclMat&amp; img, vector&lt;Point&gt;&amp; found_locations, double hit_threshold, Size win_stride, Size padding)":[191,2,1,"void ocl::HOGDescriptor::detect(const oclMat& img, vector<Point>& found_locations, double hit_threshold, Size win_stride, Size padding)"],"void ocl::HOGDescriptor::detectMultiScale(const oclMat&amp; img, vector&lt;Rect&gt;&amp; found_locations, double hit_threshold, Size win_stride, Size padding, double scale0, int group_threshold)":[191,2,1,"void ocl::HOGDescriptor::detectMultiScale(const oclMat& img, vector<Rect>& found_locations, double hit_threshold, Size win_stride, Size padding, double scale0, int group_threshold)"],"void ocl::HOGDescriptor::getDescriptors(const oclMat&amp; img, Size win_stride, oclMat&amp; descriptors, int descr_format)":[191,2,1,"void ocl::HOGDescriptor::getDescriptors(const oclMat& img, Size win_stride, oclMat& descriptors, int descr_format)"],"void ocl::HOGDescriptor::setSVMDetector(const vector&lt;float&gt;&amp; detector)":[191,2,1,"void ocl::HOGDescriptor::setSVMDetector(const vector<float>& detector)"],"void ocl::KNearestNeighbour::find_nearest(const oclMat&amp; samples, int k, oclMat&amp; lables)":[196,2,1,"void ocl::KNearestNeighbour::find_nearest(const oclMat& samples, int k, oclMat& lables)"],"void ocl::KalmanFilter::init(int dynamParams, int measureParams, int controlParams, int type)":[201,2,1,""],"void ocl::LUT(const oclMat &amp;src, const oclMat &amp;lut, oclMat &amp;dst)":[199,2,1,"void ocl::LUT(const oclMat &src, const oclMat &lut, oclMat &dst)"],"void ocl::Laplacian(const oclMat &amp;src, oclMat &amp;dst, int ddepth, int ksize , double scale , double delta , int borderType)":[192,2,1,"void ocl::Laplacian(const oclMat &src, oclMat &dst, int ddepth, int ksize , double scale , double delta , int borderType)"],"void ocl::MOG2::getBackgroundImage(oclMat&amp; backgroundImage) const":[201,2,1,"void ocl::MOG2::getBackgroundImage(oclMat& backgroundImage) const"],"void ocl::MOG2::operator()(const oclMat&amp; frame, oclMat&amp; fgmask, float learningRate)":[201,2,1,"void ocl::MOG2::operator()(const oclMat& frame, oclMat& fgmask, float learningRate)"],"void ocl::MOG2::release()":[201,2,1,""],"void ocl::MOG::getBackgroundImage(oclMat&amp; backgroundImage) const":[201,2,1,"void ocl::MOG::getBackgroundImage(oclMat& backgroundImage) const"],"void ocl::MOG::operator()(const oclMat&amp; frame, oclMat&amp; fgmask, float learningRate)":[201,2,1,"void ocl::MOG::operator()(const oclMat& frame, oclMat& fgmask, float learningRate)"],"void ocl::MOG::release()":[201,2,1,""],"void ocl::PyrLKOpticalFlow::dense(const oclMat&amp; prevImg, const oclMat&amp; nextImg, oclMat&amp; u, oclMat&amp; v, oclMat* err)":[201,2,1,"void ocl::PyrLKOpticalFlow::dense(const oclMat& prevImg, const oclMat& nextImg, oclMat& u, oclMat& v, oclMat* err)"],"void ocl::PyrLKOpticalFlow::releaseMemory()":[201,2,1,""],"void ocl::PyrLKOpticalFlow::sparse(const oclMat&amp; prevImg, const oclMat&amp; nextImg, const oclMat&amp; prevPts, oclMat&amp; nextPts, oclMat&amp; status, oclMat* err)":[201,2,1,"void ocl::PyrLKOpticalFlow::sparse(const oclMat& prevImg, const oclMat& nextImg, const oclMat& prevPts, oclMat& nextPts, oclMat& status, oclMat* err)"],"void ocl::Scharr(const oclMat &amp;src, oclMat &amp;dst, int ddepth, int dx, int dy, double scale , double delta , int bordertype)":[192,2,1,"void ocl::Scharr(const oclMat &src, oclMat &dst, int ddepth, int dx, int dy, double scale , double delta , int bordertype)"],"void ocl::Sobel(const oclMat &amp;src, oclMat &amp;dst, int ddepth, int dx, int dy, int ksize , double scale , double delta , int bordertype)":[192,2,1,"void ocl::Sobel(const oclMat &src, oclMat &dst, int ddepth, int dx, int dy, int ksize , double scale , double delta , int bordertype)"],"void ocl::StereoBM_OCL::operator ()(const oclMat&amp; left, const oclMat&amp; right, oclMat&amp; disparity)":[189,2,1,"void ocl::StereoBM_OCL::operator ()(const oclMat& left, const oclMat& right, oclMat& disparity)"],"void ocl::StereoBeliefPropagation::estimateRecommendedParams(int width, int height, int&amp; ndisp, int&amp; iters, int&amp; levels)":[189,2,1,"void ocl::StereoBeliefPropagation::estimateRecommendedParams(int width, int height, int& ndisp, int& iters, int& levels)"],"void ocl::StereoBeliefPropagation::operator ()(const oclMat&amp; data, oclMat&amp; disparity)":[189,2,1,"void ocl::StereoBeliefPropagation::operator ()(const oclMat& data, oclMat& disparity)"],"void ocl::StereoBeliefPropagation::operator ()(const oclMat&amp; left, const oclMat&amp; right, oclMat&amp; disparity)":[189,2,1,"void ocl::StereoBeliefPropagation::operator ()(const oclMat& left, const oclMat& right, oclMat& disparity)"],"void ocl::StereoConstantSpaceBP::estimateRecommendedParams(int width, int height, int&amp; ndisp, int&amp; iters, int&amp; levels, int&amp; nr_plane)":[189,2,1,"void ocl::StereoConstantSpaceBP::estimateRecommendedParams(int width, int height, int& ndisp, int& iters, int& levels, int& nr_plane)"],"void ocl::StereoConstantSpaceBP::operator ()(const oclMat&amp; left, const oclMat&amp; right, oclMat&amp; disparity)":[189,2,1,"void ocl::StereoConstantSpaceBP::operator ()(const oclMat& left, const oclMat& right, oclMat& disparity)"],"void ocl::abs(const oclMat&amp; src, oclMat&amp; dst)":[199,2,1,"void ocl::abs(const oclMat& src, oclMat& dst)"],"void ocl::absdiff(const oclMat&amp; src1, const Scalar&amp; s, oclMat&amp; dst)":[199,2,1,"void ocl::absdiff(const oclMat& src1, const Scalar& s, oclMat& dst)"],"void ocl::absdiff(const oclMat&amp; src1, const oclMat&amp; src2, oclMat&amp; dst)":[199,2,1,"void ocl::absdiff(const oclMat& src1, const oclMat& src2, oclMat& dst)"],"void ocl::adaptiveBilateralFilter(const oclMat&amp; src, oclMat&amp; dst, Size ksize, double sigmaSpace, double maxSigmaColor , Point anchor , int borderType)":[192,2,1,"void ocl::adaptiveBilateralFilter(const oclMat& src, oclMat& dst, Size ksize, double sigmaSpace, double maxSigmaColor , Point anchor , int borderType)"],"void ocl::add(const oclMat &amp; src1, const Scalar &amp; s, oclMat &amp; dst, const oclMat &amp; mask)":[199,2,1,"void ocl::add(const oclMat & src1, const Scalar & s, oclMat & dst, const oclMat & mask)"],"void ocl::add(const oclMat &amp; src1, const oclMat &amp; src2, oclMat &amp; dst, const oclMat &amp; mask)":[199,2,1,"void ocl::add(const oclMat & src1, const oclMat & src2, oclMat & dst, const oclMat & mask)"],"void ocl::addWeighted(const oclMat&amp; src1, double alpha, const oclMat&amp; src2, double beta, double gama, oclMat&amp; dst)":[199,2,1,"void ocl::addWeighted(const oclMat& src1, double alpha, const oclMat& src2, double beta, double gama, oclMat& dst)"],"void ocl::bilateralFilter(const oclMat &amp;src, oclMat &amp;dst, int d, double sigmaColor, double sigmaSpace, int borderType)":[192,2,1,"void ocl::bilateralFilter(const oclMat &src, oclMat &dst, int d, double sigmaColor, double sigmaSpace, int borderType)"],"void ocl::bitwise_and(const oclMat&amp; src1, const Scalar&amp; s, oclMat&amp; dst, const oclMat&amp; mask)":[199,2,1,"void ocl::bitwise_and(const oclMat& src1, const Scalar& s, oclMat& dst, const oclMat& mask)"],"void ocl::bitwise_and(const oclMat&amp; src1, const oclMat&amp; src2, oclMat&amp; dst, const oclMat&amp; mask)":[199,2,1,"void ocl::bitwise_and(const oclMat& src1, const oclMat& src2, oclMat& dst, const oclMat& mask)"],"void ocl::bitwise_not(const oclMat &amp;src, oclMat &amp;dst)":[199,2,1,"void ocl::bitwise_not(const oclMat &src, oclMat &dst)"],"void ocl::bitwise_or(const oclMat&amp; src1, const Scalar&amp; s, oclMat&amp; dst, const oclMat&amp; mask)":[199,2,1,"void ocl::bitwise_or(const oclMat& src1, const Scalar& s, oclMat& dst, const oclMat& mask)"],"void ocl::bitwise_or(const oclMat&amp; src1, const oclMat&amp; src2, oclMat&amp; dst, const oclMat&amp; mask)":[199,2,1,"void ocl::bitwise_or(const oclMat& src1, const oclMat& src2, oclMat& dst, const oclMat& mask)"],"void ocl::bitwise_xor(const oclMat&amp; src1, const Scalar&amp; s, oclMat&amp; dst, const oclMat&amp; mask)":[199,2,1,"void ocl::bitwise_xor(const oclMat& src1, const Scalar& s, oclMat& dst, const oclMat& mask)"],"void ocl::bitwise_xor(const oclMat&amp; src1, const oclMat&amp; src2, oclMat&amp; dst, const oclMat&amp; mask)":[199,2,1,"void ocl::bitwise_xor(const oclMat& src1, const oclMat& src2, oclMat& dst, const oclMat& mask)"],"void ocl::blendLinear(const oclMat&amp; img1, const oclMat&amp; img2, const oclMat&amp; weights1, const oclMat&amp; weights2, oclMat&amp; result)":[192,2,1,"void ocl::blendLinear(const oclMat& img1, const oclMat& img2, const oclMat& weights1, const oclMat& weights2, oclMat& result)"],"void ocl::blur(const oclMat &amp;src, oclMat &amp;dst, Size ksize, Point anchor , int borderType)":[192,2,1,"void ocl::blur(const oclMat &src, oclMat &dst, Size ksize, Point anchor , int borderType)"],"void ocl::boxFilter(const oclMat &amp;src, oclMat &amp;dst, int ddepth, Size ksize, Point anchor , int borderType)":[192,2,1,"void ocl::boxFilter(const oclMat &src, oclMat &dst, int ddepth, Size ksize, Point anchor , int borderType)"],"void ocl::buildWarpAffineMaps(const Mat&amp; M, bool inverse, Size dsize, oclMat&amp; xmap, oclMat&amp; ymap)":[193,2,1,"void ocl::buildWarpAffineMaps(const Mat& M, bool inverse, Size dsize, oclMat& xmap, oclMat& ymap)"],"void ocl::buildWarpCylindricalMaps(Size src_size, Rect dst_roi, const Mat&amp; K, const Mat&amp; R, float scale, oclMat&amp; map_x, oclMat&amp; map_y)":[193,2,1,"void ocl::buildWarpCylindricalMaps(Size src_size, Rect dst_roi, const Mat& K, const Mat& R, float scale, oclMat& map_x, oclMat& map_y)"],"void ocl::buildWarpPlaneMaps(Size src_size, Rect dst_roi, const Mat&amp; K, const Mat&amp; R, const Mat&amp; T, float scale, oclMat&amp; map_x, oclMat&amp; map_y)":[193,2,1,"void ocl::buildWarpPlaneMaps(Size src_size, Rect dst_roi, const Mat& K, const Mat& R, const Mat& T, float scale, oclMat& map_x, oclMat& map_y)"],"void ocl::buildWarpSphericalMaps(Size src_size, Rect dst_roi, const Mat&amp; K, const Mat&amp; R, float scale, oclMat&amp; map_x, oclMat&amp; map_y)":[193,2,1,"void ocl::buildWarpSphericalMaps(Size src_size, Rect dst_roi, const Mat& K, const Mat& R, float scale, oclMat& map_x, oclMat& map_y)"],"void ocl::calcHist(const oclMat &amp;mat_src, oclMat &amp;mat_hist)":[193,2,1,"void ocl::calcHist(const oclMat &mat_src, oclMat &mat_hist)"],"void ocl::cartToPolar(const oclMat &amp;x, const oclMat &amp;y, oclMat &amp;magnitude, oclMat &amp;angle, bool angleInDegrees)":[199,2,1,"void ocl::cartToPolar(const oclMat &x, const oclMat &y, oclMat &magnitude, oclMat &angle, bool angleInDegrees)"],"void ocl::columnSum(const oclMat&amp; src, oclMat&amp; sum)":[192,2,1,"void ocl::columnSum(const oclMat& src, oclMat& sum)"],"void ocl::compare(const oclMat &amp;src1, const oclMat &amp;src2, oclMat &amp;dst, int cmpop)":[199,2,1,"void ocl::compare(const oclMat &src1, const oclMat &src2, oclMat &dst, int cmpop)"],"void ocl::convolve(const oclMat &amp;image, const oclMat &amp;temp1, oclMat &amp;result)":[192,2,1,"void ocl::convolve(const oclMat &image, const oclMat &temp1, oclMat &result)"],"void ocl::copyMakeBorder(const oclMat &amp;src, oclMat &amp;dst, int top, int bottom, int left, int right, int boardtype, const Scalar &amp;value)":[192,2,1,"void ocl::copyMakeBorder(const oclMat &src, oclMat &dst, int top, int bottom, int left, int right, int boardtype, const Scalar &value)"],"void ocl::cornerHarris(const oclMat &amp;src, oclMat &amp;dst, int blockSize, int ksize, double k, int bordertype)":[193,2,1,"void ocl::cornerHarris(const oclMat &src, oclMat &dst, int blockSize, int ksize, double k, int bordertype)"],"void ocl::cornerMinEigenVal(const oclMat &amp;src, oclMat &amp;dst, int blockSize, int ksize, int bordertype)":[193,2,1,"void ocl::cornerMinEigenVal(const oclMat &src, oclMat &dst, int blockSize, int ksize, int bordertype)"],"void ocl::cvtColor(const oclMat &amp;src, oclMat &amp;dst, int code, int dcn)":[193,2,1,"void ocl::cvtColor(const oclMat &src, oclMat &dst, int code, int dcn)"],"void ocl::dft(const oclMat&amp; src, oclMat&amp; dst, Size dft_size , int flags)":[199,2,1,"void ocl::dft(const oclMat& src, oclMat& dst, Size dft_size , int flags)"],"void ocl::dilate(const oclMat &amp;src, oclMat &amp;dst, const Mat &amp;kernel, Point anchor , int iterations , int borderType , const Scalar &amp;borderValue)":[192,2,1,"void ocl::dilate(const oclMat &src, oclMat &dst, const Mat &kernel, Point anchor , int iterations , int borderType , const Scalar &borderValue)"],"void ocl::distanceToCenters(const oclMat &amp;src, const oclMat &amp;centers, Mat &amp;dists, Mat &amp;labels, int distType)":[196,2,1,"void ocl::distanceToCenters(const oclMat &src, const oclMat &centers, Mat &dists, Mat &labels, int distType)"],"void ocl::divide(const oclMat&amp; src1, const oclMat&amp; src2, oclMat&amp; dst, double scale)":[199,2,1,"void ocl::divide(const oclMat& src1, const oclMat& src2, oclMat& dst, double scale)"],"void ocl::divide(double scale, const oclMat&amp; src1, oclMat&amp; dst)":[199,2,1,"void ocl::divide(double scale, const oclMat& src1, oclMat& dst)"],"void ocl::equalizeHist(const oclMat &amp;mat_src, oclMat &amp;mat_dst)":[193,2,1,"void ocl::equalizeHist(const oclMat &mat_src, oclMat &mat_dst)"],"void ocl::erode(const oclMat &amp;src, oclMat &amp;dst, const Mat &amp;kernel, Point anchor , int iterations , int borderType , const Scalar &amp;borderValue)":[192,2,1,"void ocl::erode(const oclMat &src, oclMat &dst, const Mat &kernel, Point anchor , int iterations , int borderType , const Scalar &borderValue)"],"void ocl::exp(const oclMat &amp;src, oclMat &amp;dst)":[199,2,1,"void ocl::exp(const oclMat &src, oclMat &dst)"],"void ocl::filter2D(const oclMat &amp;src, oclMat &amp;dst, int ddepth, const Mat &amp;kernel, Point anchor , double delta , int borderType)":[192,2,1,"void ocl::filter2D(const oclMat &src, oclMat &dst, int ddepth, const Mat &kernel, Point anchor , double delta , int borderType)"],"void ocl::flip(const oclMat&amp; src, oclMat&amp; dst, int flipCode)":[199,2,1,"void ocl::flip(const oclMat& src, oclMat& dst, int flipCode)"],"void ocl::gemm(const oclMat&amp; src1, const oclMat&amp; src2, double alpha, const oclMat&amp; src3, double beta, oclMat&amp; dst, int flags)":[199,2,1,"void ocl::gemm(const oclMat& src1, const oclMat& src2, double alpha, const oclMat& src3, double beta, oclMat& dst, int flags)"],"void ocl::initializeContext(void* pClPlatform, void* pClContext, void* pClDevice)":[200,2,1,""],"void ocl::integral(const oclMat &amp;src, oclMat &amp;sum)":[193,2,1,"void ocl::integral(const oclMat &src, oclMat &sum)"],"void ocl::integral(const oclMat &amp;src, oclMat &amp;sum, oclMat &amp;sqsum)":[193,2,1,"void ocl::integral(const oclMat &src, oclMat &sum, oclMat &sqsum)"],"void ocl::interpolateFrames(const oclMat&amp; frame0, const oclMat&amp; frame1, const oclMat&amp; fu, const oclMat&amp; fv, const oclMat&amp; bu, const oclMat&amp; bv, float pos, oclMat&amp; newFrame, oclMat&amp; buf)":[201,2,1,"void ocl::interpolateFrames(const oclMat& frame0, const oclMat& frame1, const oclMat& fu, const oclMat& fv, const oclMat& bu, const oclMat& bv, float pos, oclMat& newFrame, oclMat& buf)"],"void ocl::log(const oclMat &amp;src, oclMat &amp;dst)":[199,2,1,"void ocl::log(const oclMat &src, oclMat &dst)"],"void ocl::magnitude(const oclMat &amp;x, const oclMat &amp;y, oclMat &amp;magnitude)":[199,2,1,"void ocl::magnitude(const oclMat &x, const oclMat &y, oclMat &magnitude)"],"void ocl::matchTemplate(const oclMat&amp; image, const oclMat&amp; templ, oclMat&amp; result, int method)":[197,2,1,"void ocl::matchTemplate(const oclMat& image, const oclMat& templ, oclMat& result, int method)"],"void ocl::matchTemplate(const oclMat&amp; image, const oclMat&amp; templ, oclMat&amp; result, int method, MatchTemplateBuf &amp;buf)":[197,2,1,"void ocl::matchTemplate(const oclMat& image, const oclMat& templ, oclMat& result, int method, MatchTemplateBuf &buf)"],"void ocl::max(const oclMat &amp;src1, const oclMat &amp;src2, oclMat &amp;dst)":[195,2,1,"void ocl::max(const oclMat &src1, const oclMat &src2, oclMat &dst)"],"void ocl::meanShiftFiltering(const oclMat &amp;src, oclMat &amp;dst, int sp, int sr, TermCriteria criteria)":[193,2,1,"void ocl::meanShiftFiltering(const oclMat &src, oclMat &dst, int sp, int sr, TermCriteria criteria)"],"void ocl::meanShiftProc(const oclMat &amp;src, oclMat &amp;dstr, oclMat &amp;dstsp, int sp, int sr, TermCriteria criteria)":[193,2,1,"void ocl::meanShiftProc(const oclMat &src, oclMat &dstr, oclMat &dstsp, int sp, int sr, TermCriteria criteria)"],"void ocl::meanShiftSegmentation(const oclMat &amp;src, Mat &amp;dst, int sp, int sr, int minsize, TermCriteria criteria)":[193,2,1,"void ocl::meanShiftSegmentation(const oclMat &src, Mat &dst, int sp, int sr, int minsize, TermCriteria criteria)"],"void ocl::meanStdDev(const oclMat &amp;mtx, Scalar &amp;mean, Scalar &amp;stddev)":[199,2,1,"void ocl::meanStdDev(const oclMat &mtx, Scalar &mean, Scalar &stddev)"],"void ocl::medianFilter(const oclMat &amp;src, oclMat &amp;dst, int m)":[192,2,1,"void ocl::medianFilter(const oclMat &src, oclMat &dst, int m)"],"void ocl::merge(const vector&lt;oclMat&gt; &amp;src, oclMat &amp;dst)":[199,2,1,"void ocl::merge(const vector<oclMat> &src, oclMat &dst)"],"void ocl::min(const oclMat &amp;src1, const oclMat &amp;src2, oclMat &amp;dst)":[195,2,1,"void ocl::min(const oclMat &src1, const oclMat &src2, oclMat &dst)"],"void ocl::minMax(const oclMat &amp;src, double *minVal, double *maxVal , const oclMat &amp;mask)":[195,2,1,"void ocl::minMax(const oclMat &src, double *minVal, double *maxVal , const oclMat &mask)"],"void ocl::minMaxLoc(const oclMat &amp;src, double *minVal, double *maxVal , Point *minLoc , Point *maxLoc ,const oclMat &amp;mask)":[195,2,1,"void ocl::minMaxLoc(const oclMat &src, double *minVal, double *maxVal , Point *minLoc , Point *maxLoc ,const oclMat &mask)"],"void ocl::morphologyEx(const oclMat &amp;src, oclMat &amp;dst, int op, const Mat &amp;kernel, Point anchor , int iterations , int borderType , const Scalar &amp;borderValue)":[192,2,1,"void ocl::morphologyEx(const oclMat &src, oclMat &dst, int op, const Mat &kernel, Point anchor , int iterations , int borderType , const Scalar &borderValue)"],"void ocl::multiply(const oclMat&amp; src1, const oclMat&amp; src2, oclMat&amp; dst, double scale)":[199,2,1,"void ocl::multiply(const oclMat& src1, const oclMat& src2, oclMat& dst, double scale)"],"void ocl::oclMat::convertTo(oclMat &amp;m, int rtype, double alpha , double beta) const":[199,2,1,"void ocl::oclMat::convertTo(oclMat &m, int rtype, double alpha , double beta) const"],"void ocl::oclMat::copyTo(oclMat &amp;m, const oclMat &amp;mask) const":[199,2,1,"void ocl::oclMat::copyTo(oclMat &m, const oclMat &mask) const"],"void ocl::phase(const oclMat &amp;x, const oclMat &amp;y, oclMat &amp;angle, bool angleInDegrees)":[199,2,1,"void ocl::phase(const oclMat &x, const oclMat &y, oclMat &angle, bool angleInDegrees)"],"void ocl::polarToCart(const oclMat &amp;magnitude, const oclMat &amp;angle, oclMat &amp;x, oclMat &amp;y, bool angleInDegrees)":[199,2,1,"void ocl::polarToCart(const oclMat &magnitude, const oclMat &angle, oclMat &x, oclMat &y, bool angleInDegrees)"],"void ocl::pow(const oclMat &amp;x, double p, oclMat &amp;y)":[199,2,1,"void ocl::pow(const oclMat &x, double p, oclMat &y)"],"void ocl::pyrDown(const oclMat&amp; src, oclMat&amp; dst)":[192,2,1,"void ocl::pyrDown(const oclMat& src, oclMat& dst)"],"void ocl::pyrUp(const oclMat&amp; src, oclMat&amp; dst)":[192,2,1,"void ocl::pyrUp(const oclMat& src, oclMat& dst)"],"void ocl::remap(const oclMat &amp;src, oclMat &amp;dst, oclMat &amp;map1, oclMat &amp;map2, int interpolation, int bordertype, const Scalar &amp;value)":[193,2,1,"void ocl::remap(const oclMat &src, oclMat &dst, oclMat &map1, oclMat &map2, int interpolation, int bordertype, const Scalar &value)"],"void ocl::resize(const oclMat &amp;src, oclMat &amp;dst, Size dsize, double fx , double fy , int interpolation)":[193,2,1,"void ocl::resize(const oclMat &src, oclMat &dst, Size dsize, double fx , double fy , int interpolation)"],"void ocl::sepFilter2D(const oclMat &amp;src, oclMat &amp;dst, int ddepth, const Mat &amp;kernelX, const Mat &amp;kernelY, Point anchor , double delta , int bordertype)":[192,2,1,"void ocl::sepFilter2D(const oclMat &src, oclMat &dst, int ddepth, const Mat &kernelX, const Mat &kernelY, Point anchor , double delta , int bordertype)"],"void ocl::setBinaryPath(const char *path)":[200,2,1,""],"void ocl::setDevice(const DeviceInfo* info)":[200,2,1,""],"void ocl::setIdentity(oclMat&amp; src, const Scalar &amp; val)":[199,2,1,"void ocl::setIdentity(oclMat& src, const Scalar & val)"],"void ocl::sortByKey(oclMat&amp; keys, oclMat&amp; values, int method, bool isGreaterThan)":[199,2,1,"void ocl::sortByKey(oclMat& keys, oclMat& values, int method, bool isGreaterThan)"],"void ocl::split(const oclMat &amp;src, vector&lt;oclMat&gt; &amp;dst)":[199,2,1,"void ocl::split(const oclMat &src, vector<oclMat> &dst)"],"void ocl::subtract(const oclMat&amp; src1, const Scalar&amp; s, oclMat&amp; dst, const oclMat&amp; mask)":[199,2,1,"void ocl::subtract(const oclMat& src1, const Scalar& s, oclMat& dst, const oclMat& mask)"],"void ocl::subtract(const oclMat&amp; src1, const oclMat&amp; src2, oclMat&amp; dst, const oclMat&amp; mask)":[199,2,1,"void ocl::subtract(const oclMat& src1, const oclMat& src2, oclMat& dst, const oclMat& mask)"],"void ocl::transpose(const oclMat &amp;src, oclMat &amp;dst)":[199,2,1,"void ocl::transpose(const oclMat &src, oclMat &dst)"],"void ocl::warpAffine(const oclMat &amp;src, oclMat &amp;dst, const Mat &amp;M, Size dsize, int flags)":[193,2,1,"void ocl::warpAffine(const oclMat &src, oclMat &dst, const Mat &M, Size dsize, int flags)"],"void ocl::warpPerspective(const oclMat &amp;src, oclMat &amp;dst, const Mat &amp;M, Size dsize, int flags)":[193,2,1,"void ocl::warpPerspective(const oclMat &src, oclMat &dst, const Mat &M, Size dsize, int flags)"],"void of2::ChowLiuTree::add(const Mat&amp; imgDescriptor)":[111,2,1,"void of2::ChowLiuTree::add(const Mat& imgDescriptor)"],"void of2::ChowLiuTree::add(const vector&lt;Mat&gt;&amp; imgDescriptors)":[111,2,1,"void of2::ChowLiuTree::add(const vector<Mat>& imgDescriptors)"],"void ogl::Arrays::bind() const":[122,2,1,""],"void ogl::Arrays::release()":[122,2,1,""],"void ogl::Arrays::resetColorArray()":[122,2,1,""],"void ogl::Arrays::resetNormalArray()":[122,2,1,""],"void ogl::Arrays::resetTexCoordArray()":[122,2,1,""],"void ogl::Arrays::resetVertexArray()":[122,2,1,""],"void ogl::Arrays::setAutoRelease(bool flag)":[122,2,1,""],"void ogl::Arrays::setColorArray(InputArray color)":[122,2,1,""],"void ogl::Arrays::setNormalArray(InputArray normal)":[122,2,1,""],"void ogl::Arrays::setTexCoordArray(InputArray texCoord)":[122,2,1,""],"void ogl::Arrays::setVertexArray(InputArray vertex)":[122,2,1,""],"void ogl::Buffer::bind(Target target) const":[122,2,1,""],"void ogl::Buffer::copyFrom(InputArray arr, Target target , bool autoRelease)":[122,2,1,""],"void ogl::Buffer::copyTo(OutputArray arr, Target target , bool autoRelease) const":[122,2,1,""],"void ogl::Buffer::create(Size asize, int atype, Target target , bool autoRelease)":[122,2,1,""],"void ogl::Buffer::create(int arows, int acols, int atype, Target target , bool autoRelease)":[122,2,1,""],"void ogl::Buffer::release()":[122,2,1,""],"void ogl::Buffer::setAutoRelease(bool flag)":[122,2,1,""],"void ogl::Buffer::unmapDevice()":[122,2,1,""],"void ogl::Buffer::unmapHost()":[122,2,1,""],"void ogl::Texture2D::bind() const":[122,2,1,""],"void ogl::Texture2D::copyFrom(InputArray arr, bool autoRelease)":[122,2,1,""],"void ogl::Texture2D::copyTo(OutputArray arr, int ddepth , bool autoRelease) const":[122,2,1,""],"void ogl::Texture2D::create(Size asize, Format aformat, bool autoRelease)":[122,2,1,""],"void ogl::Texture2D::create(int arows, int acols, Format aformat, bool autoRelease)":[122,2,1,""],"void ogl::Texture2D::release()":[122,2,1,""],"void ogl::Texture2D::setAutoRelease(bool flag)":[122,2,1,""],"void ogl::render(const Arrays&amp; arr, InputArray indices, int mode , Scalar color)":[122,2,1,"void ogl::render(const Arrays& arr, InputArray indices, int mode , Scalar color)"],"void ogl::render(const Arrays&amp; arr, int mode , Scalar color)":[122,2,1,"void ogl::render(const Arrays& arr, int mode , Scalar color)"],"void ogl::render(const Texture2D&amp; tex, Rect_&lt;double&gt; wndRect , Rect_&lt;double&gt; texRect)":[122,2,1,"void ogl::render(const Texture2D& tex, Rect_<double> wndRect , Rect_<double> texRect)"],"void perspectiveTransform(InputArray src, OutputArray dst, InputArray m)":[123,2,1,""],"void phase(InputArray x, InputArray y, OutputArray angle, bool angleInDegrees)":[123,2,1,""],"void polarToCart(InputArray magnitude, InputArray angle, OutputArray x, OutputArray y, bool angleInDegrees)":[123,2,1,""],"void polylines(InputOutputArray img, InputArrayOfArrays pts, bool isClosed, const Scalar&amp; color, int thickness, int lineType, int shift)":[117,2,1,"void polylines(InputOutputArray img, InputArrayOfArrays pts, bool isClosed, const Scalar& color, int thickness, int lineType, int shift)"],"void polylines(Mat&amp; img, const Point** pts, const int* npts, int ncontours, bool isClosed, const Scalar&amp; color, int thickness, int lineType, int shift)":[117,2,1,"void polylines(Mat& img, const Point** pts, const int* npts, int ncontours, bool isClosed, const Scalar& color, int thickness, int lineType, int shift)"],"void pow(InputArray src, double power, OutputArray dst)":[123,2,1,""],"void preCornerDetect(InputArray src, OutputArray dst, int ksize, int borderType)":[154,2,1,""],"void projectPoints(InputArray objectPoints, InputArray rvec, InputArray tvec, InputArray cameraMatrix, InputArray distCoeffs, OutputArray imagePoints, OutputArray jacobian, double aspectRatio)":[101,2,1,""],"void putText(Mat&amp; img, const string&amp; text, Point org, int fontFace, double fontScale, Scalar color, int thickness, int lineType, bool bottomLeftOrigin)":[117,2,1,"void putText(Mat& img, const string& text, Point org, int fontFace, double fontScale, Scalar color, int thickness, int lineType, bool bottomLeftOrigin)"],"void pyrDown(InputArray src, OutputArray dst, const Size&amp; dstsize, int borderType)":[155,2,1,"void pyrDown(InputArray src, OutputArray dst, const Size& dstsize, int borderType)"],"void pyrMeanShiftFiltering(InputArray src, OutputArray dst, double sp, double sr, int maxLevel, TermCriteria termcrit)":[155,2,1,""],"void pyrUp(InputArray src, OutputArray dst, const Size&amp; dstsize, int borderType)":[155,2,1,"void pyrUp(InputArray src, OutputArray dst, const Size& dstsize, int borderType)"],"void randShuffle(InputOutputArray dst, double iterFactor, RNG* rng)":[123,2,1,""],"void randn(InputOutputArray dst, InputArray mean, InputArray stddev)":[123,2,1,""],"void randu(InputOutputArray dst, InputArray low, InputArray high)":[123,2,1,""],"void rectangle(Mat&amp; img, Point pt1, Point pt2, const Scalar&amp; color, int thickness, int lineType, int shift)":[117,2,1,"void rectangle(Mat& img, Point pt1, Point pt2, const Scalar& color, int thickness, int lineType, int shift)"],"void rectangle(Mat&amp; img, Rect rec, const Scalar&amp; color, int thickness, int lineType, int shift)":[117,2,1,"void rectangle(Mat& img, Rect rec, const Scalar& color, int thickness, int lineType, int shift)"],"void reduce(InputArray src, OutputArray dst, int dim, int rtype, int dtype)":[123,2,1,""],"void registerKeyboardCallback(KeyboardCallback callback, void* cookie)":[222,2,1,""],"void registerMouseCallback(MouseCallback callback, void* cookie)":[222,2,1,""],"void remap(InputArray src, OutputArray dst, InputArray map1, InputArray map2, int interpolation, int borderMode, const Scalar&amp; borderValue)":[156,2,1,"void remap(InputArray src, OutputArray dst, InputArray map1, InputArray map2, int interpolation, int borderMode, const Scalar& borderValue)"],"void removeAllWidgets()":[222,2,1,""],"void removeWidget(const String &amp;id)":[222,2,1,"void removeWidget(const String &id)"],"void repeat(InputArray src, int ny, int nx, OutputArray dst)":[123,2,1,""],"void reprojectImageTo3D(InputArray disparity, OutputArray _3dImage, InputArray Q, bool handleMissingValues, int ddepth)":[101,2,1,""],"void resetCamera()":[222,2,1,""],"void resetCameraViewpoint (const String &amp;id)":[222,2,1,"void resetCameraViewpoint (const String &id)"],"void resize(InputArray src, OutputArray dst, Size dsize, double fx, double fy, int interpolation)":[156,2,1,""],"void resizeWindow(const string&amp; winname, int width, int height)":[153,2,1,"void resizeWindow(const string& winname, int width, int height)"],"void saveScreenshot(const String &amp;file)":[222,2,1,"void saveScreenshot(const String &file)"],"void saveWindowParameters(const string&amp; windowName)":[151,2,1,"void saveWindowParameters(const string& windowName)"],"void scaleAdd(InputArray src1, double alpha, InputArray src2, OutputArray dst)":[123,2,1,""],"void segmentMotion(InputArray mhi, OutputArray segmask, vector&lt;Rect&gt;&amp; boundingRects, double timestamp, double segThresh)":[219,2,1,"void segmentMotion(InputArray mhi, OutputArray segmask, vector<Rect>& boundingRects, double timestamp, double segThresh)"],"void sepFilter2D(InputArray src, OutputArray dst, int ddepth, InputArray kernelX, InputArray kernelY, Point anchor, double delta, int borderType)":[155,2,1,""],"void setBackgroundColor(const Color&amp; color)":[222,2,1,"void setBackgroundColor(const Color& color)"],"void setCamera(const Camera &amp;camera)":[222,2,1,"void setCamera(const Camera &camera)"],"void setColor(const Color &amp;color)":[223,2,1,"void setColor(const Color &color)"],"void setFullScreen(bool mode)":[222,2,1,""],"void setIdentity(InputOutputArray mtx, const Scalar&amp; s)":[123,2,1,"void setIdentity(InputOutputArray mtx, const Scalar& s)"],"void setImage(InputArray image)":[223,2,1,""],"void setMouseCallback(const string&amp; winname, MouseCallback onMouse, void* userdata)":[153,2,1,"void setMouseCallback(const string& winname, MouseCallback onMouse, void* userdata)"],"void setNumThreads(int nthreads)":[124,2,1,""],"void setOpenGlContext(const string&amp; winname)":[153,2,1,"void setOpenGlContext(const string& winname)"],"void setOpenGlDrawCallback(const string&amp; winname, OpenGlDrawCallback onOpenGlDraw, void* userdata)":[151,2,1,"void setOpenGlDrawCallback(const string& winname, OpenGlDrawCallback onOpenGlDraw, void* userdata)"],"void setPose(const Affine3d &amp;pose)":[223,2,1,"void setPose(const Affine3d &pose)"],"void setRenderingProperty(const String &amp;id, int property, double value)":[222,2,1,"void setRenderingProperty(const String &id, int property, double value)"],"void setRenderingProperty(int property, double value)":[223,2,1,""],"void setRepresentation(int representation)":[222,2,1,""],"void setText(const String &amp;text)":[223,2,1,"void setText(const String &text)"],"void setTrackbarPos(const string&amp; trackbarname, const string&amp; winname, int pos)":[153,2,1,"void setTrackbarPos(const string& trackbarname, const string& winname, int pos)"],"void setViewerPose(const Affine3d &amp;pose)":[222,2,1,"void setViewerPose(const Affine3d &pose)"],"void setWidgetPose(const String &amp;id, const Affine3d &amp;pose)":[222,2,1,"void setWidgetPose(const String &id, const Affine3d &pose)"],"void setWindowPosition(int x, int y)":[222,2,1,""],"void setWindowProperty(const string&amp; winname, int prop_id, double prop_value)":[151,2,1,"void setWindowProperty(const string& winname, int prop_id, double prop_value)"],"void setWindowSize(const Size &amp;window_size)":[222,2,1,"void setWindowSize(const Size &window_size)"],"void showImage(InputArray image, const Size&amp; window_size)":[222,2,1,"void showImage(InputArray image, const Size& window_size)"],"void solvePnPRansac(InputArray objectPoints, InputArray imagePoints, InputArray cameraMatrix, InputArray distCoeffs, OutputArray rvec, OutputArray tvec, bool useExtrinsicGuess, int iterationsCount , float reprojectionError , int minInliersCount , OutputArray inliers , int flags)":[101,2,1,""],"void sort(InputArray src, OutputArray dst, int flags)":[123,2,1,""],"void sortIdx(InputArray src, OutputArray dst, int flags)":[123,2,1,""],"void spin()":[222,2,1,""],"void spinOnce(int time , bool force_redraw)":[222,2,1,""],"void split(InputArray m, OutputArrayOfArrays mv)":[123,2,1,""],"void split(const Mat&amp; src, Mat* mvbegin)":[123,2,1,"void split(const Mat& src, Mat* mvbegin)"],"void sqrt(InputArray src, OutputArray dst)":[123,2,1,""],"void stereoRectify(InputArray cameraMatrix1, InputArray distCoeffs1, InputArray cameraMatrix2, InputArray distCoeffs2, Size imageSize, InputArray R, InputArray T, OutputArray R1, OutputArray R2, OutputArray P1, OutputArray P2, OutputArray Q, int flags, double alpha, Size newImageSize, Rect* validPixROI1, Rect* validPixROI2)":[101,2,1,""],"void subtract(InputArray src1, InputArray src2, OutputArray dst, InputArray mask, int dtype)":[123,2,1,""],"void superres::SuperResolution::collectGarbage()":[217,2,1,""],"void superres::SuperResolution::nextFrame(OutputArray frame)":[217,2,1,""],"void superres::SuperResolution::setInput(const Ptr&lt;FrameSource&gt;&amp; frameSource)":[217,2,1,"void superres::SuperResolution::setInput(const Ptr<FrameSource>& frameSource)"],"void transform(InputArray src, OutputArray dst, InputArray m)":[123,2,1,""],"void transpose(InputArray src, OutputArray dst)":[123,2,1,""],"void triangulatePoints(InputArray projMatr1, InputArray projMatr2, InputArray projPoints1, InputArray projPoints2, OutputArray points4D)":[101,2,1,""],"void undistort(InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray newCameraMatrix)":[156,2,1,""],"void undistortPoints(InputArray src, OutputArray dst, InputArray cameraMatrix, InputArray distCoeffs, InputArray R, InputArray P)":[156,2,1,""],"void updateMotionHistory(InputArray silhouette, InputOutputArray mhi, double timestamp, double duration)":[219,2,1,""],"void updateWidgetPose(const Affine3d &amp;pose)":[223,2,1,"void updateWidgetPose(const Affine3d &pose)"],"void updateWidgetPose(const String &amp;id, const Affine3d &amp;pose)":[222,2,1,"void updateWidgetPose(const String &id, const Affine3d &pose)"],"void updateWindow(const string&amp; winname)":[153,2,1,"void updateWindow(const string& winname)"],"void warpAffine(InputArray src, OutputArray dst, InputArray M, Size dsize, int flags, int borderMode, const Scalar&amp; borderValue)":[156,2,1,"void warpAffine(InputArray src, OutputArray dst, InputArray M, Size dsize, int flags, int borderMode, const Scalar& borderValue)"],"void warpPerspective(InputArray src, OutputArray dst, InputArray M, Size dsize, int flags, int borderMode, const Scalar&amp; borderValue)":[156,2,1,"void warpPerspective(InputArray src, OutputArray dst, InputArray M, Size dsize, int flags, int borderMode, const Scalar& borderValue)"],"void watershed(InputArray image, InputOutputArray markers)":[159,2,1,""],"void* FileNode::readObj() const":[125,2,1,""],"void* cvAlloc(size_t size)":[124,4,1,""],"void* cvClone(const void* struct_ptr)":[121,4,1,""],"void* cvCvtSeqToArray(const CvSeq* seq, void* elements, CvSlice slice)":[118,4,1,""],"void* cvLoad(const char* filename, CvMemStorage* memstorage, const char* name, const char** real_name)":[121,4,1,""],"void* cvMemStorageAlloc(CvMemStorage* storage, size_t size)":[118,4,1,""],"void* cvNextTreeNode(CvTreeNodeIterator* tree_iterator)":[118,4,1,""],"void* cvPrevTreeNode(CvTreeNodeIterator* tree_iterator)":[118,4,1,""],"void* cvRead(CvFileStorage* fs, CvFileNode* node, CvAttrList* attributes)":[121,4,1,""],"void* cvReadByName(CvFileStorage* fs, const CvFileNode* map, const char* name, CvAttrList* attributes)":[121,4,1,""],"void* fastMalloc(size_t bufSize)":[124,2,1,""],"void* imageId":[120,5,1,""],"void* tileInfo":[120,5,1,""],"void** hashtable":[120,5,1,""],ARRAY_BUFFER:[122,0,1,""],Algorithm:[114,1,1,""],BOWImgDescriptorExtractor:[133,1,1,""],BOWTrainer:[133,1,1,""],BaseColumnFilter:[155,1,1,""],BaseFilter:[155,1,1,""],BaseLoaderCallback:[226,9,1,""],BaseRowFilter:[155,1,1,""],Camera:[222,1,1,""],CascadeClassifier:[186,1,1,""],Color:[222,1,1,""],CvANN_MLP_TrainParams:[179,3,1,""],CvArr:[120,3,1,""],CvAttrList:[121,3,1,""],CvBox2D:[120,3,1,""],CvDTreeNode:[172,3,1,""],CvDTreeParams:[172,3,1,""],CvDTreeSplit:[172,3,1,""],CvDTreeTrainData:[172,3,1,""],CvEMParams:[165,3,1,""],CvFileNode:[121,3,1,""],CvFileStorage:[121,3,1,""],CvGraph:[118,3,1,""],CvGraphEdge:[118,3,1,""],CvGraphScanner:[118,3,1,""],CvGraphVtx:[118,3,1,""],CvLSVMFilterObject:[187,3,1,""],CvLSVMFilterPosition:[187,3,1,""],CvLatentSvmDetector:[187,3,1,""],CvMLData:[178,1,1,""],CvMat:[120,3,1,""],CvMatND:[120,3,1,""],CvMemBlock:[118,3,1,""],CvMemStorage:[118,3,1,""],CvMemStoragePos:[118,3,1,""],CvObjectDetection:[187,3,1,""],CvParamGrid:[183,3,1,""],CvPoint2D32f:[120,3,1,""],CvPoint2D64f:[120,3,1,""],CvPoint3D32f:[120,3,1,""],CvPoint3D64f:[120,3,1,""],CvPoint:[120,3,1,""],CvQuadEdge2D:[170,3,1,""],CvRect:[120,3,1,""],CvSVMParams:[183,3,1,""],CvScalar:[120,3,1,""],CvSeq:[118,3,1,""],CvSet:[118,3,1,""],CvSetElem:[118,3,1,""],CvSize2D32f:[120,3,1,""],CvSize:[120,3,1,""],CvSlice:[118,3,1,""],CvSparseMat:[120,3,1,""],CvStatModel:[182,1,1,""],CvSubdiv2D:[170,3,1,""],CvSubdiv2DPoint:[170,3,1,""],CvTermCriteria:[120,3,1,""],CvTrainTestSplit:[178,3,1,""],CvTreeNodeIterator:[118,3,1,""],CvTypeInfo:[121,3,1,""],DEPTH_COMPONENT:[122,0,1,""],DMatch:[127,3,1,""],DataType:[114,1,1,""],ELEMENT_ARRAY_BUFFER:[122,0,1,""],FEATURE_SET_COMPUTE_10:[143,0,1,""],FEATURE_SET_COMPUTE_11:[143,0,1,""],FEATURE_SET_COMPUTE_12:[143,0,1,""],FEATURE_SET_COMPUTE_13:[143,0,1,""],FEATURE_SET_COMPUTE_20:[143,0,1,""],FEATURE_SET_COMPUTE_21:[143,0,1,""],FeatureEvaluator:[186,1,1,""],FernClassifier:[164,1,1,""],FileNode:[125,1,1,""],FileNodeIterator:[125,1,1,""],FileStorage:[125,1,1,""],FilterEngine:[155,1,1,""],GLOBAL_ATOMICS:[143,0,1,""],GenericDescriptorMatcher:[129,1,1,""],H264:[149,0,1,""],H264_MVC:[149,0,1,""],H264_SVC:[149,0,1,""],INCOMPATIBLE_MANAGER_VERSION:[230,10,1,""],INIT_FAILED:[230,10,1,""],INSTALL_CANCELED:[230,10,1,""],InputArray:[114,1,1,""],InstallCallbackInterface:[227,9,1,""],IplImage:[120,3,1,""],JPEG:[149,0,1,""],KalmanFilter:[219,1,1,""],KeyPoint:[128,1,1,""],KeyboardEvent:[222,1,1,""],LatentSvmDetector:[187,1,1,""],LineIterator:[117,1,1,""],LoaderCallbackInterface:[230,9,1,""],MARKET_ERROR:[230,10,1,""],MPEG1:[149,0,1,""],MPEG2:[149,0,1,""],MPEG4:[149,0,1,""],Mat:[114,1,1,""],Mat_:[114,1,1,""],Matx:[114,1,1,""],Mesh:[222,1,1,""],Monochrome:[149,0,1,""],MouseEvent:[222,1,1,""],NATIVE_DOUBLE:[143,0,1,""],NAryMatIterator:[114,1,1,""],NONE:[122,0,1,""],OPENCV_VERSION_2_4_10:[229,10,1,""],OPENCV_VERSION_2_4_11:[229,10,1,""],OPENCV_VERSION_2_4_12:[229,10,1,""],OPENCV_VERSION_2_4_13:[229,10,1,""],OPENCV_VERSION_2_4_2:[229,10,1,""],OPENCV_VERSION_2_4_3:[229,10,1,""],OPENCV_VERSION_2_4_4:[229,10,1,""],OPENCV_VERSION_2_4_5:[229,10,1,""],OPENCV_VERSION_2_4_6:[229,10,1,""],OPENCV_VERSION_2_4_7:[229,10,1,""],OPENCV_VERSION_2_4_8:[229,10,1,""],OPENCV_VERSION_2_4_9:[229,10,1,""],OneWayDescriptorBase:[164,1,1,""],OpenCVLoader:[229,9,1,""],PCA:[123,1,1,""],PIXEL_PACK_BUFFER:[122,0,1,""],PIXEL_UNPACK_BUFFER:[122,0,1,""],Point3_:[114,1,1,""],Point_:[114,1,1,""],Ptr:[114,1,1,""],RGB:[122,0,1,""],RGBA:[122,0,1,""],RNG:[123,1,1,""],RTreeClassifier:[166,1,1,""],RTreeNode:[166,3,1,""],RandomizedTree:[166,1,1,""],Range:[114,1,1,""],Rect_:[114,1,1,""],Retina:[112,1,1,""],RotatedRect:[114,1,1,""],SHARED_ATOMICS:[143,0,1,""],SUCCESS:[230,10,1,""],SVD:[123,1,1,""],Scalar_:[114,1,1,""],Size_:[114,1,1,""],SparseMat:[114,1,1,""],SparseMat_:[114,1,1,""],StereoBM:[101,1,1,""],StereoSGBM:[101,1,1,""],StereoVar:[113,1,1,""],Stitcher:[210,1,1,""],TermCriteria:[114,1,1,""],Uncompressed_NV12:[149,0,1,""],Uncompressed_UYVY:[149,0,1,""],Uncompressed_YUV420:[149,0,1,""],Uncompressed_YUYV:[149,0,1,""],Uncompressed_YV12:[149,0,1,""],VC1:[149,0,1,""],Vec:[114,1,1,""],VideoCapture:[152,1,1,""],VideoWriter:[152,1,1,""],Viz3d:[222,1,1,""],WAVE_CORRECT_HORIZ:[213,0,1,""],WAVE_CORRECT_VERT:[213,0,1,""],WArrow:[223,1,1,""],WCameraPosition:[223,1,1,""],WCircle:[223,1,1,""],WCloud:[223,1,1,""],WCloudCollection:[223,1,1,""],WCloudNormals:[223,1,1,""],WCone:[223,1,1,""],WCoordinateSystem:[223,1,1,""],WCube:[223,1,1,""],WCylinder:[223,1,1,""],WGrid:[223,1,1,""],WImage3D:[223,1,1,""],WImageOverlay:[223,1,1,""],WLine:[223,1,1,""],WMesh:[223,1,1,""],WPlane:[223,1,1,""],WPolyLine:[223,1,1,""],WSphere:[223,1,1,""],WText3D:[223,1,1,""],WText:[223,1,1,""],WTrajectory:[223,1,1,""],WTrajectoryFrustums:[223,1,1,""],WTrajectorySpheres:[223,1,1,""],WWidgetMerger:[223,1,1,""],WarperCreator:[210,1,1,""],Widget2D:[223,1,1,""],Widget3D:[223,1,1,""],Widget:[223,1,1,""],WidgetAccessor:[223,1,1,""],YUV420:[149,0,1,""],YUV422:[149,0,1,""],YUV444:[149,0,1,""],center:[101,9,1,""]},"bool CvStatModel::train(const Mat&amp; train_data, [int tflag,] ..., const Mat&amp; responses, ..., [const Mat&amp; var_idx,] ..., [const Mat&amp; sample_idx,] ... [const Mat&amp; var_type,] ..., [const Mat&amp; missing_mask,] &lt;misc_training_alg_params&gt; ..":{")":[182,2,1,"bool CvStatModel::train(const Mat& train_data, [int tflag,] ..., const Mat& responses, ..., [const Mat& var_idx,] ..., [const Mat& sample_idx,] ... [const Mat& var_type,] ..., [const Mat& missing_mask,] <misc_training_alg_params> ...)"]},"cv2.ANN_MLP":{create:[179,7,1,""],predict:[179,7,1,""],train:[179,7,1,""]},"cv2.BackgroundSubtractor":{apply:[219,7,1,""]},"cv2.Boost":{predict:[171,7,1,""],prune:[171,7,1,""],train:[171,7,1,""]},"cv2.CascadeClassifier":{detectMultiScale:[186,7,1,""],empty:[186,7,1,""],load:[186,7,1,""]},"cv2.DTree":{getVarImportance:[172,7,1,""],predict:[172,7,1,""],train:[172,7,1,""]},"cv2.EM":{isTrained:[174,7,1,""],predict:[174,7,1,""],train:[174,7,1,""],trainE:[174,7,1,""],trainM:[174,7,1,""]},"cv2.GBTrees":{clear:[175,7,1,""],predict:[175,7,1,""],train:[175,7,1,""]},"cv2.KNearest":{find_nearest:[176,7,1,""],train:[176,7,1,""]},"cv2.KalmanFilter":{correct:[219,7,1,""],predict:[219,7,1,""]},"cv2.NormalBayesClassifier":{predict:[180,7,1,""],train:[180,7,1,""]},"cv2.RTrees":{getVarImportance:[181,7,1,""],predict:[181,7,1,""],predict_prob:[181,7,1,""],train:[181,7,1,""]},"cv2.SURF":{detect:[184,7,1,""],detectAndCompute:[184,7,1,""]},"cv2.SVM":{get_support_vector_count:[183,7,1,""],get_var_count:[183,7,1,""],predict:[183,7,1,""],predict_all:[183,7,1,""],train:[183,7,1,""],train_auto:[183,7,1,""]},"cv2.StatModel":{load:[182,7,1,""],save:[182,7,1,""]},"cv2.StereoBM":{compute:[101,7,1,""]},"cv2.StereoSGBM":{compute:[101,7,1,""]},"cv2.VideoCapture":{get:[152,7,1,""],grab:[152,7,1,""],isOpened:[152,7,1,""],open:[152,7,1,""],read:[152,7,1,""],release:[152,7,1,""],retrieve:[152,7,1,""],set:[152,7,1,""]},"cv2.VideoWriter":{isOpened:[152,7,1,""],open:[152,7,1,""],write:[152,7,1,""]},"float CvStatModel::predict(const Mat&amp; sample, ..":{") const":[182,2,1,"float CvStatModel::predict(const Mat& sample, ...) const"]},"string format(const char* fmt, ..":{")":[124,2,1,""]},"template&lt;..":{"&gt; _Tp saturate_cast(_Tp2 v)":[124,2,1,"template<...> _Tp saturate_cast(_Tp2 v)"]},cv2:{ANN_MLP:[179,7,1,""],BackgroundSubtractorMOG:[219,7,1,""],Boost:[171,7,1,""],CamShift:[219,7,1,""],Canny:[154,7,1,""],CascadeClassifier:[186,7,1,""],EM:[174,7,1,""],GBTrees:[175,7,1,""],GaussianBlur:[155,7,1,""],HoughCircles:[154,7,1,""],HoughLines:[154,7,1,""],HoughLinesP:[154,7,1,""],HuMoments:[162,7,1,""],KalmanFilter:[219,7,1,""],KeyPoint:[128,7,1,""],LUT:[123,7,1,""],Laplacian:[155,7,1,""],Mahalanobis:[123,7,1,""],NormalBayesClassifier:[180,7,1,""],PCABackProject:[123,7,1,""],PCACompute:[123,7,1,""],PCAComputeVar:[123,7,1,""],PCAProject:[123,7,1,""],RQDecomp3x3:[101,7,1,""],Rodrigues:[101,7,1,""],SURF:[184,7,1,""],SVBackSubst:[123,7,1,""],SVDecomp:[123,7,1,""],SVM:[183,7,1,""],Scharr:[155,7,1,""],Sobel:[155,7,1,""],StereoBM:[101,7,1,""],StereoSGBM:[101,7,1,""],VideoCapture:[152,7,1,""],VideoWriter:[152,7,1,""],absdiff:[123,7,1,""],accumulate:[160,7,1,""],accumulateProduct:[160,7,1,""],accumulateSquare:[160,7,1,""],accumulateWeighted:[160,7,1,""],adaptiveBilateralFilter:[155,7,1,""],adaptiveThreshold:[159,7,1,""],add:[123,7,1,""],addWeighted:[123,7,1,""],approxPolyDP:[162,7,1,""],arcLength:[162,7,1,""],bilateralFilter:[155,7,1,""],bitwise_and:[123,7,1,""],bitwise_not:[123,7,1,""],bitwise_or:[123,7,1,""],bitwise_xor:[123,7,1,""],blur:[155,7,1,""],borderInterpolate:[155,7,1,""],boundingRect:[162,7,1,""],boxFilter:[155,7,1,""],buildOpticalFlowPyramid:[219,7,1,""],calcBackProject:[157,7,1,""],calcCovarMatrix:[123,7,1,""],calcGlobalOrientation:[219,7,1,""],calcHist:[157,7,1,""],calcMotionGradient:[219,7,1,""],calcOpticalFlowFarneback:[219,7,1,""],calcOpticalFlowPyrLK:[219,7,1,""],calibrateCamera:[101,7,1,""],calibrationMatrixValues:[101,7,1,""],cartToPolar:[123,7,1,""],checkHardwareSupport:[124,7,1,""],checkRange:[123,7,1,""],circle:[117,7,1,""],clipLine:[117,7,1,""],compare:[123,7,1,""],compareHist:[157,7,1,""],completeSymm:[123,7,1,""],composeRT:[101,7,1,""],contourArea:[162,7,1,""],convertMaps:[156,7,1,""],convertPointsFromHomogeneous:[101,7,1,""],convertPointsToHomogeneous:[101,7,1,""],convertScaleAbs:[123,7,1,""],convexHull:[162,7,1,""],convexityDefects:[162,7,1,""],copyMakeBorder:[155,7,1,""],cornerEigenValsAndVecs:[154,7,1,""],cornerHarris:[154,7,1,""],cornerMinEigenVal:[154,7,1,""],cornerSubPix:[154,7,1,""],correctMatches:[101,7,1,""],countNonZero:[123,7,1,""],cubeRoot:[124,7,1,""],cvtColor:[159,7,1,""],dct:[123,7,1,""],decomposeProjectionMatrix:[101,7,1,""],destroyAllWindows:[153,7,1,""],destroyWindow:[153,7,1,""],determinant:[123,7,1,""],dft:[123,7,1,""],dilate:[155,7,1,""],distanceTransform:[159,7,1,""],divide:[123,7,1,""],drawChessboardCorners:[101,7,1,""],drawContours:[162,7,1,""],eigen:[123,7,1,""],ellipse2Poly:[117,7,1,""],ellipse:[117,7,1,""],equalizeHist:[157,7,1,""],erode:[155,7,1,""],estimateAffine3D:[101,7,1,""],estimateRigidTransform:[219,7,1,""],exp:[123,7,1,""],fastAtan2:[124,7,1,""],fillConvexPoly:[117,7,1,""],fillPoly:[117,7,1,""],filter2D:[155,7,1,""],filterSpeckles:[101,7,1,""],findChessboardCorners:[101,7,1,""],findCirclesGridDefault:[101,7,1,""],findContours:[162,7,1,""],findFundamentalMat:[101,7,1,""],findHomography:[101,7,1,""],fitEllipse:[162,7,1,""],fitLine:[162,7,1,""],flip:[123,7,1,""],floodFill:[159,7,1,""],gemm:[123,7,1,""],getAffineTransform:[156,7,1,""],getCPUTickCount:[124,7,1,""],getDefaultNewCameraMatrix:[156,7,1,""],getDerivKernels:[155,7,1,""],getGaussianKernel:[155,7,1,""],getOptimalDFTSize:[123,7,1,""],getOptimalNewCameraMatrix:[101,7,1,""],getPerspectiveTransform:[156,7,1,""],getRectSubPix:[156,7,1,""],getRotationMatrix2D:[156,7,1,""],getStructuringElement:[155,7,1,""],getTextSize:[117,7,1,""],getTickCount:[124,7,1,""],getTickFrequency:[124,7,1,""],getTrackbarPos:[153,7,1,""],getWindowProperty:[151,7,1,""],goodFeaturesToTrack:[154,7,1,""],grabCut:[159,7,1,""],groupRectangles:[186,7,1,""],idct:[123,7,1,""],idft:[123,7,1,""],imdecode:[152,7,1,""],imencode:[152,7,1,""],imread:[152,7,1,""],imshow:[153,7,1,""],imwrite:[152,7,1,""],inRange:[123,7,1,""],initCameraMatrix2D:[101,7,1,""],initUndistortRectifyMap:[156,7,1,""],inpaint:[203,7,1,""],integral2:[159,7,1,""],integral3:[159,7,1,""],integral:[159,7,1,""],invert:[123,7,1,""],invertAffineTransform:[156,7,1,""],isContourConvex:[162,7,1,""],kmeans:[115,7,1,""],line:[117,7,1,""],log:[123,7,1,""],magnitude:[123,7,1,""],matMulDeriv:[101,7,1,""],matchShapes:[162,7,1,""],matchTemplate:[161,7,1,""],max:[123,7,1,""],mean:[123,7,1,""],meanShift:[219,7,1,""],meanStdDev:[123,7,1,""],medianBlur:[155,7,1,""],merge:[123,7,1,""],min:[123,7,1,""],minAreaRect:[162,7,1,""],minEnclosingCircle:[162,7,1,""],minMaxLoc:[123,7,1,""],mixChannels:[123,7,1,""],moments:[162,7,1,""],morphologyEx:[155,7,1,""],moveWindow:[153,7,1,""],mulSpectrums:[123,7,1,""],mulTransposed:[123,7,1,""],multiply:[123,7,1,""],namedWindow:[153,7,1,""],norm:[123,7,1,""],normalize:[123,7,1,""],perspectiveTransform:[123,7,1,""],phase:[123,7,1,""],pointPolygonTest:[162,7,1,""],polarToCart:[123,7,1,""],polylines:[117,7,1,""],pow:[123,7,1,""],preCornerDetect:[154,7,1,""],projectPoints:[101,7,1,""],putText:[117,7,1,""],pyrDown:[155,7,1,""],pyrMeanShiftFiltering:[155,7,1,""],pyrUp:[155,7,1,""],randShuffle:[123,7,1,""],randn:[123,7,1,""],randu:[123,7,1,""],rectangle:[117,7,1,""],reduce:[123,7,1,""],remap:[156,7,1,""],repeat:[123,7,1,""],reprojectImageTo3D:[101,7,1,""],resize:[156,7,1,""],resizeWindow:[153,7,1,""],scaleAdd:[123,7,1,""],segmentMotion:[219,7,1,""],sepFilter2D:[155,7,1,""],setIdentity:[123,7,1,""],setTrackbarPos:[153,7,1,""],setUseOptimized:[124,7,1,""],setWindowProperty:[151,7,1,""],solve:[123,7,1,""],solveCubic:[123,7,1,""],solvePnP:[101,7,1,""],solvePnPRansac:[101,7,1,""],solvePoly:[123,7,1,""],sort:[123,7,1,""],sortIdx:[123,7,1,""],split:[123,7,1,""],sqrt:[123,7,1,""],stereoCalibrate:[101,7,1,""],stereoRectifyUncalibrated:[101,7,1,""],subtract:[123,7,1,""],sumElems:[123,7,1,""],threshold:[159,7,1,""],trace:[123,7,1,""],transform:[123,7,1,""],transpose:[123,7,1,""],triangulatePoints:[101,7,1,""],undistort:[156,7,1,""],undistortPoints:[156,7,1,""],updateMotionHistory:[219,7,1,""],useOptimized:[124,7,1,""],waitKey:[153,7,1,""],warpAffine:[156,7,1,""],warpPerspective:[156,7,1,""],watershed:[159,7,1,""]},cv:{AbsDiff:[123,6,1,""],AbsDiffS:[123,6,1,""],Acc:[160,6,1,""],AdaptiveThreshold:[159,6,1,""],Add:[123,6,1,""],AddS:[123,6,1,""],AddWeighted:[123,6,1,""],And:[123,6,1,""],AndS:[123,6,1,""],ApproxChains:[162,6,1,""],ArcLength:[162,6,1,""],Avg:[123,6,1,""],AvgSdv:[123,6,1,""],BoundingRect:[162,6,1,""],CalcBackProject:[157,6,1,""],CalcBackProjectPatch:[157,6,1,""],CalcCovarMatrix:[123,6,1,""],CalcEMD2:[157,6,1,""],CalcGlobalOrientation:[219,6,1,""],CalcHist:[157,6,1,""],CalcMotionGradient:[219,6,1,""],CalcOpticalFlowBM:[169,6,1,""],CalcOpticalFlowHS:[169,6,1,""],CalcOpticalFlowLK:[169,6,1,""],CalcOpticalFlowPyrLK:[219,6,1,""],CalcProbDensity:[157,6,1,""],CalcSubdivVoronoi2D:[170,6,1,""],CalibrateCamera2:[101,6,1,""],CamShift:[219,6,1,""],Canny:[154,6,1,""],CaptureFromCAM:[152,6,1,""],CaptureFromFile:[152,6,1,""],CartToPolar:[123,6,1,""],Cbrt:[124,6,1,""],Ceil:[124,6,1,""],CheckContourConvexity:[162,6,1,""],Circle:[117,6,1,""],ClearHist:[157,6,1,""],ClearND:[120,6,1,""],ClearSubdivVoronoi2D:[170,6,1,""],ClipLine:[117,6,1,""],CloneImage:[120,6,1,""],CloneMat:[120,6,1,""],CloneMatND:[120,6,1,""],CloneSeq:[118,6,1,""],Cmp:[123,6,1,""],CmpS:[123,6,1,""],CompareHist:[157,6,1,""],ComputeCorrespondEpilines:[101,6,1,""],ContourArea:[162,6,1,""],Convert:[120,6,1,""],ConvertPointsHomogeneous:[101,6,1,""],ConvertScale:[120,6,1,""],ConvertScaleAbs:[123,6,1,""],ConvexHull2:[162,6,1,""],ConvexityDefects:[162,6,1,""],Copy:[120,6,1,""],CopyMakeBorder:[155,6,1,""],CornerEigenValsAndVecs:[154,6,1,""],CornerHarris:[154,6,1,""],CornerMinEigenVal:[154,6,1,""],CountNonZero:[123,6,1,""],CreateData:[120,6,1,""],CreateHist:[157,6,1,""],CreateImage:[120,6,1,""],CreateImageHeader:[120,6,1,""],CreateKalman:[219,6,1,""],CreateMat:[120,6,1,""],CreateMatHeader:[120,6,1,""],CreateMatND:[120,6,1,""],CreateMatNDHeader:[120,6,1,""],CreateMemStorage:[118,6,1,""],CreateStereoBMState:[101,6,1,""],CreateStructuringElementEx:[155,6,1,""],CreateSubdivDelaunay2D:[170,6,1,""],CreateTrackbar:[153,6,1,""],CreateVideoWriter:[152,6,1,""],CrossProduct:[120,6,1,""],CvtColor:[159,6,1,""],DCT:[123,6,1,""],DFT:[123,6,1,""],DecomposeProjectionMatrix:[101,6,1,""],DestroyAllWindows:[153,6,1,""],DestroyWindow:[153,6,1,""],Det:[123,6,1,""],Dilate:[155,6,1,""],DistTransform:[159,6,1,""],Div:[123,6,1,""],DotProduct:[120,6,1,""],DrawChessboardCorners:[101,6,1,""],DrawContours:[162,6,1,""],EigenVV:[123,6,1,""],Ellipse:[117,6,1,""],EllipseBox:[117,6,1,""],Erode:[155,6,1,""],Exp:[123,6,1,""],ExtractSURF:[184,6,1,""],FastArctan:[124,6,1,""],FillConvexPoly:[117,6,1,""],FillPoly:[117,6,1,""],Filter2D:[155,6,1,""],FindChessboardCorners:[101,6,1,""],FindContours:[162,6,1,""],FindCornerSubPix:[154,6,1,""],FindExtrinsicCameraParams2:[101,6,1,""],FindFundamentalMat:[101,6,1,""],FindHomography:[101,6,1,""],FindNearestPoint2D:[170,6,1,""],FindStereoCorrespondenceBM:[101,6,1,""],FitEllipse2:[162,6,1,""],FitLine:[162,6,1,""],Flip:[123,6,1,""],FloodFill:[159,6,1,""],Floor:[124,6,1,""],GEMM:[123,6,1,""],Get1D:[120,6,1,""],Get2D:[120,6,1,""],Get3D:[120,6,1,""],GetAffineTransform:[156,6,1,""],GetCaptureProperty:[152,6,1,""],GetCol:[120,6,1,""],GetCols:[120,6,1,""],GetDiag:[120,6,1,""],GetDims:[120,6,1,""],GetElemType:[120,6,1,""],GetHuMoments:[162,6,1,""],GetImage:[120,6,1,""],GetImageCOI:[120,6,1,""],GetImageROI:[120,6,1,""],GetMat:[120,6,1,""],GetMinMaxHistValue:[157,6,1,""],GetND:[120,6,1,""],GetOptimalDFTSize:[123,6,1,""],GetOptimalNewCameraMatrix:[101,6,1,""],GetPerspectiveTransform:[156,6,1,""],GetQuadrangleSubPix:[156,6,1,""],GetReal1D:[120,6,1,""],GetReal2D:[120,6,1,""],GetReal3D:[120,6,1,""],GetRealND:[120,6,1,""],GetRectSubPix:[156,6,1,""],GetRotationMatrix2D:[156,6,1,""],GetRow:[120,6,1,""],GetRows:[120,6,1,""],GetSize:[120,6,1,""],GetSubRect:[120,6,1,""],GetTextSize:[117,6,1,""],GetTrackbarPos:[153,6,1,""],GoodFeaturesToTrack:[154,6,1,""],GrabFrame:[152,6,1,""],HaarDetectObjects:[186,6,1,""],HoughLines2:[154,6,1,""],InRange:[123,6,1,""],InRangeS:[123,6,1,""],InitIntrinsicParams2D:[101,6,1,""],InitUndistortMap:[156,6,1,""],InitUndistortRectifyMap:[156,6,1,""],Inpaint:[203,6,1,""],Integral:[159,6,1,""],Invert:[123,6,1,""],IsInf:[124,6,1,""],IsNaN:[124,6,1,""],KMeans2:[115,6,1,""],KalmanCorrect:[219,6,1,""],KalmanPredict:[219,6,1,""],LUT:[123,6,1,""],Laplace:[155,6,1,""],Line:[117,6,1,""],Load:[121,6,1,""],LoadImage:[152,6,1,""],LoadImageM:[152,6,1,""],Log:[123,6,1,""],LogPolar:[156,6,1,""],Mahalonobis:[123,6,1,""],MatchShapes:[162,6,1,""],MatchTemplate:[161,6,1,""],Max:[123,6,1,""],MaxS:[123,6,1,""],MeanShift:[219,6,1,""],Merge:[123,6,1,""],Min:[123,6,1,""],MinAreaRect2:[162,6,1,""],MinEnclosingCircle:[162,6,1,""],MinMaxLoc:[123,6,1,""],MinS:[123,6,1,""],MixChannels:[123,6,1,""],Moments:[162,6,1,""],MorphologyEx:[155,6,1,""],MoveWindow:[153,6,1,""],Mul:[123,6,1,""],MulSpectrums:[123,6,1,""],MulTransposed:[123,6,1,""],MultiplyAcc:[160,6,1,""],NamedWindow:[153,6,1,""],Norm:[123,6,1,""],NormalizeHist:[157,6,1,""],Not:[123,6,1,""],Or:[123,6,1,""],OrS:[123,6,1,""],PerspectiveTransform:[123,6,1,""],PointPolygonTest:[162,6,1,""],PolarToCart:[123,6,1,""],PolyLine:[117,6,1,""],Pow:[123,6,1,""],PreCornerDetect:[154,6,1,""],ProjectPoints2:[101,6,1,""],PutText:[117,6,1,""],PyrDown:[155,6,1,""],PyrMeanShiftFiltering:[155,6,1,""],PyrUp:[155,6,1,""],QueryFrame:[152,6,1,""],QueryHistValue_1D:[167,6,1,""],QueryHistValue_2D:[167,6,1,""],QueryHistValue_3D:[167,6,1,""],QueryHistValue_nD:[167,6,1,""],RNG:[120,6,1,""],RQDecomp3x3:[101,6,1,""],RandArr:[120,6,1,""],RandInt:[120,6,1,""],RandReal:[120,6,1,""],Rectangle:[117,6,1,""],Reduce:[123,6,1,""],Remap:[156,6,1,""],Repeat:[123,6,1,""],ReprojectImageTo3D:[101,6,1,""],ResetImageROI:[120,6,1,""],Reshape:[120,6,1,""],ReshapeMatND:[120,6,1,""],Resize:[156,6,1,""],ResizeWindow:[153,6,1,""],RetrieveFrame:[152,6,1,""],Rodrigues2:[101,6,1,""],Round:[124,6,1,""],RunningAvg:[160,6,1,""],SVBkSb:[123,6,1,""],SVD:[123,6,1,""],Save:[121,6,1,""],SaveImage:[152,6,1,""],ScaleAdd:[123,6,1,""],SegmentMotion:[219,6,1,""],Set1D:[120,6,1,""],Set2D:[120,6,1,""],Set3D:[120,6,1,""],Set:[120,6,1,""],SetCaptureProperty:[152,6,1,""],SetData:[120,6,1,""],SetIdentity:[123,6,1,""],SetImageCOI:[120,6,1,""],SetImageROI:[120,6,1,""],SetMouseCallback:[153,6,1,""],SetND:[120,6,1,""],SetReal1D:[120,6,1,""],SetReal2D:[120,6,1,""],SetReal3D:[120,6,1,""],SetRealND:[120,6,1,""],SetTrackbarPos:[153,6,1,""],SetZero:[120,6,1,""],ShowImage:[153,6,1,""],Smooth:[155,6,1,""],Sobel:[155,6,1,""],Solve:[123,6,1,""],SolveCubic:[123,6,1,""],Split:[123,6,1,""],Sqrt:[123,6,1,""],SquareAcc:[160,6,1,""],StereoCalibrate:[101,6,1,""],StereoRectify:[101,6,1,""],StereoRectifyUncalibrated:[101,6,1,""],Sub:[123,6,1,""],SubRS:[123,6,1,""],SubS:[123,6,1,""],Subdiv2DEdgeDst:[170,6,1,""],Subdiv2DGetEdge:[170,6,1,""],Subdiv2DLocate:[170,6,1,""],Subdiv2DNextEdge:[170,6,1,""],Subdiv2DRotateEdge:[170,6,1,""],SubdivDelaunay2DInsert:[170,6,1,""],Sum:[123,6,1,""],ThreshHist:[157,6,1,""],Threshold:[159,6,1,""],Trace:[123,6,1,""],Transform:[123,6,1,""],Transpose:[123,6,1,""],Undistort2:[156,6,1,""],UndistortPoints:[156,6,1,""],UpdateMotionHistory:[219,6,1,""],WaitKey:[153,6,1,""],WarpAffine:[156,6,1,""],WarpPerspective:[156,6,1,""],WriteFrame:[152,6,1,""],Xor:[123,6,1,""],XorS:[123,6,1,""],fromarray:[120,6,1,""],mGet:[120,6,1,""],mSet:[120,6,1,""]}},objnames:{"0":["ocv","emember","enum member"],"1":["ocv","class","C++ class"],"10":["py","data","Python data"],"2":["ocv","function","C++ function"],"3":["ocv","struct","C/C++ struct"],"4":["ocv","cfunction","C function"],"5":["ocv","member","C++ member"],"6":["ocv","pyoldfunction","Legacy Python function"],"7":["ocv","pyfunction","Python function"],"8":["ocv","enum","C/C++ enum"],"9":["py","class","Python class"]},objtypes:{"0":"ocv:emember","1":"ocv:class","10":"py:data","2":"ocv:function","3":"ocv:struct","4":"ocv:cfunction","5":"ocv:member","6":"ocv:pyoldfunction","7":"ocv:pyfunction","8":"ocv:enum","9":"py:class"},terms:{"0000000000000000e":125,"0000000000000001e":125,"0001_0107_0099_0195_0139":97,"0001_0109_0209_0195_0139":97,"0002_0107_0115_0195_0139":97,"0002_0241_0245_0139_0100":97,"00e1":66,"01f":[13,92,114,172,175,184],"02d":152,"02f":[207,223],"04f":23,"0715244063187526e":0,"0th":118,"0x19fea9010":62,"0x3fffffff":118,"0x7f9ab3054c40":62,"0x7fc9d9c98d55":62,"0x7fc9d9c98d5a":62,"0x7fc9d9c995a0":62,"0x7fc9dac49880":62,"0xcd":76,"0xff":32,"0xff00":32,"0xff0000":32,"0xff000000":32,"0xffffffff":14,"100image1":9,"100kb":66,"100pt":66,"100x100":[114,160],"100x100x100":114,"100x60":114,"10e":97,"10kb":66,"10th":31,"10x1":119,"10x10":123,"110kb":66,"11_manager_2":59,"11th":126,"1415926535897931e":9,"168x192":106,"16bit":112,"1802327176423804e":0,"18_":231,"18_armeabi":231,"18_armv7a":231,"18_mip":231,"18_x86":231,"1950000000000000e":0,"1_40_0":114,"1e7":82,"1ll":120,"1mean":192,"1st":101,"1th":118,"1x1":[101,114],"1x3":101,"1x9":120,"1xn":[101,114,123,156],"20_armv7a":59,"20feel":62,"20lucki":62,"20th":0,"20x20":186,"21ht":[142,154],"27m":62,"2bgr":159,"2ghz":131,"2i1f":[121,125],"2if":[121,125],"2nd":[101,106,114,118,123,149,219],"2nx":101,"2nx15":101,"2pi":199,"2rgb":159,"2time":193,"2x1":219,"2x2":[123,142,219],"2x2x2":120,"2x3":[114,123,142,156,164,193],"2xn":101,"300pt":66,"30x40":114,"320x240":114,"320x240x3":120,"32f":[96,159],"32fc1":[96,192],"32fc2":96,"32fc3":96,"32fc4":192,"32sc1":192,"32sc2":120,"32sc4":192,"32x32":166,"33rd":136,"352x288":80,"3950000000000000e":0,"3calibr":101,"3cm":1,"3rd":[74,114,123,162],"3rdparti":59,"3time":192,"3x1":101,"3x3":[11,40,68,101,114,119,120,121,123,137,141,142,154,156,193,213],"3x4":[101,120,156],"3x9":101,"3xn":[101,114],"48x96":[146,191],"4mb":106,"4x1":101,"4x3":120,"4x4":[114,123,156],"4xn":101,"5025f":27,"512x512":62,"5225f":27,"53f":112,"5511278195488714e":109,"5558897243107765e":109,"5746697944293521e":0,"5776942355889716e":109,"5796992481203006e":109,"5854636591478695e":109,"5952380952380949e":109,"5th":[123,162],"5x10":62,"5x5":[114,160],"6082706766917283e":109,"6162907268170414e":109,"640x480":101,"64f":[145,159],"64k":118,"64x128":[146,191],"65f":212,"6th":62,"7843597214487474e":0,"7th":219,"7x7":114,"85f":131,"8bit":[3,112],"8mb":119,"8th":[118,167],"8uc1":[96,120,131,149,192,193],"8uc3":[96,131,149,190,192],"8uc4":[131,149,190,192],"8x1":120,"8x8":156,"90pt":66,"92x112":106,"95f":112,"960x240x1":120,"9_manager_2":231,"9th":[118,184],"9x3":101,"\u0131":[2,4,15,21,28,29,57,66,73,79,83,85,90],"\u015f":[2,4,15,21,28,29,57,66,73,79,83,85,90],"\u03c9":74,"\u215b":74,"\u215c":74,"\u215d":74,"\u215e":74,"_3dimag":101,"__bridg":78,"__cplusplu":[77,80],"__cv_gpu_host_device__":138,"__iphone_4_0":80,"__main__":[106,108,110],"__name__":[106,108,110],"__objc__":80,"_all_":[106,108,109],"_anchor":155,"_angl":128,"_area_threshold":131,"_bordervalu":155,"_center":[115,196],"_class_id":128,"_code":124,"_columnbordertyp":155,"_columnfilt":155,"_compressionmethod":164,"_creat":114,"_data":[171,175],"_delta":131,"_directori":[63,67,71],"_distanc":127,"_dst":114,"_edge_blur_s":131,"_end":114,"_eqpred":115,"_err":124,"_extend":184,"_file":124,"_filter2d":155,"_func":124,"_grid_siz":212,"_height":114,"_hessianthreshold":184,"_html":74,"_imgidx":[111,127],"_inputarrai":[114,190],"_keypointsratio":184,"_likelihood":111,"_line":124,"_match":111,"_matthebasicimagecontain":66,"_max_area":131,"_max_evolut":131,"_max_vari":131,"_min_area":131,"_min_divers":131,"_min_margin":131,"_nclass":164,"_noctav":184,"_noctavelay":184,"_nstruct":164,"_nview":164,"_obj":114,"_octav":128,"_outputarrai":[114,190],"_patchsiz":164,"_preset":101,"_pt":128,"_queryidx":[111,127],"_respons":128,"_rowbordertyp":155,"_rowfilt":155,"_sampl":176,"_sample_idx":172,"_scale":164,"_scale_max":164,"_scale_min":164,"_scale_step":164,"_share":172,"_signatures":164,"_size":[114,128],"_src":[106,108,109,114],"_srcroi":155,"_start":114,"_structsiz":164,"_tabl":66,"_theme":66,"_tp2":[114,124],"_trainidx":127,"_type":[114,190],"_upright":184,"_width":114,"_x1":164,"_x2":164,"_y1":164,"_y2":164,"abstract":[93,104,126,127,128,129,133,194],"boolean":[0,3,112,115,119,124,152,184],"break":[0,10,11,13,31,32,41,42,46,50,58,61,66,74,75,84,93,94,95,106,108,109,110,119,152,226],"byte":[12,13,27,31,32,76,78,96,101,114,118,120,121,124,125,126,137,143,147,149,152,159,166,189,190,194],"case":0,"catch":[3,75,106,108,109,110,119,152],"char":[0,3,5,6,7,8,9,10,11,12,13,14,17,18,19,20,22,23,24,25,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,65,66,69,70,72,75,76,84,91,103,106,108,109,110,114,117,118,119,120,121,124,125,130,138,149,151,152,153,154,157,162,164,165,166,176,178,182,187,200,201,219,222],"class":[0,3,9,10,11,13,14,27,31,32,60,61,62,64,66,68,78,81,82,83,84,86,88,94,95,97,101,103,104,105,106,107,108,109],"const":[0,6,8,9,10,11,12,23,27,30,31,32,33,35,36,37,40,44,49,56,58,81,82,84,88,101,103,104,106,108,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,135,136,137,138,139,141,142,143,145,146,147,148,149,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,167,169,171,172,174,175,176,178,179,180,181,182,183,184,186,187,189,190,191,192,193,195,196,197,199,200,201,203,206,207,208,209,210,212,213,214,216,217,219,222,223],"default":[0,3,9,11,13,18,27,32,33,41,42,43,44,45,46,47,49,60,61,62,63,64,65,66,69,72,74,76,77,93,94,95,96,97,101,104,106,108,109,112,113,114,118,120,121,122,123,124,125,127,128,130,131,137,138,141,142,143,144,146,149,151,152,153,154,155,156,159,162,164,165,171,172,174,175,176,178,179,180,181,182,183,184,189,190,191,192,197,199,201,210,219,222,223,226],"enum":[3,101,103,111,114,119,122,130,137,138,139,143,146,149,164,184,186,189,191,207,209,210,213,214,222,223],"export":[60,64,97],"final":[0,3,6,7,10,27,30,32,36,38,40,41,47,48,49,50,61,65,66,69,72,74,80,81,82,93,97,101,104,106,108,110,112,114,119,128,139,155,160,166,171,183,207,210,221],"float":[0,3,7,8,13,16,23,25,27,31,35,36,37,42,44,46,51,56,81,82,91,92,93,94,96,101,106,108,110,112,113,114,115,116,119,120,121,123,124],"forss\u00e9n":131,"function":[0,1,3,5,6,7,8,9],"import":[0,3,10,11,25,27,31,47,50,58],"int":[0,3,5,6,7,8,9,10,11,12,13,14,17,18,19,20,22,23,24,25,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,61,65,66,69,70,72,75,76,81,82,84,88,89,91,92,101,103,104,106,108,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124],"kr\u00fcger":106,"long":[0,3,10,13,27,31,65,66,74,82,101,112,114,131,136,154,155,170,172,181,192,219],"new":[0,1,3,7,10,11,12,13,14,15,16,27,29,31,32,35,38,46,49,50,58,59,60,61,62,64,65,66],"nist\u00e9r":131,"null":[10,61,78,101,113,114,118,120,121,123,124,137,139,141,142,145,147,148,149,151,152,153,154,155,156,157,159,160,162,165,170,172,181,182,190,195,200,201,219],"public":[9,61,62,64,68,88,101,104,106,108,109,110,111,112,114,117,124,126,127,128,129,131,133,136,137,138,139,141,142,143,146,149,155,162,163,164,165,166,167,171,172,173,174,175,176,178,179,180,181,182,183,184,186,189,190,191,192,196,197,201,207,209,210,212,213,214,216,217,219,222,223,226],"return":[0,3,5,7,8,9],"sch\u00f6dl":211,"short":[3,10,13,31,32,33,41,66,74,93,114,119,123,124,131,152,166],"static":[3,9,14,32],"stew\u00e9niu":131,"super":[61,80,99,114,205],"switch":[0,8,10,11,32,46,61,63,76,97,106,108,109,123,124,126,127,128,129,144,153,154,163,226],"thorm\u00e4hlen":113,"throw":[3,8,12,27,32,66,74,103,104,106,114,119,123,124,144,149,154,178,219],"true":[0,3,31,32,35,36,37,41,42,46,50,51,55,56,58,61,62,64,65,84,89,92,101,111,112,114,115,117,120,122,123,124,125,127,128,129,131,138,139,142,143,144,146,149,152,154,155,156,157,162,164,166,171,172,174,175,176,178,180,181,183,184,187,190,191,196,199,201,206,212,219,222,223,229],"try":[0,3,9,27,31,33,40,47,58,59,60,62,64,66,74,75,80,101,106,108,109,110,112,114,119,124,127,128,139,150,152,155,172,181,191,210,212,226],"typeof":116,"var":62,"void":[0,3,6,9,12,17,18,19,20,22,23,24,25,30,32,33,35,39,40,44,46,49,51,52,53,54,55,58,61,62,64,66,68,76,80,84,101,103,104,106,108,109,110,111,112,113,114,117,118,120,121,122,123,124,125,126,127,128,129,130,131,133,136,137,138,139,141,142,143,145,146,147,148,149,151,152,153,154,155,156,157,159,160,161,162,163,164,165,166,167,169,170,171,175,178,179,182,184,186,187,189,190,191,192,193,195,196,197,199,200,201,202,203,206,207,209,210,212,213,214,216,217,219,222,223,226],"while":[0,3,8,11,12,13,27,31,32,41,42,44,46,50,58,59,62,66,74,75,76,80,84,89,92,97,101,104,106,108,109,110,112,114,118,121,123,124,136,141,144,150,151,155,156,157,159,162,167,171,172,178,183,192,194,219],a1a2:199,aaaaaa:155,aac:32,aaron:211,abbrevi:74,abcdefg:155,abcdefgh:155,abgr:142,abi:59,abil:[76,172,177],abl:[3,9,10,59,60,62,66,106,114,118,119,186,210],abort:3,about:[2,7,8,9,11,13,15,21,29,30,31,36,48,57,59,60,62,66,73,74,81,82,86,93,97,101,103,104,106,108,110,114,117,118,119,120,121,123,124,127,129,136,142,149,155,156,160,162,165,172,174,179,181,193,212],abov:[0,3,5,6,11,13,14,23,25,26,33,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,58,59,60,61,62,66,74,75,81,84,86,97,101,104,106,108,109,110,112,114,117,118,119,120,121,123,125,126,128,130,137,149,154,155,156,157,159,170,189],abritrari:106,abs_dst:45,abs_grad_i:47,abs_grad_x:47,abs_path:[106,108,110],absdiff:[27,31,116],absent:[101,114,121,181],absolut:[0,60,61,97,101,111,114,118,120,123,125,145,148,162,172,175,195,199],absolute_loss:175,abufid:122,abus:62,academ:[106,180],acc:[9,160],acccessor:112,accept:[10,11,12,27,40,60,74,114,118,120,123,136,149,154,201,219],acceptanceratiobreakvalu:97,access:[7,9,10,11,12,13,15,27,36,59,61,66,74,80,88,89,94,95],accessor:112,accompani:194,accomplish:[30,31,38,46],accord:[11,12,13,58,61,65,66,69,74,97,101,114,118,120,123,131,143,155,156,159,190,211,216],accordingli:[61,101,123,144,155,156,223],account:[0,3,34,66,82,101,106,111,114,119,120,123,136,156,162,179],accpet:62,accumul:[36,120,123,142,154,155,157,158,159],accumulateproduct:[123,158],accumulatesquar:[123,158],accumulateweight:158,accur:[3,10,37,47,101,106,108,110,111,113,120,123,124,136,142,154,155,159,165,172,174,191,219],accuraci:[0,21,101,111,114,115,117,120,121,123,124,145,149,156,160,162,171,176,181,183,194,196,219],accuratelyi:21,accustom:62,achiev:[8,9,10,13,63,66,71,97,101,108,114,119,120,136,137,144,156,159,160,172,210,219],acknowledg:106,acm:[106,115,149,183,211],acol:122,acquir:[0,10,12,13,31,32,60,65,66,74,106,108],acquisit:3,across:[34,76,123,159,186,195],act:[3,124,141,155,192],action:[40,59,60,80,219,222],actionstart:80,activ:[3,60,61,76,112,122,137,144,153,178,179,182,189],activatefunc:179,actor:[88,223],actual:[3,13,27,35,42,45,47,50,58,64,66,74,80,97,101,106,108,109,114,118,119,120,123,131,136,141,155,156,159,172,175,190,194,199,219],actual_num_bands_:207,adaboost:[97,171,175,186],adapt:[3,82,101,105,109,112,113,126,128,149,155,159,179,201,219],adaptive_method:159,adaptive_thresh_gaussian_c:159,adaptive_thresh_mean_c:159,adaptivemethod:159,adaptivethreshold:158,adb:[59,60,61,231],add:[0,3,5,8,9,10,11,27,29,30,32,33,35,49,60,61],add_execut:[69,70],addcloud:221,addexampl:166,addflag:61,addit:0,addition:[19,33,66,73,80,101,156,172,182],additon:199,addqueri:111,address:9,addsbtplugin:64,addtext:150,addtrain:111,addweight:[5,11,27,30,47,116],addwidget:223,adel:181,adelson:211,adjac:118,adjust:3,admin:[66,74],administr:[60,66],admit:82,adstord:142,adt:[59,60,61],advanc:[10,60,66,74,76,106,108,111,113,114,119,120,123,141,149,155,159,172,179,199,202,219],advantag:[0,10,12,13,32,66,70,74,75,115,138,144,160,192,194],advic:66,advis:[106,108,110],aep:162,affect:[3,13,14,35,97,101,104,118,119,120,142,149,157,182,183,201,202,219,223],affine3:92,affine3d:[101,222,223],affine3f:[91,92],aformat:122,afraid:106,after:[0,3,5,9,10,11,12,14,17,27,31,32,38,40,41,42,45,46,47,48,49,50,57,58,59,60,61,62,64,65,66,68,71,72,74,78,80,88,97,101,104,106,111,112,114,115,118,119,120,121,122,123,124,125,128,138,149,151,152,153,154,155,156,159,161,162,170,172,178,179,181,186,217,219,228,230],afterward:[27,32,66,81,114,157],again:[0,3,8,9,11,14,32,37,41,60,62,66,74,75,109,114,118,138,155,165,171,174],against:[3,39,66,76,106,110,111,112,114,117,161,162,172],agast:131,aggress:172,ago:219,agraw:128,agrawal08:128,agreement:[60,106,108,110],ahead:12,ahonen:106,ahp04:[105,106],ahuja:137,aim:[0,3,31,40,80,82,112],aka:[10,31,62],alahi:131,alarm:[3,97,179],alert:77,alexand:[2,4,15,21,28,29,57,66,73,79,83,85,90],alexandr:[2,4,15,21,28,29,57,66,73,79,83,85,90],alexandra:111,alexandru:[159,203],algebra:[74,106,114,119,123],algo:[142,202],algorithm:[0,5,7,8,10,11,13,22,24,27,28,31,34,40,66,74,81,82,86,87,93,96,97,101,104,105],algorithminfo:114,alia:[66,114],alias:[114,157],align:[8,66,95],alignptr:116,aligns:116,alik:106,all:[0,3,8,9,10,11,13,14,15,18,19,20,27,31,32,33,34,35,37,39,40,42,44,46,47,50,59,60,61,62,64,66,69,74,75,76,78,80,81,82,86,93,97,101,104,106,108,109,110,111,112,113,114,117,118,119,120,121,122,123,124,125,126,127,128,130,131,133,138,139,141,142,143,144,145,146,148,149,150,151,153,154,155,156,157,159,161,162,163,165,166,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,186,187,190,191,192,193,194,195,196,199,201,202,206,207,209,211,213,214,217,219,222,223,228],alldist:[139,191],alleysson:[3,112],allianc:60,allinurl:62,alloc:[3,13,27,77,80,96,101,114,116,118],alloc_page_lock:138,alloc_typ:138,alloc_write_combin:138,alloc_zerocopi:138,allocate_data:120,allocatepcadescriptor:164,allocposteriorsalign:166,allow:[0,3,10,13,14,32,33,43,61,62,65,66,74,81,82,101,104,106,112,113,114,118,120,121,123,141,142,146,152,154,155,157,167,172,175,178,179,183,191,192,194,197,219,223,228],allowfullscreen:66,allownd:[120,123],almost:[11,27,62,65,75,97,101,104,106,124,157],alon:[3,106,120,172],along:[0,42,92,101,111,114,117,120,123,142,145,149,155,156,193,206,223],alpha:[5,7,13,30,65,78,101,114,117,123,137,142,147,148,149,152,159,160,190,199,201,217,219],alpha_:149,alpha_atop:142,alpha_atop_premul:142,alpha_comp:142,alpha_in:142,alpha_in_premul:142,alpha_op:142,alpha_out:142,alpha_out_premul:142,alpha_ov:142,alpha_over_premul:142,alpha_plu:142,alpha_plus_premul:142,alpha_premul:142,alpha_scal:114,alpha_slid:30,alpha_slider_max:30,alpha_xor:142,alpha_xor_premul:142,alphabet:114,alphablendrgba:114,alphachannel:120,alreadi:[0,3,5,10,11,13,27,28,32,34,59,60,61,62,64,65,66,73,75,82,92,101,106,114,118,119,120,138,152,153,155,157,159,167,170,172,174,190,222,231],also:[0,3,7,8,9,10,11,12,13,14,17,18,19,20,22,23,24,25,27,30,31,32,33,34,35,36,37,40,41,42,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,65,66,69,74,75,76,80,82,84,93,97,101,104,106,107,108,109,110,112,114,117,118,119,120,121,122,123,124,125,126,128,129,131,136,137,138,139,142,145,151,152,153,154,155,156,157,159,162,171,172,175,178,179,181,182,184,186,189,191,194,202,219,223],alt:222,alter:179,altern:[11,32,49,57,60,61,66,74,80,96,111,114,117,118,121,125,127,131,139,155,174,190,191,200],although:[0,2,11,13,27,34,44,47,50,66,82,86,101,106,182],alwai:[14,30,32,35,40,46,65,66,75,86,95,101,104,106,108,110,114,117,118,119,120,121,123,124,128,138,142,143,144,145,152,153,155,183,194,199,213,223],amacrincellstemporalcutfrequ:[3,112],ambianc:3,ambigu:[114,123],amd64:[60,62],amd:[192,194],american:149,among:[60,81,82,118,121,123,157,173],amount:[0,10,27,66,89,93,97,111,114,123,128,143,151,152,222,223],amphitheat:3,amplifi:3,ana:[2,4,15,21,28,29,57,66,73,79,83,85,90],analag:[14,33,72],analog:[34,40,43,45,47,187,229],analogu:[120,146,191],analys:172,analysi:[3,86],analyz:[14,30,33,42,48,50,58,65,106,120,123,124,155,161,162,176],ancestor:118,anchor:[33,34,42,66,141,155,192],anchor_:[141,192],anchor_i:155,anchor_x:155,anchori:155,anchorx:155,andrei:[2,4,15,21,28,29,57,66,73,79,83,85,90],andrew:162,android8:[59,231],android_winusb:60,androidmanifest:[60,61],andth:101,angelina:[108,110],angl:[6,40,48,97,101,106,108,110,114,117,120,123,124,128,142,147,154,156,162,167,184,199,219],angle_in_degre:123,angle_row:[139,184],angleindegre:[123,147,199],angul:101,ani:[1,3,7,8,9,10,11,13,27,31,32,33,35,39,40,41,48,49,50,58,59,60,61,62,64,65,66,68,70,74,75,76,80,81,86,101,104,106,108,110,111,112,114,117,118,119,120,121,122,123,124,128,129,138,142,143,144,145,149,150,151,152,153,155,157,159,162,165,167,172,174,175,181,183,190,194,201,212,216,219,222,228],anim:92,ann_mlp:179,annal:106,annoi:62,annot:[97,110],annoy:62,annual:115,anod:114,anomali:172,anoth:[3,8,10,12,13,14,27,30,31,33,35,38,41,46,64,69,74,75,76,82,97,101,114,118,119,120,121,122,123,124,125,127,128,129,139,142,152,155,156,157,159,162,165,170,171,172,174,179,184,187,190,191,193,199,219,223],ansi:66,answer:[8,9,10,13,66,82,175,230],ant:60,antialia:[106,108,110],antialias:117,antigradi:175,anymor:[62,77,101,105,106,112,114,186,219],anyon:[66,119],anyth:[3,59,61,62,70,75,101,114],anytim:[62,181],anywher:[31,119],aov12:131,apach:64,apart:3,apertur:[131,141,142,154,155,159,191,192,193,219],aperture_s:[154,155,219],apertureheight:101,apertures:[23,25,154,155,219],aperturewidth:101,api:[11,59,60,61,62,74,96,97,99,101,104,105,107,114,116,117,118],apk:[59,61,231],app:[60,61,62,64,67,86,228,229,230],app_abi:[60,61],app_cppflag:[60,61],app_nam:61,app_platform:61,app_stl:[60,61],appar:33,appcontext:229,appeal:82,appear:[14,15,41,45,47,60,66,69,71,74,76,82,111,118,211],append:[8,9,60,65,101,125],apperture_s:[142,191],appl:59,appli:[0,1,3,10,12,14,15,17,18,19,22,24,31,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,60,62,66,69,75,81,84,93,97,101,103,104,106,108,109,112,114,118,119,123,128,131,139,141,142,146,155,156,159,160,162,166,172,173,179,181,184,186,187,192,193,199,202],applic:[0,3,5,7,8,11,13,27,29],applicaton:74,applydefaultsetuponfailur:112,applytransform:221,appreci:38,approach:[10,27,28,60,61,65,75,106,108,110,111,114,118,123,124,133,154,176,180,183,187,196,202,211,219,229],appropi:104,appropri:[59,64,74,82,101,104,106,118,121,144,145,155,156,170,175,223,231],approv:[227,231],approx:162,approxchain:158,approxcurv:162,approxim:[0,8,19,45,47,48,50,51,101,106,108,110,111,113,114,117,123,134],approxpolydp:[51,158],apr:31,april:[106,174],apriori:121,apt:[60,63,71],apu:194,arbitari:19,arbitrari:[97,101,114,117,120,123,138,141,142,155,157,172,183,186,192,193,219],arbitrarili:[125,156,179],arc:[6,14,117],arcend:117,arch:60,architectur:[3,59,60,62,63,119,124,143,144],archiv:[59,60,61,74,155,178],arclength:[55,158],arcstart:117,area0:162,area1:162,area:[3,7,33,35,39,40,45,50,55,62,65,101,114,117,118,120,128,131,138,153,155,156,159,162,184,186,192,203,217,219,222],areathreshold:128,aren:[27,64,66,74,75,106],arg2:151,arg:[62,64,68,119,124],argc:[0,3,5,7,8,11,17,18,19,20,22,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,65,66,69,70,72,75,76,84,103,106,108,109,110,121,151,152,154,157,162,176],argn:91,argument:[0,3,5,6,9,10,12,14,27,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,58,62,63,65,66,69,70,72,74],argv:[0,1,3,5,7,8,10,11,13,16,17,18,19,20,22,23,24,25,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,65,66,69,70,72,75,76,84,91,93,103,106,108,109,110,121,125,151,152,154,157,162,176],ari:[114,167],aris:[13,41,50,106,108,110],arithmet:[0,27,114],arm7a:59,arm:[48,59,60,62],armeabi:[59,60,61,63,231],armv5:[60,231],armv5l:63,armv6:[60,231],armv7:[60,231],armv7a:59,arni:[106,108,110],arnie_10_10_200_200:[106,108,110],arnie_20_20_200_200:[106,108,110],arnie_20_20_70_70:[106,108,110],arnie_30_30_200_200:[106,108,110],arno:211,arnold:[106,108,110],around:[0,3,11,12,13,25,32,33,34,38,39,45,64,66,74,75,80,81,82,92,97,101,106,108,110,115,123,124,130,131,139,142,147,149,155,160,162,169,170,192,194,196,199,201,206,219],arow:122,arr1:123,arr2:123,arr:[120,122,123,162],arrai:[1,9,10,11,13,16,33,34,35,36,39,42,48,81,96,101,114,115,116,117,118,119,120,121],arrang:[44,118],array_buff:122,arriv:74,arrow:[117,223],arrowedlin:116,art:[27,106,144,149,194],artem:[2,4,15,21,28,29,57,66,73,79,83,85,90],arthur2007:[115,196],arthur:[115,196],arthur_kmeanspp_2007:136,articl:[31,60,131,173,179,181],artifact:[3,62,97,119,156,209,211],artifici:[101,106,172,179,219],ascend:[66,123],ascii:66,asctim:125,asid:121,asiz:122,ask:[5,6,10,13,32,40,59,60,74,104,106,110],askoutputtyp:32,aspect:[0,65,66,101,118,151,208],aspect_ratio:101,aspectratio:101,assert:[114,121],assess:31,assetslibrari:[77,80],assign:[10,11,13,27,31,32,34,58,74,88,106,108,110,114,120,123,153,159,171,172,179,183,186,190,199],assist:[114,154],associ:[9,97,101,104,114,118,119,121,125,143,153,166,170,187,190,194,222],assosi:104,assum:[0,3,33,34,42,47,49,59,60,61,62,66,69,70,72,76,80,91,94,95,97,101,106,111,114,118,119,120,123,129,142,153,155,156,157,159,162,172,179,180,199,208,212],assumpt:[13,32,75,80,101,104,129,162,206,210],assur:[65,104,219],asymmetr:[0,2,101,155],asymmetric_circles_grid:0,asymptot:[181,217],asynchron:[27,61,114,137,138,139,141,142,147,148,149,230],ata:123,atan2:[106,108,110],atexid:122,athinodoro:106,atoi:[106,108,109,110],atom:[6,60,114,119],atom_imag:6,atom_window:6,atribut:82,att_fac:106,attach:[2,31,60,151,153,219],attarch:106,attemp:196,attempt:[3,9,45,101,115,118,128,133,172,196],attent:[41,104],attenu:112,attr:[60,121],attr_nam:121,attribut:[64,81,121,138,222,223],attribute_nam:121,attribute_valu:121,atyp:122,audio:[32,149],augment:[101,114],august:[149,219],austria:136,authent:60,author:[2,3,4,15,19,21,23,28,29,37,57,66,73,79,83,85,90,106,108,110,112],author_bernatg:66,auto:[61,64,122,136],auto_step:[114,190],autocalibr:205,autocorrel:154,autofocu:61,autogener:3,autom:[74,75,106,111],automat:[9,10,11,13,14,31,32,41,59,60,61,62,65,66,74,75,76,80,86,94,104,106,108,110,113,114],autoreleas:122,autotunedindexparam:136,auxiliari:[97,149,170,201],avail:3,avalu:114,avbs01:219,avc2007:111,avcapturedevicepositionfront:80,avcapturesessionpreset352x288:80,avcapturevideoorientationportrait:80,avd:59,averag:[0,10,12,27,31,101,108,114,123,142,149,154,155,157,160,169,181,186,201,202,219],averagetexthreshol:[137,189],averaging_block_s:219,avergetexthreshold:[137,189],avfound:80,avg:[0,123,164],avgbitr:149,avgsdv:123,avi:[3,31,32,112,149,151,152],avin2:95,avisynth:32,avoid:[9,10,11,27,33,34,43,45,47,65,66,80,101,106,114,118,119,123,124,137,141,142,144,145,147,154,156,172,183,189,191,192,197,199],avx2:124,avx:124,awai:[8,27,32,34,106,114,120,154,219],awar:[13,60,194,210],award:131,awesom:[9,110],awfulli:74,axi:[0,36,92,101,120,123,128,142,147,149,154,155,156,162,193,199,206,216,222,223],axis_direct:223,axis_i:222,axis_point1:223,axis_point2:223,axis_x:222,axis_z:222,axpi:114,b1b2:199,b_hist:36,ba83:[207,211],babi:106,baboon:[9,49],back:[3,11,27,32],back_project:157,backbround:[149,201],backend:[65,74,122,152,153],background:[0,27,33,40,47,58],background_color:97,background_color_threshold:97,background_file_nam:97,backgroundimag:[149,201,219],backgroundprior:149,backgroundratio:[149,201,219],backgroundsubtractor:114,backgroundsubtractormog2:[114,149,201],backgroundsubtractormog:[114,149,201],backproj:35,backproject:[35,116],backprop:179,backpropag:179,backpropwikipedia:179,backsubst:116,backtrack:118,backward:[11,101,114,125,149,201,216],bad:[3,39,81,101,106,123,219],bad_region_penalti:214,bag:[111,133,173,181],bagofwords_classif:133,bai:[184,219],bail:111,balanc:[66,93,101,179,183,217],band:[3,207],baptiz:10,bar:[2,4,15,21,28,29,57,62,66,73,79,83,85,90,151],bar_nam:151,barrel:[0,101],barthelemi:[3,112],base:[7,13,33,35,37,45,49,58,59,60,61,62],base_bas:37,base_class_t:114,base_half:37,base_path:[106,108,110],base_set:166,base_test1:37,base_test2:37,basedir:64,baseformatsav:97,basekeypoint:166,baselin:[0,95,117],baseloadercallback:[61,226,229],basepath:[106,108,110],bash:[60,69],bashrc:60,basi:[106,110,113,123,183,219],basic:0,basic_preset:[101,137,189],basic_str:61,basiclineartransform:7,batch:[31,111,179],bay06:184,bay:[111,177],bayer:[3,112,142,159],bayesian:111,bcm_non_local_means_denois:[142,202],beam:94,beard:97,beat:10,becam:0,becaus:[0,3,10,11,12,13,25,31,32,34,36,62,64,65,66,72,80,81,97,104,105,106,108,110,114,118,119,120,121,123,127,135,138,141,152,153,155,157,159,165,172,176,181,190,192,194],becom:[41,58,66,106,108,114,118,120,123,156,157,160,170,172,178,183],becuas:190,been:[0,3,10,13,27,61,62,64,66,71,75,76,81,101,102,105,108,110,111,112,118,119,120,121,123,128,138,144,149,150,152,154,159,165,169,171,172,173,178,181,186,187,194,201,202,219,222,227,228,231],befor:[3,9,10,11,14,15,27,31,36,39,48,60,61,62,64,65,66,75,76,80,81,82,86,97,101,110,114,118,120,122,123,124,125,127,138,139,141,142,143,149,151,152,153,155,157,159,172,182,186,192,199,201,210,212,219],before_index:118,beforehand:[9,10,32,74],begin:[7,9,10,11,36,41,72],beginn:60,behav:[9,118],behavior:[3,9,61,62,114,118,119,155,226],behaviour:[60,97,123,124,127],behind:[27,45,75,81,106],bein:62,belhumeur:106,belief:[137,189],believ:[106,108,110],bellow:61,belong:[5,7,13,33,34,35,41,42,44,47,49,50,58,66,81,82,101,104,106,110,118,119,121,128,133,155,159,165,170,172,174,181,223],below:[3,5,7,11,13,14,17,18,19,20,22,23,24,25,31,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,65,66,69,70,74,75,76,78,84,86,101,103,106,111,114,115,117,118,119,120,121,123,130,141,147,151,152,154,155,156,157,159,160,161,162,166,170,171,172,174,175,176,179,182,186,187,190,192,199,230,231],benefit:[3,59,68,112,194,228],bennett:111,benoit:[2,3,4,15,21,28,29,57,66,73,79,83,85,90,112],berkelei:[174,181,219],berlin:[113,128],bern:[2,4,15,21,28,29,57,66,73,79,83,85,90],bernat:31,berthold:219,besid:[14,31,35,50,59,64,74,75,101,114,118,119,172,179],best:[3,10,37,39,59,60,61,66,74,101,106,110,112,114,115,123,127,129,131,136,139,144,149,154,156,161,162,166,172,173,175,181,184,191,194,196,201,212,219],best_corr:166,best_corr_idx:166,bestlabel:[115,196],bet:10,beta:[5,7,30,114,123,147,148,190,199],better:[0,10,27,31,33,35,37,38,39,48,59,60,66,76,81,82,101,105,106,108,109,112,114,123,127,136,137,138,141,142,151,152,155,156,171,181,189,192,219],between:[0,3,5,6,8,9,10,13,14,16,17,19,20,25,27,31,34,36,37,39,40,42,43,44,46,48,49,57,58,62,66,70,73,74,76,78,81,82,90,93,97,101,103,104,106,108,110,111,112,114,117,118,120,121,122,123,125,126,127,128,129,131,136,139,142,144,146,148,149,151,153,154,156,157,159,160,162,163,167,171,172,177,179,181,183,184,186,187,190,191,194,199,201,206,212,213,219,222,223,228],bewar:[101,128,138,152],beynenson:[2,4,15,21,28,29,57,66,73,79,83,85,90],beyond:[31,101,118,155,157,179],bfmatcher:17,bframe:149,bg_color:97,bg_color_threshold:97,bgcolor:97,bgdmodel:159,bgfg:114,bgfg_segm:149,bgr:[3,6,7,10,11,13,32,33,37,58,65,72,94,95,96,112,117,123,149,152,159,222,223],bgr_plane:36,bgra:[80,137,151,152],bgrimag:95,bgthresh:97,bhattacharyya:[37,157],bhk97:[105,106],bia:[7,81,179],bias:187,bibliographi:43,bibtex:106,bicub:[106,108,110,156],big:[0,14,82,101,114,119,123,131,138,142,154,202],bigcub:114,bigger:[33,50,57,82,114,118,128,131,136,139,141,153,155,172,190,192,202],biggest:[11,13,34,82],bilateral_filt:155,bilateralf:219,bilateralfilt:34,bilinear:[101,106,142,156],bill:146,bilm:174,bilmes98:174,bin:[1,35,36,37,62,64,74,95,106,108,110,112,131,133,142,146,157,167,191],bin_w:[35,36],binari:[11,44],binary_pack:59,binaryimag:162,bind:[9,31,64,116,117,119],binval:157,bio:3,biologoc:112,biometr:97,birchfield:101,birmingham:162,birth:27,bischof:219,bisect:111,bisectionit:111,bisectionstart:111,bishop:219,bit:[5,11,13,27,31,32,48,60,62,68,74,78,80,94,101,104,106,113,114,117,118,119,120,121,123,124,125,128,130,131,136,139,141,142,145,148,149,151,152,153,154,155,157,159,160,161,162,166,169,170,172,182,184,190,191,192,193,199,201,202,203,219],bitmap:[65,78,114,120,152],bitmask:200,biton:199,bitstream:149,bitwis:[31,32,114,148,199],bitwise_and:116,bitwise_not:[0,80,116],bitwise_or:116,bitwise_xor:116,bl07:[209,211],bl_height:209,bl_height_:209,bl_width:209,bl_width_:209,bla:[123,128,147,194],black:[0,6,8,13,14,25,33,39,40,41],blackhat:[49,155,192],blank:61,blender:[5,205],blender_:210,blinkoutput:0,blob:[25,101,128,131],blobcolor:128,blobdetector:101,block:[10,15,34,65,66,69,74,75,80,86,97,101,114,118,121,137,138,142,144,146,149,154,159,166,169,189,190,191,192,197,201,209,211,219],block_siz:[118,142,146,154,159,169,191],block_strid:[146,191],blocksiz:[22,23,24,25,118,128,142,149,154,159,169,193,201],blocksize_:149,blog:[105,108],bloodi:10,blow:10,blue:[6,10,13,58,66,81,82,92,96,117,152,159,222],blur:[3,11,31,34,40,42,43,45,51,52,53,54,55],blurfordescriptor:139,blurkernels:217,blurri:[101,201,219],blursigma:217,bmp:[65,152],bmvc97:167,bmvc:167,bnd:166,board:[0,1,61,101,231],boardpoint:1,boardsiz:[0,1],boardtyp:192,bobick:[211,219],bodi:[74,114,119],bond:51,bone:[106,108],bonu:[10,13,15,74],book:[3,5,7,33,34,40,41,42,43,44,47,49,50,58,81,112],bool:[0,1,3,22,24,32,36,91,95,101,111,112,114,115,117,122,123,124,125,127,128,129,131,137,138,139,142,143,146,147,149,151,152,154,155,156,157,162,164,165,166,171,172,174,175,176,178,180,181,182,183,184,186,187,189,190,191,193,196,199,201,206,207,210,212,213,219,222,223],boost:[97,114],boost_typ:171,boot:10,bootstrap:181,bor:[2,4,15,21,28,29,57,66,73,79,83,85,90],border:[8,12],border_:155,border_const:[8,41,46,141,142,155,156,192,193,219],border_default:[23,25,27,42,45,47,141,142,154,155,192,193],border_isol:155,border_mod:216,border_reflect101:[141,142,193],border_reflect:[142,155,193],border_reflect_101:[155,219],border_repl:[41,141,142,155,156,193],border_transpar:[155,156],border_wrap:[142,155],borderconst:120,borderinterpol:[141,142,154],bordermod:[120,142,156],bordertyp:[41,141,142,154,155,192,193],bordertype_:192,bordervalu:[142,155,156,192],bore:62,borgefor:159,borgefors86:159,borrow:[118,123],both:[0,5,7,8,11,14,16,25,27,31,37,38,43,44,45,46,47,48,50,60,62,66,74,78,81,82,93,95,96,97,101,106,108,114,118,120,121,122,123,124,125,127,129,137,138,139,141,142,147,148,149,154,155,156,157,159,166,172,173,175,181,182,183,187,189,192,193,194,199,201,219,223],botom:192,bottom:[3,8,12,14,26,41,50,74,86,114,117,118,120,123,142,155,192],bottomleftorigin:117,bottomright:170,bottou:179,bouguet00:219,bouguet:[101,219],bouguetj:101,bouguetmct:101,boundari:[13,36,41,81,82,114,117,118,120,123,128,136,139,142,146,147,155,157,159,162,170,183,191,203],boundingrect:[51,114,158],boundrect:51,bovik:31,bowden:[149,219],bowimgdescriptorextractor:132,bowkmeanstrain:132,bowmsctrain:102,bowtrain:[111,132],box2d:162,box:[6,16,33],box_in_scen:16,box_text:110,bp_dw_scale:179,bp_moment_scal:179,bracket:[112,114],brad:[108,110],brad_pitt:[108,110],brad_pitt_01:[108,110],brad_pitt_02:[108,110],brad_pitt_03:[108,110],bradski00:219,bradski98:219,bradski:[33,41,42,44,47,49,50,58,131,219],brai:133,brain:106,branch:[66,118,135,136,172],braun:179,breakpoint:76,brect:114,breiman84:172,breiman:[172,181],bresenham:117,brgbrgbrg:112,brian:219,brice:[3,112],brief:[19,22,23,24,30,35,37,39,40,41,46,64,88,91,93,126,127,131],brief_match_test:126,briefli:[33,41,49,81,112,182],bright:3,brighter:[35,39,58],brightest:[8,39],brightness_gain:11,bring:[13,74,75,76,101,114,138],brisk:[126,127,128],british:[162,167],brown:211,brows:[59,60,61,68,69],browser:[66,74],brox2004:149,brox:149,brox_optical_flow:149,bru92:106,bruhn:149,brunelli:106,brute:[17,127,136,139,191],bruteforc:[17,127],bruteforcematch:[16,93,127,129],bsd:[62,106,108,109,110,119,152],bshadowdetect:[149,201,219],bt98:101,btni:62,btvkernels:217,bucket:136,buf1:141,buf2:141,buf:[27,101,117,141,142,145,149,152,191,197,201],buffer:[3,27,97,101,112,114,116,117,118,119,120,121],buffermssim:27,bufferpsnr:27,buffers:149,bufsiz:124,buftyp:[141,155,192],bug:[59,75,76,228],bugfix:105,build3dmodel:101,build:[10,11,13,15,27,31,32,42,59],build_doc:74,build_exampl:[1,74],build_framework:67,build_hardfp:63,build_opencv_python:74,build_packag:74,build_perf_test:74,build_shared_lib:74,build_shared_librari:60,build_test:74,build_weight:136,buildmap:215,buildset:64,built:[13,23,29,32,62,64,69],builtwith:143,bullet:66,bump:33,bunch:[69,106],bundl:[60,61,213],bundle_adjust:210,bundle_adjuster_:210,bundleadjust:210,bundleadjusterbas:210,bunni:91,bunny_cloud:91,burg:183,burges98:183,burges98tutori:183,burkhardt:111,burn:3,burt:211,busi:[106,108,110],butterfli:162,button1:151,button2:151,button3:151,button5:151,button6:151,button:[59,60,61,66,69,74,76,80,151,222],button_nam:151,button_typ:151,buttonbar:151,buttoncallback:151,buyer:162,bvalu:114,bwsrc:159,bye:62,bytefish:[105,106,108,109,110],bytesperrow:78,c_str:[3,106,108,109,110],c_svc:[81,82,183],c_x:222,c_y:222,cabl:60,cach:[27,62,123,138,155,160,176],calc:[106,108,110],calc_var_import:181,calcbackproject:35,calcboardcornerposit:0,calccovarmatrix:116,calcemd2:157,calchist:[35,36,37],calcopticalflowbm:168,calcopticalflowfarneback:[149,169,201],calcopticalflowh:168,calcopticalflowlk:168,calcopticalflowpyrlk:[149,154,169,201],calcorient:184,calcsubdivvoronoi2d:168,calcul:[0,1,8],calculated:123,calculu:47,calib3d:0,calib_cb_adaptive_thresh:101,calib_cb_asymmetric_grid:[0,101],calib_cb_clust:101,calib_cb_fast_check:101,calib_cb_filter_quad:101,calib_cb_normalize_imag:101,calib_cb_symmetric_grid:101,calib_check_cond:101,calib_doc:101,calib_fix_intrins:101,calib_fix_k1:101,calib_fix_skew:101,calib_recompute_extrins:101,calib_use_intrinsic_guess:101,calib_zero_dispar:101,calibar:101,calibmatr:101,calibratecamera2:101,calibratecamera:[0,100],calibration_artifici:101,calibrationd:125,calibrationmatrixvalu:100,calibrationpattern:0,california:174,call:[0,3,6,7,9,10,11,12,13,14,25,27,30,31,32,33,34,35,36,39,41,45,49,50,58,60,61,62,64,65,66,69,70,72,74,75,76,80,81,82,88,89,96,97,101,103,104,106,108,109,110,111,112,113,114,118,119,120,121,122,123,124,125,127,129,138,141,142,143,144,149,151,152,153,154,155,156,157,159,162,164,169,170,171,172,175,181,182,183,184,186,190,191,200,210,219,226,230],callback:[30,35,39,40,61,123,138,149,151,153,222,225],callbackbutton1:151,callbackbutton2:151,callbackbutton:151,caller:104,calond:[126,166],caltech:101,cam:[91,106],cam_focal_point:91,cam_params_:213,cam_po:91,cam_pos:91,cam_y_dir:91,cambridg:106,came:13,camel:11,camera_calibr:0,camera_id:61,camera_mat:137,camera_matrix1:101,camera_matrix2:101,camera_matrix:[0,1,101,156],camera_pov:91,camerabridgeviewbas:61,cameracalibr:0,cameramatrix1:101,cameramatrix2:[101,125],cameramatrix:[0,1,101,120,125,156],camshift:[114,157],camshiftdemo:[35,219],camstudio:66,camtasia:66,can:[0,1,3,5,6,7,8,9,10,11,12,13,14,17,18,19,20,22,23,24,25,26,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,82,84,87,88,89,91,92,93,94,95,96,97,101,103,104,106,108,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,131,133,136,137,138,139,141,142,143,144,145,146,148,149,150,151,152,153,154,155,156,157,159,160,161,162,165,166,167,170,171,172,174,175,176,178,179,181,182,183,184,186,189,191,192,193,194,196,197,199,200,201,202,203,207,210,211,213,217,219,222,223,231],cancel:[3,25,112],cancelbuttontitl:77,candid:[40,146,186,187,196,197],canni:11,cannot:[10,13,27,31,32,74,101,110,111,117,119,120,121,123,124,126,128,129,144,151,152,153,156,157,159,171,199,226,230],canny86:[142,154,191],canny_edge_detector:154,canny_output:[53,55],cannybuf:[142,191],cannythreshold:[40,142],canon:81,cap:[104,110,119,152],cap_io:80,capabl:[60,61,74,104,114,119,139,143,144,145,191,194],capit:11,caplier:[3,112],caption:[34,153],captrefrnc:31,captundtst:31,captur:[0,3,31,32,35,66,79,84,94,95,101,104,106,110,114,119,152,156,184,202],capturefromcam:152,capturefromfil:152,car:[13,119,186],card:[27,28,60,74,86,143],care:[3,12,13,65,74,114,115,118,119,153,155,172,179],carefulli:114,carri:[78,106,120,123],cartesian:[44,81,82,94,123,147,199],cartoonish:155,carttopolar:116,carv:66,cascad:[59,64],cascade_dir_nam:97,cascade_gpu:146,cascadeclassifi:[64,84,97,110,146],cascadeclassifier_nvidia_api:146,cassia:106,cast:[9,114,119,123,124,199,221],cat:[178,187],categor:[74,81,132],categori:[126,172,181,186,187],caught:119,caus:[31,33,74,106,108,110,118,122,123,131,138],cb_index:136,cbrt:124,cc_home:181,ccd:159,ccdeff:39,ccoeff:39,ccorr:[39,114,142],cdefgh:155,cdf:38,cdst:44,cdt:[11,59],cedric:133,ceil:116,celebr:[108,110],cell_siz:[146,191],cells_spac:223,censur:128,center:[0,3,6,8,12,14,33,34,38,42,43,46,48,51,55,66,84,101,106,108,110,112,114,115,117,120,128,130,133,135,136,141,142,154,155,156,157,162,164,192,196,213,219,222,223],center_principal_point:101,centerprincipalpoint:[101,156],centerprinicipalpoint:156,centers_gonzal:136,centers_init:136,centers_kmeanspp:136,centers_random:136,centr:[206,223],central:[3,106,123,131,139,162],centric:61,centrino:131,centroid:160,centuri:0,cerr:[3,9,11,106,108,109,110],certain:[10,11,25,34,101,114,118,119,121,124,131,151,172,176,179,181,182],certainli:[3,38,60,66,114,115,144,162,194],cfdataref:78,cflag:69,cgbitmapcontextcr:78,cgcolorspacecreatedevicegrai:78,cgcolorspacecreatedevicergb:78,cgcolorspaceref:78,cgcolorspacereleas:78,cgcontextdrawimag:78,cgcontextref:78,cgcontextreleas:78,cgdataprovidercreatewithcfdata:78,cgdataproviderref:78,cgdataproviderreleas:78,cgfloat:78,cgimag:78,cgimagecr:78,cgimagegetcolorspac:78,cgimageref:78,cgimagereleas:78,cgiv:126,cgrayscal:[106,108,109],cgrectmak:78,cgrid:183,chain:[3,118,121,162],chain_approx_non:162,chain_approx_simpl:56,chaix:[3,112],challeng:13,chanc:[59,75,101,106,171,219],chang:[0,3],change_var_idx:177,change_var_typ:177,channel_idx:120,channel_typ:114,channelseq:120,channl:142,chapter:[62,114,119,124,171],characht:[66,74],charact:[9,31,32,66,117,121,125,151,152,178,194],character:[45,149,154,201],characteris:106,characterist:[25,96,101,154,155,172,175,194],charikar:136,charl:159,charu:79,cheap:0,cheaper:10,check:[0,3,6,10,12,14],checkbox:[60,151],checkcontourconvex:162,checkhardwaresupport:116,checkout:[62,64,70],checkrang:116,chellappa:106,chess:1,chess_test:1,chessboard:0,chi:[37,157],chi_tabl:131,chiara:106,chicky_512:50,chih:106,child:[66,106,118,162,166,172],children:[118,131],chin:162,chip:194,chli:131,chmod:62,choic:[60,62,66,74,97,106,112,127,171,172,179,183],choleski:[114,123],choos:[0,1,13,33,37,39,41,48,49,58,59,60,61,62,63,64,66,69,74,75,81,101,106,115,123,135,136,142,144,156,157,171,172,183,192,219],chooser:60,chose:[3,81,82],chosen:[0,3,13,58,59,66,74,81,82,97,101,108,110,112,115,123,135,136,152,155,156,162,173,181],chow:111,chow_liu:111,chowliutre:102,christiansen:[2,4,15,21,28,29,57,66,73,79,83,85,90],christoph:133,chroma:[11,149],chromin:112,chunk:[118,121],cie:[13,159],cielab:[142,202],cin:[5,7],circl:[0,2,6,14,22,23,24,25,33,38,39],circle_storag:154,circles_grid:0,circular:[104,106,118,128,203],cite:[3,62,112],cites:183,citeseerx:[173,202],citi:101,cjlin:183,cl_context:200,cl_device_id:200,cl_platform_id:200,claim:131,clamp:[76,155,192],clamp_mod:166,clariti:[49,112],class_count:172,class_id:[128,129,166],class_idx:172,class_weight:183,classes_:166,classic:[0,3,10,35,106,113,114,123,131,142,154,171,179,219],classid:187,classif:[3,81,82,83,84,86,97,101,105,106,107],classifi:[81,82],classifierfil:163,classlabel:[106,108,109,110],classnam:[64,187],classpath:64,classpathref:64,claus:62,clcxt:190,clean:[3,13,59,60,61,64,66,143,149,162],clear:[0,36,60,66,74,112],clear_var:[60,61],clearbuff:3,clearer:[34,38,66],cleargraph:116,clearli:[41,76,106],clearmemstorag:116,clearnd:116,clearseq:116,clearset:116,clearstat:149,clearsubdivvoronoi2d:168,clenqueueread:194,clever:106,click:[34,35,36,37,38,39,59,60,66,68,69,74,75,76,77,151,153],client:[63,67,71,122],clip:[31,101,117,123,124,162,222],clipboard:153,cliplin:116,clj:62,clock:[0,124],clocks_per_sec:0,clockwis:[48,114,128,156,162],clone:[0,13,22,23,24,34,54,56,62,63,64,67,71,74,96,106,108,109,110],clone_imag:120,clonegraph:116,cloneimag:116,clonemat:116,clonematnd:116,cloneseq:116,clonesparsemat:116,cloonei:[108,110],close:[0,3,9,31,32],closer:[3,118,152],closest:[16,81,127,136,139,159,164,170,176,183,191,196],closur:111,cloud:[91,114,222,223],cloud_pos:91,cloud_pose_glob:91,cloud_widget:91,cloudwidget1:223,cltree:111,clue:103,clump:75,cluster:[38,83,86,99,106,111],cluster_count:115,clustercount:133,clustermethod:133,clusters:111,clutter:[27,101],cm_img0:103,cmake:[1,62,63,64,65,66],cmake_binary_dir:[63,71],cmake_build_typ:71,cmake_install_prefix:71,cmake_minimum_requir:70,cmakelist:[69,70,105],cmd:[59,60,74,75],cmf:62,cmo:159,cmp:123,cmp_eq:[123,148],cmp_func:118,cmp_ge:[123,148],cmp_gt:[123,148],cmp_le:[123,148],cmp_lt:[123,148],cmp_ne:[123,148],cmp_op:123,cmpop:[114,123,148,199],cmtx:119,coars:[154,159],coarser:113,cocoa:150,codebook:[111,114],codec:[32,66,119],codenam:65,coef0:183,coef:183,coeff:[39,123,125],coeffgrid:183,coefficeint:42,coeffici:[0,8,34,42,101,113,123,137,139,141,146,155,156,157,160,191,192],cognit:106,coher:194,coi:[120,123],coiimg:123,coimod:123,coin:131,coincid:[136,162,170],cokela:66,col:[0,7,8,9,10,11,12,20,23,25,27,33,34,37,39,41,46,48,50,56,62,64,66,78,81,82,101,106,108,109,110],colgroup:66,collabor:[3,106],collect:[0,2,7,13,35,36,50,66,68,74],collection_file_nam:97,collegu:[3,112],collinear:162,colon:121,color:[3,6,7,10,11,13,14,32,34,35,36,41,51,52,53,54,55,66,72,74,78,80,81,82,88,91,92,94,95,96,97,101,103,104,112,114,117,119,120,122,123,126,128,130,131,137,142,149,151,152,155,156,157,159,161,162,172,192,193,201,202,211,219,221],color_bgr2grai:23,color_bgr2hsv:37,color_bgr2ycrcb:11,color_dst:154,color_histogram:157,color_img:120,color_scal:11,colorfaq:159,colormap_autumn:103,colormap_bon:[103,106,108],colormap_cool:103,colormap_hot:103,colormap_hsv:103,colormap_jet:[103,106,109],colormap_ocean:103,colormap_pink:103,colormap_rainbow:103,colormap_spr:103,colormap_summ:103,colormap_wint:103,colormod:[3,112],colormodel:120,colorsamplingmethod:112,colorsaturationvalu:112,colorspac:[78,80,142,202],colour:131,colrang:82,column:[0,7,8,10,12,13,39,41,50,62,66,96,101,114,119,120,122,123,128,137,138,141,142,145,146,155,157,159,175,178,182,189,190,191,192,194,199,213,223],columnbordertyp:[141,155],columnfilt:[141,155,192],columnkernel:[141,155,192],com:[60,61,62,63,64,66,67,71,74,94,95,106,111,114,144,152,153,155,159,162,175,186],combin:[13,36,46,47,70,75,95,101,104,106,110,113,114,117,118,121,123,126,128,136,138,142,152,155,156,159,167,171,172,179,186,193,199,211,219,222],come:[0,2,3,5,9,10,11,13,27,31,35,45,48,50,66,69,74,75,76,80,86,103,106,107,108,109,110,114,120,123],comma:[13,114],command:[0,3,7,9,10,27,31,32,59],comment:[47,58,66,86,106,112,121,182],commerci:106,commit:66,committe:171,commmand:75,common:[0,10,12],commonli:[7,32,66,81,114,138,165,174,179],commonparam:[139,212],commun:[26,61,66,87,106,178],comp:[159,219],compact:[12,59,101,115,119,120,121,125,156,172,196],compactresult:[127,129,139,191],compani:97,compar:[10,11,27,37,39,55,76,101,106,111,114,116,119,121],compare_method:37,comparehist:37,comparehist_demo:37,compat:[2,3,4,11,13,15,21,28,29,57,60,66,73,79,83,85,90],compens:[101,156,186,205],compet:106,competit:131,compil:[1,3,6,10,11,33,40,41,42,45,46,48,49,50,58,60],complaint:11,complementari:[3,112],complet:[3,33,40,43,58,59,60,62,66,74,75,76,89,97,101,114,117,118,120,123,125,126,131,133,138,155,172,179,182],completesymm:116,complex:[8,26,66,82,86,106,114,117,118,119,120,123,124,125,142,147,149,154,155,156,157,159,162,186,199,201,219,223],complexi:8,compli:101,compliant:[62,123],complic:[11,32,106],complimentari:114,compon:[8,11,13,34,39,46,60,61,62,78,101,104,106,108,109,114,118,119,120,121,123,128,142,147,149,155,157,159,162,164,165,169,171,174,175,180,182,187,201,202,213,219],compos:[31,82,106,108,110,199,210],compose_resol_:210,composert:100,composit:[117,142],compositeindexparam:136,compositingresol:210,compound:121,compress:[3,9,31,97,112,123,125,152,162,166,172],compression_non:164,compression_param:152,compression_pca:164,compression_random_proj:164,compressionmethod:164,compressleav:166,compresspca:123,compromis:[3,219],comput:[3,5,7,8,13,16,17,19,20,25,27],computation:[13,66,171],computecorrespondepilin:100,computeeigenvector:123,computenormalizedcolorhist:114,computeprojectionmatrix:221,computereprojectionerror:[0,1],computevar:123,concaten:[101,106,118,121,123,126],concentr:[106,111],concept:[13,36,81,104],concern:74,concis:[13,64,66],conclud:10,concret:[104,128],concurr:124,condit:[3,13,37,101,106,108,109,110,112,114,118,119,123,124,149,155,159],cone:[106,223],conf:[66,211,217],conf_thresh:[210,213],conf_thresh_:[210,213],confer:[3,97,106,111,112,126,131,136,149,154,162,167,184,219],confid:[101,104,106,108,109,110,171,176,181,187,212],config:[3,69,71,112,149],configfil:149,configur:[0,1,3,14,36,59,60,61,62,64,66],conflict:[11,65,119,124],confthresh:213,confus:[27,33,105,106,171],congratul:[69,72],conic:162,conj:114,conjb:[123,142],conjug:[123,142,199],conjunct:[123,148,219],connect:[3,6,40,59,60,74,80,101,117,118,128,130,152,157,159,162,170,213,219,226,229],connected_compon:153,consequ:[60,81,101,114,119],consequenti:[106,108,110],consequt:202,consid:[3,10,12,14,25,34,35,38,39,40,44,46,48,58,59,66,81,82,96,97,101,102,106,111,114,118,120,121,123,128,144,149,154,155,157,159,166,167,172,174,183,192,199,201,203,219],consider:[27,36,82,114],consist:[10,33,44,61,81,93,106,118,121,123,125,127,128,133,136,157,159,179,186,212],consol:[1,9,10,13,15,16,19,31,32,60,64,65,66,69,74,75,76],const_iter:114,constanc:149,constant:[0,3,7,9,10,13,41,66,74,82,101,112,113,114,119,120,122,123,127,137,138,142,148,155,156,159,172,175,189,192,193],constantli:11,constrain:[81,106,114,151,174,183],constraint:[66,81,101,118,151,153,165,174,176,192,196],construct:[13,32,66,76,88,92,96,101,111,114,117,118,119,120,123,124,125,133,135,136,142,143,149,155,171,172,173,178,179,181,182,186,187,190,211,212,213,216,217,219,222,223],constructor:[3,9,11,13,31,32,62,76,93,101,104,112,113,114,117,122,123,124,125,126,127,128,131,133,137,138,139,143,146,149,152,155,165,171,172,174,175,176,179,180,181,182,183,184,187,189,190,201,219,222],constuct:190,consult:[40,60,61,64],consum:[10,101,128],contact:[59,60,61,66,74],contain:[0,3,8,10,11],contemporari:62,contend:110,content:[3,9,15,31,32,59,62,64,65,66,67,74,75,96],context:[3,59,60,61,76,106,122,124,138,153,162,190,194,200,226,229],contextref:78,continu:[0,10,66,74,76,77,97,114,118,120,123,138,142,147,171,179,182,190],continuous_flag:114,contour1:162,contour2:162,contour:40,contourarea:[55,158],contouridx:162,contours2:162,contours_poli:51,contract:[106,108,110],contrari:[3,96],contrast:3,contrast_gain:11,contrastthreshold:[114,184],contrib:3,contribut:3,contributor:[106,108,109,110],control:[0,7,13,27,31,32,33,40,62,74,75,80,89,93,97,101,112,117,118,124,128,141,144,149,151,153,155,156,171,179,192,201,217,219],control_param:219,controlmatrix:[201,219],controlparam:[201,219],conv:31,convei:66,conveni:[7,13,60,64,68,96,101,114,119,120,121,123,125,152,155],convent:[13,63,66,81,96,114,159,171,172,175,176,180,181,183,196],converg:[119,136,179,219],convers:[0,3,9,11,31,32,73,74,78,96,101,114,119,120,121,123,124,142,155,156,159,181,193],convert:[3,8,10,11,13,15,22,23,24,25,31,32,35,37,38,40,43,45,47,50,51,52,53,54,55,58,60,66,72,78,96],convertdata:123,convertdescriptorsarraytotre:164,convertmap:101,converto3drai:221,convertpointsfromhomogen:100,convertpointshomogen:100,convertpointstohomogen:100,convertposteriorstochar:166,convertscal:[11,116],convertscaleab:[25,45,47,116],convertscaledata:123,convertto:[7,11,27,31,96],converttowindowcoordin:221,convex:6,convexhul:[54,158],convexhull2:162,convexitydefect:158,convolut:[33,40,41],convolv:[34,41,47,50,141],convolvedft:123,cooki:222,cool:[5,7],coord:151,coordin:[0,1,6,10,14,34,44,46,76,82,91,92,94,96,97,101,106,114,115,117,120,122,123,124,125,127,128,131,137,139,142,147,149,153,154,155,156,157,162,167,169,170,184,187,192,193,199,201,213,219,222,223],coordinatesystemwidget:92,cope:138,copi:[3,11,13,22,24,35,39,40,41,60,61,62,64,69,74,80,84,86,96,106,114,116,117,118,119],copy_data:118,copydata:[114,123],copyfrom:116,copymakebord:[8,11,41,114],copyright:[62,106,108,109,110],copyto:[8,13,39,40,96,106,108,109],core:[8,9],core_test:62,coregraph:80,coreimag:80,coremedia:80,corepng:32,corevideo:80,corner:[0,1,14,20,21],corner_count:[101,154],corner_mask:154,cornercount:154,cornerdetector_demo:23,cornereigenvalsandvec:[23,149],cornerharri:25,cornerharris_demo:25,cornermineigenv:23,corners_:214,corners_window:25,cornersubpix:[0,22,101],correct:[0,3,4,7,8,31,32,60,62,66,82,96,101,104,108,112,119,146,152,154,156,159,191,194],correctli:[3,65,81,82,93,101,124,171,172,178,194],correctmatch:100,correl:[37,106,114,123,131,142,155,157,159,160],correspod:114,correspond:[6,7,8,17,31,33,35,36,39,42,46,58,59,61,62,66,76,80,82,93,94,95,96,97,101,102,104,106,108,109,110],correspondent_lin:101,correspondingli:[61,66,96,101,162],corrthresh:131,corrupt:[3,76,118],cortex:[3,106,112],cosenza:[2,4,15,21,28,29,57,62,66,73,79,83,85,90],cosin:[8,106,108,110,123],cosinu:106,cost:[3,101,104,137,142,144,157,159,187,189,194,197,213,219],cost_color:214,cost_color_grad:214,cost_matrix:157,cost_typ:214,costli:[10,27,31,80],could:[0,3,7,9,10,11,27,31,32,62,65,74,75,80,82,101,104,106,108,110,113,114,117,119,122,123,124,145,151,155,157,159,165,172,174,179,184,203,219],count:[11,13,36,93],counter:[13,31,48,101,114,117,119,120,121,122,124,125,156,162,190],counterpart:[8,27],countless:75,countnonzero:[114,116],countri:185,coupl:[0,10,11,14,44,69,74,81,82],cours:[36,65,75,106,114,121,131,194],cout:[0,3,5,7,9,10,13,17,18,20,22,24,31,32,38,44,65,66,75,76,82,89,91,94,95,106,108,109,110,114,119,125,162],cout_mat:114,cov:[165,174],cov_mat:123,cov_mat_diagon:[165,174],cov_mat_gener:[165,174],cov_mat_spher:[165,174],cov_mat_typ:165,covar:123,covari:[106,123,142,149,154,155,165,174,180,201],cover:[49,60,74,101,123,131,146,157,159,170,186,191,219],covert:78,covertmap:193,covmat:123,covmattyp:174,covs0:174,cow:45,cplusplu:60,cpp:[0,1,3,8,9,10,11,12,13,22,23,24,27,31,32,37,60,66,69,70,75,82,93,94,95,101,104,105,106,108,109,110,111,112,113,114,115,117,119,123,125,126,127,128,129,131,133,137,141,142,146,149,152,153,154,155,156,157,159,162,165,166,172,181,184,186,187,191,194,197,203,210,219],cpu:[10,27,59,60,74,80,124,137,138,139,142,144,146,184,189,191,194,199],cpw:91,cpw_frustum:91,crafti:66,cram:11,crash:[66,114],crazi:[14,66],creat:[0,1,3,5,6,7,8,10,11,12],create_csv:[104,106,108,110],create_head:120,create_miss:121,create_nod:120,create_roi:120,createalphamat:152,createbutton:150,createchildmemstorag:116,createdata:116,createdefault:[207,209],createderivfilt:141,createdescriptorsfromimag:164,createex:190,creategaussianfilt:141,creategraph:116,creategraphscann:116,createhanningwindow:158,createimag:116,createimagehead:116,createkalman:219,createlinearfilt:141,createmat:116,createmathead:116,creatematnd:116,creatematndhead:116,creatememstorag:116,createmiss:114,createmorphologyfilt:141,createnod:166,createpcadescriptor:164,createseparablelinearfilt:141,createseq:116,createset:116,createsparsemat:116,createstereobmst:101,createstructuringelementex:155,createsubdivdelaunay2d:168,createsuperresolution_btvl1_gpu:217,createtrackbar:[22,23,24,25,30,33,35,39,40,49,51,52,53,54,55,58,150],createvideowrit:152,createweightmap:207,creation:[97,111,122,153],creator:74,cremer:217,crete:126,cri:110,crissyfield:3,criteria:[22,40,81,82,101,114,115,118,120,121,142,154,155,165,169,171,172,174,179,181,183,186,193,196,213,219],criterion:[45,81,104,106,219],critic:[3,71,118,119],crop:[8,106,108,110],crop_02:110,crop_03:110,crop_05:110,crop_08:110,crop_arnold_schwarzenegg:110,crop_fac:108,crop_siz:[106,108,110],crop_xi:[106,108,110],cropfac:[106,108,110],cross:[5,33,49],cross_corr:114,crosscheck:127,crossproduct:116,cruis:[108,110],csie:183,css:66,css_t:66,cssclass:66,csur:106,csurka:133,csv:13,cthr:219,ctr:62,ctrl:[59,151,153,222],ctype:123,cube:[92,124,223],cube_widget:92,cuberoot:116,cubic:[119,123],cubin:144,cucchiarra:[149,219],cuda:[27,74,122,138,143,144,149],cuda_arch_bin:144,cuda_arch_ptx:144,cudastream_t:138,cumbersom:75,cummin:111,cumul:[38,181],curfram:149,curr:[169,219],curr_featur:219,curr_pyr:219,current:[0,10,12,31,33,43,49,50,59,61,63,65,66,72,74,75,76,84,97,101,103,106,110,112,114,117,118,119,120,121,122,123,124,125,126,127,129,131,137,138,142,143,144,149,151,152,153,154,155,157,159,162,166,167,171,174,175,176,178,181,183,186,189,190,192,194,199,201,219,222,223,229,231],current_threshold:104,currfeatur:219,currpyr:219,cursor:76,curv:[44,117,162],custom:[9,13,61,66,75,101,111,113,114,115,118,121,125,131,152,155,157,172,194],cut:[3,41],cutler:181,cv2:[101,115,117,120,123,124,128,151,152,153,154,155,156,157,159,160,161,162,171,172,174,175,176,179,180,181,182,183,184,186,203,219],cv2drotationmatrix:156,cv32fc1:142,cv32fc2:142,cv_16:[45,47,101,114,119,120,137,141,142,148,155,189,192],cv_16sc1:[137,141,189,192],cv_16sc2:[0,101,141,142,156,192,193],cv_16sc3:[114,141,192],cv_16u:[114,119,120,141,142,147,148,152,155,159],cv_16uc1:[94,95,156],cv_16uc2:147,cv_16uc4:142,cv_16uc:159,cv_32:[101,114,119,120,123,141,142,147,148,159,175,191,192,199],cv_32f:[8,13,27,31,42,92,96,101,114,115,119,120,121,122,123,137,141,142,147,148,154,155,157,159,160,175,189,192,197,199,201,216,219],cv_32fc1:[23,25,39,46,48,56,81,82,95,101,119,120,123,137,141,142,147,149,154,156,160,176,178,180,182,184,189,192,193,197,199,201],cv_32fc2:[94,101,114,115,119,123,142,147,149,154,156,193,199,201,219],cv_32fc3:[91,95,114,193,223],cv_32fc4:[142,193,223],cv_32fc:[23,119,154],cv_32sc1:[104,118,141,142,159,162,174,178,182,192,193],cv_32sc2:118,cv_32sc4:[142,154,193],cv_32sc:190,cv_64f:[0,13,114,119,120,123,142,145,148,155,159,174,199,201,213,219],cv_64fc1:[120,123,142,147,160,174,199],cv_64fc2:[119,123,147,156],cv_64fc3:[190,223],cv_64fc4:[114,119,122,223],cv_64fc:[114,119],cv_8:[114,119,120,142,175],cv_8u:[10,11,12,45,47,96,114,119,120,123,137,141,142,146,147,148,155,157,159,175,186,189,192,197,210,213],cv_8uc1:[13,56,62,64,68,78,95,106,108,109,114,119,122,123,137,141,142,145,146,147,148,149,152,154,155,178,182,186,189,190,191,192,193,199,201,219],cv_8uc2:[142,199],cv_8uc3:[6,13,14,35,36,51,52,53,54,55,56,62,81,82,94,95,106,108,109,114,117,119,120,123,137,142,147,149,157,162,189,193],cv_8uc4:[78,123,137,141,142,146,147,149,152,189,191,192,193],cv_8uc:[13,114,119],cv_:[13,114,120,162],cv_aa:[44,117],cv_adaptive_thresh_mean_c:159,cv_assert:[10,12,114,116,117,119,123],cv_autostep:120,cv_back:118,cv_bayer:159,cv_bayerbg2bgr:159,cv_bayerbg2rgb:159,cv_bayergb2bgr:159,cv_bayergb2rgb:159,cv_bayergr2bgr:159,cv_bayergr2rgb:159,cv_bayerrg2bgr:159,cv_bayerrg2rgb:159,cv_bgr2bgra:80,cv_bgr2grai:[0,22,24,25,38,40,43,45,47,51,52,53,54,55,58,72,78,84,96,110,114,119,152,154,159],cv_bgr2hl:159,cv_bgr2hsv:[35,37,157,159],cv_bgr2lab:159,cv_bgr2luv:159,cv_bgr2xyz:159,cv_bgr2ycrcb:159,cv_bgra2bgr:80,cv_bilater:155,cv_blur:155,cv_blur_no_scal:155,cv_calib_cb_adaptive_thresh:[0,1,101],cv_calib_cb_fast_check:0,cv_calib_cb_normalize_imag:[0,101],cv_calib_fix_aspect_ratio:[0,101],cv_calib_fix_focal_length:101,cv_calib_fix_intrins:101,cv_calib_fix_k1:101,cv_calib_fix_k4:0,cv_calib_fix_k5:0,cv_calib_fix_k6:101,cv_calib_fix_k:101,cv_calib_fix_principal_point:101,cv_calib_rational_model:101,cv_calib_same_focal_length:101,cv_calib_use_intrinsic_guess:101,cv_calib_zero_dispar:101,cv_calib_zero_tangent_dist:101,cv_cap_intelperc:94,cv_cap_intelperc_depth_gener:94,cv_cap_intelperc_depth_map:94,cv_cap_intelperc_imag:94,cv_cap_intelperc_image_gener:94,cv_cap_intelperc_ir_map:94,cv_cap_intelperc_uvdepth_map:94,cv_cap_openni:95,cv_cap_openni_bgr_imag:95,cv_cap_openni_depth_gener:95,cv_cap_openni_depth_generator_baselin:95,cv_cap_openni_depth_generator_focal_length:95,cv_cap_openni_depth_generator_registr:95,cv_cap_openni_depth_map:95,cv_cap_openni_disparity_map:95,cv_cap_openni_disparity_map_32f:95,cv_cap_openni_gray_imag:95,cv_cap_openni_image_gener:95,cv_cap_openni_image_generator_output_mod:95,cv_cap_openni_image_generator_pres:95,cv_cap_openni_point_cloud_map:95,cv_cap_openni_sxga_15hz:95,cv_cap_openni_sxga_30hz:95,cv_cap_openni_valid_depth_mask:95,cv_cap_openni_vga_30hz:95,cv_cap_prop_bright:152,cv_cap_prop_buffers:152,cv_cap_prop_contrast:152,cv_cap_prop_convert_rgb:152,cv_cap_prop_exposur:152,cv_cap_prop_format:152,cv_cap_prop_fourcc:[32,152],cv_cap_prop_fp:[32,94,95,152],cv_cap_prop_frame_count:[31,32,152],cv_cap_prop_frame_height:[31,32,95,152],cv_cap_prop_frame_width:[31,32,95,152],cv_cap_prop_gain:152,cv_cap_prop_hu:152,cv_cap_prop_intelperc_profile_idx:94,cv_cap_prop_iso_spe:152,cv_cap_prop_mod:152,cv_cap_prop_openni_baselin:95,cv_cap_prop_openni_focal_length:95,cv_cap_prop_openni_frame_max_depth:95,cv_cap_prop_openni_image_generator_pres:95,cv_cap_prop_openni_output_mod:95,cv_cap_prop_openni_registr:95,cv_cap_prop_pos_avi_ratio:152,cv_cap_prop_pos_fram:[31,152],cv_cap_prop_pos_msec:[31,152],cv_cap_prop_rectif:152,cv_cap_prop_satur:152,cv_cap_prop_white_balance_u:152,cv_cap_prop_white_balance_v:152,cv_cdecl:[118,121,157],cv_chain_approx_non:162,cv_chain_approx_simpl:[51,52,53,54,55,162],cv_chain_approx_tc89_kco:162,cv_chain_approx_tc89_l1:162,cv_checkbox:151,cv_clockwis:162,cv_cn_max:[114,119,120],cv_col_sampl:[172,175,182],cv_comp_bhattacharyya:[37,157],cv_comp_chisqr:[37,157],cv_comp_correl:[37,157],cv_comp_helling:157,cv_comp_intersect:[37,157],cv_contours_match_i1:162,cv_contours_match_i2:162,cv_contours_match_i3:162,cv_counterclockwis:162,cv_covar_col:123,cv_covar_norm:123,cv_covar_row:123,cv_covar_scal:123,cv_covar_scrambl:123,cv_covar_use_avg:123,cv_cpu_avx2:124,cv_cpu_avx:124,cv_cpu_mmx:124,cv_cpu_popcnt:124,cv_cpu_ss:124,cv_cpu_sse2:124,cv_cpu_sse3:124,cv_cpu_sse4_1:124,cv_cpu_sse4_2:124,cv_cpu_ssse3:124,cv_dbgassert:[119,124],cv_dist_c:[157,159],cv_dist_fair:162,cv_dist_hub:162,cv_dist_l12:162,cv_dist_l1:[157,159,162],cv_dist_l2:[157,159,162],cv_dist_label_ccomp:159,cv_dist_mask_precis:159,cv_dist_us:157,cv_dist_welsch:162,cv_elem_s:190,cv_epnp:101,cv_error:[103,106,108,109,110,119,124],cv_error_:[119,124],cv_export:[114,126,128,129,137,138,141,142,143,146,149,164,166,178,186,189,190,191,192,196,197,201,207,208,209,210,212,213,214,216,222,223],cv_exports_w:114,cv_fill:[117,157,162,176],cv_fm_7point:101,cv_fm_8point:101,cv_fm_lmed:101,cv_fm_ransac:101,cv_fold:[171,172],cv_font_black:151,cv_font_bold:151,cv_font_demibold:151,cv_font_hershey_complex:[14,34,117],cv_font_hershey_complex_smal:117,cv_font_hershey_duplex:117,cv_font_hershey_plain:117,cv_font_hershey_script_complex:117,cv_font_hershey_script_simplex:117,cv_font_hershey_simplex:[69,117],cv_font_hershey_triplex:117,cv_font_ital:[69,117],cv_font_light:151,cv_font_norm:151,cv_fourcc:[32,152],cv_front:118,cv_gaussian:155,cv_gaussian_5x5:155,cv_get_seq_elem:118,cv_gpunotsupport:144,cv_graph_all_item:118,cv_graph_any_edg:118,cv_graph_back_edg:118,cv_graph_backtrack:118,cv_graph_cross_edg:118,cv_graph_edge_field:118,cv_graph_field:170,cv_graph_flag_ori:118,cv_graph_forward_edg:118,cv_graph_new_tre:118,cv_graph_ov:118,cv_graph_tree_edg:118,cv_graph_vertex:118,cv_graph_vertex_field:118,cv_gray2bgr:[44,154,159],cv_gray2rgb:159,cv_gui_expand:[151,153],cv_gui_norm:[151,153],cv_haar_scale_imag:84,cv_hist_arrai:157,cv_hist_spars:157,cv_hls2bgr:159,cv_hls2rgb:159,cv_hough_gradi:[43,142,154],cv_hough_multi_scal:154,cv_hough_probabilist:154,cv_hough_standard:154,cv_hsv2bgr:159,cv_hsv2rgb:159,cv_imwrite_jpeg_qu:152,cv_imwrite_png_compress:152,cv_imwrite_pxm_binari:152,cv_inter_area:156,cv_inter_cub:156,cv_inter_linear:[46,156],cv_iplallocateimagedata:120,cv_iplcloneimag:120,cv_iplcreateimagehead:120,cv_iplcreateroi:120,cv_ipldealloc:120,cv_is_oclmat_cont:190,cv_is_set_elem:118,cv_iter:101,cv_l2:[0,123],cv_lab2bgr:159,cv_lab2rgb:159,cv_lmed:101,cv_load_image_anydepth:152,cv_load_image_color:[13,65,76,152],cv_load_image_grayscal:[1,8,16,17,18,19,20,65,93,104,152],cv_load_image_unchang:65,cv_lu:123,cv_luv2bgr:159,cv_luv2rgb:159,cv_make_typ:[27,123,145],cv_maketyp:[114,119],cv_mat_cn:190,cv_mat_depth:[123,145,147,155,190],cv_mat_elem:120,cv_mat_magic_v:120,cv_mat_typ:[120,190],cv_matnd_magic_v:120,cv_max_dim:[120,157],cv_median:155,cv_minmax:8,cv_next_around_dst:170,cv_next_around_left:170,cv_next_around_org:170,cv_next_around_right:170,cv_next_graph_edg:118,cv_next_seq_elem:[118,121],cv_node_flow:121,cv_node_idx:120,cv_node_int:121,cv_node_is_int:121,cv_node_is_seq:121,cv_node_map:[114,121],cv_node_non:121,cv_node_r:121,cv_node_seq:121,cv_node_str:121,cv_node_typ:121,cv_node_v:120,cv_nois:11,cv_out:114,cv_p3p:101,cv_pca_data_as_col:123,cv_pca_data_as_row:123,cv_pi:[9,13,44,92,114,154,166],cv_planes_0:11,cv_poly_approx_dp:162,cv_prev_around_dst:170,cv_prev_around_left:170,cv_prev_around_org:170,cv_prev_around_right:170,cv_ptloc_error:170,cv_ptloc_insid:170,cv_ptloc_on_edg:170,cv_ptloc_outside_rect:170,cv_ptloc_vertex:170,cv_push_button:151,cv_quadedge2d_field:170,cv_radiobox:151,cv_rand_norm:[120,176],cv_rand_uni:120,cv_ransac:[16,20,101,119],cv_read_seq_elem:118,cv_reduce_avg:[123,145],cv_reduce_max:[123,145],cv_reduce_min:[123,145],cv_reduce_sum:[123,145],cv_retr_ccomp:162,cv_retr_extern:162,cv_retr_floodfil:162,cv_retr_list:162,cv_retr_tre:[51,52,53,54,55,162],cv_rev_read_seq_elem:118,cv_rgb2grai:[155,159],cv_rgb2hl:159,cv_rgb2hsv:159,cv_rgb2lab:159,cv_rgb2luv:159,cv_rgb2xyz:159,cv_rgb2ycrcb:159,cv_rgb:[110,117,176],cv_row_sampl:[172,175,176,180,182,183,196],cv_scharr:155,cv_seq_eltype_point:118,cv_seq_kind_graph:118,cv_seq_magic_v:118,cv_set_elem_idx_mask:118,cv_set_magic_v:118,cv_shape_custom:155,cv_sort_ascend:123,cv_sort_descend:123,cv_sort_every_column:123,cv_sort_every_row:123,cv_sparse_mat_magic_v:120,cv_sqdiff:39,cv_sqdiff_norm:39,cv_stereo_bm_bas:101,cv_stereo_bm_fish_ey:101,cv_stereo_bm_narrow:101,cv_stereo_bm_normalized_respons:101,cv_stereo_bm_xsobel:101,cv_storage_read:121,cv_storage_writ:121,cv_struct_align:118,cv_stsbadarg:[103,106,108,109,110],cv_stserror:[106,108,109],cv_stsoutofrang:124,cv_style_ital:151,cv_style_norm:151,cv_style_obliqu:151,cv_subdiv2d_field:170,cv_subdiv2d_point_field:170,cv_subdiv2d_virtual_point_flag:170,cv_termcrit_ep:[0,22,101,120,121,155,165,179,181,183,213],cv_termcrit_it:[0,22,81,82,101,120,121,155,165,179,181,183,213],cv_test_error:[172,175],cv_thresh_binari:159,cv_tm_ccoeff:[39,142,161,197],cv_tm_ccoeff_norm:[39,142,161,197],cv_tm_ccorr:[39,142,161,197],cv_tm_ccorr_norm:[39,142,161,197],cv_tm_sqdiff:[39,142,161,197],cv_tm_sqdiff_norm:[39,142,161,197],cv_train_error:[172,175],cv_turn_on_ipl_compat:120,cv_var_categor:[178,182],cv_var_numer:182,cv_var_ord:[178,182],cv_warp_fill_outli:156,cv_warp_inverse_map:156,cv_whole_seq:[118,162,171,175],cv_whole_seq_end_index:118,cv_window_autos:[22,24,25,31,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,69,72,96,151,153],cv_window_freeratio:[151,153],cv_window_fullscreen:151,cv_window_keepratio:[151,153],cv_window_norm:[151,153],cv_wnd_prop_aspectratio:151,cv_wnd_prop_autos:151,cv_wnd_prop_fullscreen:151,cv_wrap:114,cv_write_seq_elem:118,cv_xyz2bgr:159,cv_xyz2rgb:159,cv_ycrcb2bgr:[11,159],cv_ycrcb2rgb:159,cvabsdiff:123,cvacc:160,cvadaptivethreshold:159,cvadd:[123,151],cvaddtext:151,cvaddweight:[11,123],cvalloc:124,cvalu:183,cvand:123,cvann_mlp:177,cvann_mlp_trainparam:177,cvapproxchain:162,cvapproxpoli:162,cvarclength:162,cvarr:[101,115,116,117,118],cvarrtomat:[116,120],cvattrlist:116,cvattrvalu:121,cvavg:123,cvavgsdv:123,cvboundingrect:162,cvbox2d:[114,116,117],cvbuttoncallback:151,cvc:106,cvcalcbackproject:157,cvcalcbackprojectpatch:157,cvcalccovarmatrix:123,cvcalcemd2:157,cvcalcglobalorient:219,cvcalchist:157,cvcalcmotiongradi:219,cvcalcopticalflowbm:169,cvcalcopticalflowfarneback:219,cvcalcopticalflowh:169,cvcalcopticalflowlk:169,cvcalcopticalflowpyrlk:219,cvcalcpgh:167,cvcalcprobdens:157,cvcalcsubdivvoronoi2d:170,cvcalibratecamera2:101,cvcameraviewfram:61,cvcameraviewlisten:61,cvcameraviewlistener2:61,cvcamshift:219,cvcanni:154,cvcaptur:[84,151,152],cvcapturefromcam:[84,152],cvcapturefromfil:[151,152],cvcarttopolar:[123,156],cvcbrt:124,cvceil:124,cvchain:121,cvcheckcontourconvex:162,cvcheckhardwaresupport:124,cvcircl:[117,176],cvcl_device_type_cpu:200,cvcl_device_type_default:200,cvcl_device_type_gpu:200,cvcleargraph:118,cvclearhist:157,cvclearmemstorag:118,cvclearnd:120,cvclearseq:118,cvclearset:118,cvclearsubdivvoronoi2d:170,cvcliplin:117,cvclone:121,cvclonefunc:121,cvclonegraph:118,cvcloneimag:[120,152],cvclonemat:120,cvclonematnd:120,cvcloneseq:118,cvclonesparsemat:120,cvcloud_load:91,cvcmp:123,cvcmpfunc:118,cvcomparehist:157,cvcomputecorrespondepilin:101,cvconnectedcomp:[159,219],cvcontour:[121,162],cvcontourarea:162,cvconvert:120,cvconvertpointshomogen:101,cvconvertscal:[11,120,190],cvconvertscaleab:123,cvconvexhull2:162,cvconvexitydefect:162,cvconvexitydetect:162,cvcopi:[120,166],cvcopyhist:157,cvcopymakebord:155,cvcornereigenvalsandvec:154,cvcornerharri:154,cvcornermineigenv:154,cvcorrectmatch:101,cvcountnonzero:123,cvcreatebutton:151,cvcreatechildmemstorag:118,cvcreatedata:120,cvcreategraph:118,cvcreategraphscann:118,cvcreatehist:157,cvcreateimag:[69,120,123,151,166,176],cvcreateimagehead:120,cvcreatekalman:219,cvcreatemat:[114,120,121,123,176],cvcreatemathead:120,cvcreatematnd:120,cvcreatematndhead:120,cvcreatememstorag:[118,166],cvcreateseq:118,cvcreateset:118,cvcreatesparsemat:120,cvcreatestereobmst:101,cvcreatestructuringelementex:155,cvcreatesubdivdelaunay2d:170,cvcreatetrackbar:[151,153],cvcreatevideowrit:152,cvcrossproduct:120,cvcvtcolor:159,cvcvtscale:120,cvcvtseqtoarrai:118,cvdct:123,cvdecodeimag:152,cvdecodeimagem:152,cvdecomposeprojectionmatrix:101,cvdecrefdata:120,cvdestroyallwindow:[123,151,153],cvdestroywindow:153,cvdet:123,cvdft:123,cvdilat:155,cvdisplayoverlai:151,cvdisplaystatusbar:151,cvdistancefunct:157,cvdisttransform:159,cvdiv:123,cvdotproduct:120,cvdrawchessboardcorn:101,cvdrawcontour:162,cvdtree:171,cvdtreenod:171,cvdtreeparam:171,cvdtreetraindata:171,cveigenvv:123,cvellips:117,cvellipsebox:117,cvencodeimag:152,cvendwriteseq:118,cvendwritestruct:121,cvequalizehist:157,cverod:155,cverror:124,cvexp:123,cvextractsurf:[166,184],cvfastarctan:124,cvfilenod:116,cvfilestorag:116,cvfillconvexpoli:117,cvfillpoli:117,cvfilter2d:155,cvfindchessboardcorn:101,cvfindcontour:162,cvfindcornersubpix:154,cvfindextrinsiccameraparams2:101,cvfindfundamentalmat:101,cvfindgraphedg:118,cvfindgraphedgebyptr:118,cvfindhomographi:101,cvfindnearestpoint2d:170,cvfindstereocorrespondencebm:101,cvfindtyp:121,cvfirsttyp:121,cvfitellipse2:162,cvfitlin:162,cvflann:135,cvflip:123,cvfloodfil:159,cvfloor:[124,156],cvflushseqwrit:118,cvfont:[69,117,151],cvfontqt:151,cvforesttre:181,cvfree:[120,124],cvgemm:123,cvget1d:120,cvget2d:120,cvget3d:120,cvgetaffinetransform:156,cvgetcaptureproperti:[104,114,152],cvgetcol:120,cvgetdiag:120,cvgetdim:120,cvgetdims:120,cvgetelemtyp:120,cvgetfilenod:121,cvgetfilenodebynam:121,cvgetfilenodenam:121,cvgetgraphvtx:118,cvgethashedkei:121,cvgethashednod:121,cvgethistvalue_1d:167,cvgethistvalue_2d:167,cvgethistvalue_3d:167,cvgethistvalue_nd:167,cvgethumo:162,cvgetimag:[120,123],cvgetimagecoi:[120,123],cvgetimageroi:[120,166],cvgetmat:[120,123],cvgetminmaxhistvalu:157,cvgetnd:120,cvgetnextsparsenod:120,cvgetoptimaldfts:123,cvgetoptimalnewcameramatrix:101,cvgetperspectivetransform:156,cvgetquadranglesubpix:156,cvgetrawdata:120,cvgetreal1d:120,cvgetreal2d:120,cvgetreal3d:120,cvgetrealnd:120,cvgetrectsubpix:156,cvgetrootfilenod:121,cvgetrow:[120,176],cvgetseqelem:[118,166],cvgetseqreaderpo:118,cvgetsetelem:118,cvgetsiz:[120,151],cvgetsubrect:120,cvgettexts:117,cvgettickcount:166,cvgettrackbarpo:153,cvgetwindowproperti:151,cvgip:162,cvgoodfeaturestotrack:154,cvgrabfram:152,cvgraph:116,cvgraphaddedg:118,cvgraphaddedgebyptr:118,cvgraphaddvtx:118,cvgraphedg:116,cvgraphedgeidx:118,cvgraphfindedg:118,cvgraphfindedgebyptr:118,cvgraphremoveedg:118,cvgraphremoveedgebyptr:118,cvgraphremovevtx:118,cvgraphremovevtxbyptr:118,cvgraphscann:116,cvgraphvtx:116,cvgraphvtxdegre:118,cvgraphvtxdegreebyptr:118,cvgraphvtxidx:118,cvhaarclassifiercascad:186,cvhaardetectobject:[186,197],cvhistogram:[157,167],cvhoughcircl:154,cvhoughlines2:154,cvhumoment:162,cvimg:114,cvincrefdata:120,cvinitfont:[69,117],cvinitimagehead:120,cvinitintrinsicparams2d:101,cvinitmathead:120,cvinitmatndhead:120,cvinitsparsematiter:120,cvinittreenodeiter:118,cvinitundistortmap:156,cvinitundistortrectifymap:156,cvinpaint:203,cvinrang:123,cvinsertnodeintotre:118,cvintegr:159,cvinvert:123,cvisinf:124,cvisinstancefunc:121,cvisnan:124,cviu:[3,112,154],cvkalman:219,cvkalmancorrect:219,cvkalmanpredict:219,cvkmeans2:115,cvlaplac:155,cvline:117,cvlinearpolar:156,cvload:121,cvloadimag:[11,13,66,114,151,152],cvloadimagem:152,cvloadwindowparamet:151,cvlog:123,cvlogpolar:156,cvlut:123,cvmahalanobi:123,cvmakehistheaderforarrai:157,cvmakeseqheaderforarrai:118,cvmap:121,cvmat:[11,66,78,96,101],cvmatchshap:162,cvmatchtempl:161,cvmatfromuiimag:78,cvmatgrayfromuiimag:78,cvmatmuladd:120,cvmatnd:[114,116],cvmax:123,cvmeanshift:219,cvmemblock:116,cvmemstorag:116,cvmemstoragealloc:118,cvmemstorageallocstr:118,cvmemstoragepo:116,cvmerg:123,cvmget:120,cvmin:123,cvminarearect2:162,cvminenclosingcircl:162,cvminmaxloc:123,cvmixchannel:123,cvmldata:[171,172,175,177],cvmoment:162,cvmorphologyex:155,cvmousecallback:153,cvmovewindow:[31,33,153],cvmserparam:[128,131],cvmset:120,cvmul:[11,123],cvmulspectrum:123,cvmultiplyacc:160,cvmultranspos:123,cvnamedwindow:[69,123,151,153,176],cvnextedgetyp:170,cvnextgraphitem:118,cvnexttreenod:118,cvnorm:123,cvnormalbayesclassifi:[165,174,177],cvnormalizehist:157,cvnot:123,cvoclmat:190,cvonlin:155,cvopenfilestorag:121,cvopengldrawcallback:151,cvor:123,cvparamgrid:177,cvperspectivetransform:123,cvpoint2d32f:[101,114,116],cvpoint2d64f:116,cvpoint3d32f:[114,116],cvpoint3d64f:[101,116],cvpoint:[20,69,114,116,117,118],cvpointfrom32f:120,cvpointpolygontest:162,cvpointto32f:120,cvpolartocart:123,cvpolylin:117,cvpow:123,cvpr10:211,cvpr97:219,cvpr:[97,131,137,186,211],cvprecornerdetect:154,cvprevtreenod:118,cvprojectpoints2:101,cvptr1d:[120,167],cvptr2d:[120,167],cvptr3d:[120,167],cvptrnd:[120,167],cvputtext:[69,117],cvpyrdown:155,cvpyrmeanshiftfilt:155,cvpyrup:155,cvquadedge2d:168,cvqueryfram:[84,151,152],cvqueryhistvalue_1d:167,cvqueryhistvalue_2d:167,cvqueryhistvalue_3d:167,cvqueryhistvalue_nd:167,cvrandarr:[120,176],cvrandint:120,cvrandreal:120,cvread:121,cvreadbynam:121,cvreadfunc:121,cvreadint:121,cvreadintbynam:121,cvreadrawdata:121,cvreadrawdataslic:121,cvreadreal:121,cvreadrealbynam:121,cvreadstr:121,cvreadstringbynam:121,cvrealscalar:123,cvrect:[101,114,116],cvrectangl:117,cvreduc:123,cvregistertyp:121,cvreleas:121,cvreleasecaptur:[151,152],cvreleasedata:120,cvreleasefilestorag:121,cvreleasefunc:121,cvreleasegraphscann:118,cvreleasehaarclassifiercascad:186,cvreleasehist:157,cvreleaseimag:[120,123,151,166],cvreleaseimagehead:120,cvreleasekalman:219,cvreleasemat:[120,121,176],cvreleasematnd:120,cvreleasememstorag:118,cvreleasesparsemat:120,cvreleasestereobmst:101,cvreleasestorag:118,cvreleasestructuringel:155,cvreleasevideowrit:152,cvremap:156,cvrepeat:123,cvreprojectimageto3d:101,cvresetimageroi:[120,166],cvreshap:[120,190],cvreshapematnd:120,cvreshapend:120,cvresiz:156,cvresizewindow:153,cvrestorememstoragepo:118,cvretrievefram:152,cvrng:[115,120,176,181],cvrodrigues2:101,cvround:[35,36,43,44,84,124,154,155,157,176],cvrqdecomp3x3:101,cvrtparam:[173,177],cvrtree:[173,177],cvrunhaarclassifiercascad:186,cvrunningavg:160,cvsave:121,cvsaveimag:152,cvsavememstoragepo:118,cvsavewindowparamet:151,cvscalar:[69,114,116,117],cvscalaral:[120,151,155,156,159],cvscale:120,cvscaleadd:123,cvsegmentmot:219,cvseq:116,cvseqblock:118,cvseqelem:118,cvseqelemidx:118,cvseqinsert:118,cvseqinsertslic:118,cvseqinvert:118,cvseqpop:118,cvseqpopfront:118,cvseqpopmulti:118,cvseqpush:118,cvseqpushfront:118,cvseqpushmulti:118,cvseqread:[118,121],cvseqremov:118,cvseqremoveslic:118,cvseqsearch:118,cvseqslic:118,cvseqsort:118,cvseqwrit:118,cvset1d:120,cvset2d:[120,176],cvset3d:120,cvset:116,cvsetadd:118,cvsetcaptureproperti:[104,114,152],cvsetdata:120,cvsetelem:116,cvsethistbinrang:157,cvsetident:[121,123],cvsetimagecoi:[120,123],cvsetimageroi:[120,166],cvsetimagesforhaarclassifiercascad:186,cvsetiplalloc:120,cvsetmousecallback:[151,153],cvsetnd:120,cvsetnew:118,cvsetopengldrawcallback:151,cvsetreal1d:120,cvsetreal2d:120,cvsetreal3d:120,cvsetrealnd:120,cvsetremov:118,cvsetremovebyptr:118,cvsetseqblocks:118,cvsetseqreaderpo:118,cvsettrackbarpo:153,cvsetwindowproperti:151,cvsetzero:120,cvshowimag:[11,69,123,151,153,176],cvsize2d32f:[114,116],cvsize:[69,101,114,116,117],cvslice:[114,116],cvslicelength:118,cvsmooth:155,cvsobel:155,cvsolv:123,cvsolvecub:123,cvsparsematiter:120,cvsparsenod:120,cvsplit:123,cvsqrt:123,cvsquareacc:160,cvstartappendtoseq:118,cvstartnextstream:121,cvstartreadrawdata:121,cvstartreadseq:[118,121],cvstartwriteseq:118,cvstartwritestruct:121,cvstatmodel:[165,171,172,175,176,177,179,180,181],cvstereobm:101,cvstereobmst:101,cvstereocalibr:101,cvstereorectifi:101,cvstereorectifyuncalibr:101,cvstring:[118,121],cvstringhashnod:121,cvsub:123,cvsubdiv2d:[118,168],cvsubdiv2dedg:170,cvsubdiv2dedgedst:170,cvsubdiv2dgetedg:170,cvsubdiv2dloc:170,cvsubdiv2dnextedg:170,cvsubdiv2dpoint:168,cvsubdiv2dpointloc:170,cvsubdiv2drotateedg:170,cvsubdivdelaunay2dinsert:170,cvsubr:123,cvsum:123,cvsurfparam:[166,184],cvsurfpoint:166,cvsvbksb:123,cvsvd:123,cvsvm:[81,82,177,182],cvsvmparam:[81,82,177],cvt_buf:147,cvtcolor:[0,11,22,23,24,25,35,37,38,40,43,44,45,47,51,52,53,54,55,58,72,78,80,84,96,104,110,114,117,119,123],cvtermcriteria:[81,101],cvthreshhist:157,cvthreshold:159,cvtrace:123,cvtrackbarcallback:153,cvtraintestsplit:177,cvtransform:123,cvtranspos:123,cvtreenodeiter:116,cvtreetonodeseq:118,cvtriangulatepoint:101,cvtseqtoarrai:116,cvtype:[62,64,68],cvtypeinfo:116,cvtypeof:121,cvundistort2:156,cvundistortpoint:156,cvunregistertyp:121,cvupdatemotionhistori:219,cvuseoptim:124,cvvideocamera:80,cvvideocameradeleg:80,cvvideowrit:152,cvwaitkei:[31,69,123,151,153,176],cvwarpaffin:156,cvwarpperspect:156,cvwatersh:159,cvwrite:121,cvwritecom:121,cvwritefilenod:121,cvwritefram:152,cvwritefunc:121,cvwriteint:121,cvwriteinteg:121,cvwriter:121,cvwriterawdata:121,cvwritestr:121,cvxor:123,cvzero:[120,176],cxcore:[121,182],cxerror:124,cxx:[60,69],cyan:222,cycl:[62,96,113],cycle_o:113,cycle_v:113,cygwin:60,cylind:[216,223],cylindr:[142,193,210,216],cylindricalprojector:216,d2i:155,d2y:155,d3d:200,d65:159,d_circl:142,d_i:187,d_keypoint:139,d_line:142,d_y:154,dab:97,dabda:101,dabdb:101,dagm:[217,219],dai:[13,106,155],daili:66,dalal2005:[146,191],dalal:[146,187],damag:[106,108,110],damien:173,damn:27,danc:133,danger:114,daniel:[137,159],dark:[3,33,35,49,58,82,101,106,128,157,172],darker:[35,47,112,149,201,219],darkest:[39,58],dat:97,data:[0,1,3,5,9,10,11,12,13,15,16,17,18,19,20,27,30,33,35,36,38,40,41,42,43,45,47,49,50,62,64,65,66,69,70,72,75,76,78,80,81],data_weight:[137,189],dataaddr:62,databas:[74,104],datadepth:114,dataend:[114,190],dataord:120,dataset:[97,104,106,108,109,123,136,183],datastart:[114,190],datatyp:11,datawithbyt:78,date:[59,66,74,106,125],davi:219,david:[106,131,136],davis97:219,daxpi:123,dbl_epsilon:[101,213],dbl_max:[104,111,114,123],dbottom:[114,190],dbt_face_detect:186,dbuild_shared_lib:[62,64],dbuild_tbb:63,dc1394:152,dcmake_build_typ:71,dcmake_install_prefix:71,dcmake_toolchain_fil:63,dcn:[142,193],dct:116,dct_invers:123,dct_row:123,ddepth:[42,45,47,101,122,141,155,192],ddot:114,dead:154,deal:[11,81,119,123,175,181,182],dealloc:[13,96,101,114,116,118,119,120,123],debian:152,deblockmod:149,debug:[10,13,59],debugg:73,dec02:186,decemb:211,decent:97,decid:[57,62,66,104,106,108,110,114,123,149,201,219],decim:[101,131,156],decis:[75,81,82,106,171],decision_rul:172,decisionthreshold:149,declar:[3,11,35,37,38,39,41,42,44,47,48,65,114,118,119,121,133,138,182],decod:[31,78,121,149,152],decomp_choleski:[114,123],decomp_eig:123,decomp_lu:[114,123],decomp_norm:123,decomp_qr:123,decomp_svd:[114,123],decompos:[8,13,101,123],decomposeprojectionmatrix:100,decomposit:[101,106,114,123],decompress:152,deconvolut:123,decorrel:[3,112],decreas:[3,13,34,118,123,128,136,171,172,179,184,190],decrefdata:116,decrement:[114,119,120,122],decres:114,dector:111,deduc:[14,33,45,47,114,123],deem:[149,201],deep:[106,114,127,129,190],deepli:82,def:[62,64,106,108,110],default_compression_method:164,default_depth:166,default_fast_threshold:139,default_it:[137,189],default_level:[137,189],default_max_it:174,default_nclust:174,default_ndisp:[137,189],default_nlevel:[146,191],default_nr_plan:[137,189],default_num_quant_bit:166,default_radiu:137,default_reduced_num_dim:166,default_signature_s:164,default_struct:164,default_struct_s:164,default_tre:166,default_valu:[9,121],default_view:[164,166],default_win_sigma:[146,191],default_winsz:[137,189],defaultavcapturedeviceposit:80,defaultavcapturesessionpreset:80,defaultavcapturevideoorient:80,defaultfp:80,defaultset:64,defect:162,defin:[4,6,9,11,12,13,14,30,33,34,35,36,40,41,42,43,44,45,48,49,50,60,61,64,65,66,68,76,80,81,82,83,88,93,95,96,101,106,108,110,114,117,118,119,120,121,122,123,124,130,131,136,144,145,148,149,152,153,155,157,159,162,165,167,170,174,175,177,178,183,186,187,201,217,219,223],definit:[3,9,10,13,31,64,66,74,75,97,101,106,107,167,178],defn:62,deform:[156,187],defproject:62,defrag:118,degener:101,degrad:131,degre:[6,27,44,97,101,114,117,120,123,124,128,142,147,156,159,183,199,219],degreegrid:183,deiniti:152,delai:[0,14,31,34,151,153],delaunai:170,delay_blur:34,delay_capt:34,delaym:151,deleg:[77,80],delet:[64,66,75,97,104,114,118,120,121,171,172,175,182],delimit:[9,178],deliv:112,delta1:219,delta2:219,delta:[42,45,47,114,117,123,128,131,147,155,192,199],delta_elem:118,delta_row:120,deltarow:120,demand:[74,75],dement:114,demhist:157,demir:[2,4,15,21,28,29,57,66,73,79,83,85,90],demo:[3,23,33,34,35,36,41,42,43,45,46,47,49,50,54,58,76,89,102,106],demo_mixed_api_us:11,demonstr:[3,11,13,32,44,66,114,118,120,142,152,159,162,166,172,176,219],demosa:[3,112,152],demultipex:3,demultiplex:[112,149],denable_neon:63,denable_vfpv3:63,denois:142,denomin:[155,161],denorm:123,denot:[6,14,25,42,50,71,81,97,101,106,114,120,125,131,155,159,161,162,174],dens:[101,114,118,119,120,123,126,128],denseopticalflowext:217,densiti:[82,157,174,219],dep:[62,74],depart:[106,157],depend:[0,3,7,8,10,12,13,27,31,32,39,59,60,61,62,63,64,66,74,75,80,81,82,93,97,101,106,110,114,117,118,120,122,123,124,128,130,136,138,142,144,151,153,154,155,156,157,162,165,174,175,176,178,179,182,184,194,213,219,228],depict:[48,56,58],depp:[108,110],deprec:[61,64,99,114],dept:171,depth:[10,11,12,31,35,42,45,47,66,74,75,81],depth_:166,depth_compon:122,depth_point:162,depthmap:[94,95],dequ:118,der:219,deriv:45,derivbord:219,derivlambda:201,desactiv:112,desc_idx:164,desc_start_idx:164,desccollect:[139,191],descend:[104,106,118,123,136,154],descent:[175,217],descib:217,descr_format:[146,191],descr_format_col_by_col:[146,191],descr_format_row_by_row:[146,191],describ:[0,13,31,36,39,59,60,61,64,66,74,75,76,86,97,101,106,112,114,115,118,119,120,121,122,126,129,131,133,137,141,142,149,154,155,156,157,159,162,165,167,170,171,172,174,175,176,181,182,186,187,189,196,201,208,217,219,222,226],descripotorscount:132,descript:[3,11],descriptor:[16,17,19,20,21,74,86],descriptor_extractor_match:[126,127,128,129,131],descriptorextractor:[17,93],descriptorextractortyp:126,descriptormatchertyp:127,descriptors1:[16,93],descriptors2:[16,93],descriptors:[126,132],descriptors_1:[17,19],descriptors_2:[17,19],descriptors_object:20,descriptors_scen:20,descriptorsgpu:184,descriptorsocl:184,descriptortyp:[126,132],deseri:104,deserv:41,design:[32,57,59,60,61,80,114,144,150,186,194,229],desir:[44,48,50,80,97,101,108,114,115,118,119,123,128,135,136,138,139,141,155,159,171,179,192,196,199],desktop:[62,64,73],desktop_java:62,despit:[119,155,194],dest_sz:[106,108,110],destdir:64,destfil:64,destin:[34,35,38,41,42,45,46,48,50,58,62,72,96,101,114,118,120,121,122,125,137,138,141,142,145,147,148,154,155,156,157,159,160,162,170,192,193,195,199,216],destination_typ:114,destroi:[9,32,96,122,138,143,146,153,201,219],destroyallwindow:150,destroywindow:150,destruct:[114,122,123,138,182],destructor:[31,104,114,119,122,125,138,152,175,182,186,187,190,201],det:[25,123,184],detect:[0,1,3,4],detectandcomput:184,detectanddisplai:84,detected_edg:40,detectedobject:186,detectfacedemo:64,detections_num:146,detections_numb:146,detectmultiscal:[64,84,110],detector:[3,16,17,18,19,20,21,22],detector_descriptor_evalu:126,detector_descriptor_matcher_evalu:[127,129],detector_param:[139,212],detectortyp:128,detectresultroi:216,detectresultroibybord:216,determin:[0,8,9,11,12,23,25,32,34,42,58,78,96,97,101,111,114,116,118,119,120,121],determinist:131,dev:[63,71,152],devel:62,develop:[11,13,27,32,40],devi:144,devianc:175,deviance_loss:175,deviat:[11,34,97,113,120,123,141,142,145,149,155,159,179,187,192,199,201,219],devic:[3,13,27,31,59],device_id:143,deviceid:110,devicenam:194,devicesinfo:200,devicetyp:200,devkit:59,devmemrw:190,devmemtyp:190,devot:[126,127,129,163],dextractor:[126,133],dft:[8,74,116],dft_complex_output:[123,199],dft_invers:[123,142,199],dft_real_output:[123,142,199],dft_row:[123,142,199],dft_scale:[123,142],dft_size:[142,199],dftsize:123,diagon:[114,120,123,159,162,165,174,199],diagram:[157,159,170,214],dialect:62,dialog:[60,75],diamet:[34,128,155,192],dib:152,dictionari:[125,172],did:[6,15,38,39,62,104,106,114,119],diff:[76,123],differ:[0,3,6,9],differenti:[47,58,155,175],difficult:[106,114,119,172],digit:[8,13,31,85,86,121,159,162,176,183,194],digits_adjust:[176,183],digits_video:[176,183],dilated_corn:154,dilation_dst:33,dilation_elem:33,dilation_s:33,dilation_typ:33,diltat:192,dim1:120,dim2:120,dim:36,dimens:[10,13,36,45,50,62,81,106,114,120,123,126,138,139,145,157,160,164,166,187,199,213],dimension:[8,13,31,36,81,99,101,104,106,114,115,118,119,120,123,129],dimensionalityension:[201,219],diment:114,diminish:[50,181],dimod:149,dir:[60,64,74],direct:[11,25,32,36,40,46,47,66,91,101,104,106,108,110,114,118,119,123,128,141,142,154,155,156,172,179,191,192,194,219,222,223],direction:179,directli:[3,27,62,66,69,76,80,114,120,122,123,124,131,138,155,156,157,159,165,171,172,175,194,223],directori:[0,10,11,12,31,59,61,62,63,64,66,69,71,74,75,77,84,97,101,106,159,162,164,194],directshow:114,dirnam:[106,108,110],dirti:128,disabl:[76,97,101,124,137,138,144,155,178,179,189],disablecabac:149,disablespspp:149,disableview:61,disappear:[3,59,151],disc_single_jump:[137,189],discard:[106,108,111],discardfloatposterior:166,disclaim:[106,108,109,110],disconnect:152,discontinu:[137,189],discoveri:183,discrete_fourier_transform:8,discrimin:[81,104,106,108,149,183],discuss:[3,49,59,60,61,111,112,118,121,123,155,162,172],disjoint:[115,178],disjunct:[123,148],disk:[31,60,72,76,121,136,150],dismiss:13,disp12maxdiff:101,disp:[101,113,137],dispar:[33,95,101,113,137,144,189],disparityimag:101,dispatch:119,displac:[25,30,149,201],displai:[3,6,8,13,14,34,35,36,37,38,39,40,41,42,43,44,45,46,48,49,50,58,61],display_capt:34,display_dst:34,display_imag:[65,75],display_mod:223,display_random_text:14,displayimag:[65,69,70],displayimage_directori:[69,70],displaying_big_end:14,displaying_random_text:14,displayoverlai:150,displaystatusbar:150,dispos:[13,31],disptyp:101,disregard:44,dissapear:49,dissect:[106,108,110],dissimilar:[101,155,192],dissolv:[5,34],dist:[19,20,30,106,108,110,136,176,196],dist_coef:137,dist_coeff:[101,156],dist_coeffs1:101,dist_coeffs2:101,dist_label_ccomp:159,dist_label_pixel:159,dist_typ:[120,162],distanc:[1,13,19,20,34,37,40,43,56,57,81,82,93,94,101,104,106,108,110,120,123,126,127,128,129,131,134],distance_func:157,distance_typ:[157,159],distancetransform:158,distancetyp:159,distcoeff:[0,1,101,125,156],distcoeffs1:101,distcoeffs2:[101,125],distinct:[106,149,159,184],distinguish:[82,101,104,106,114,120],distort:[0,1,3,97,101,125,137,142,156,202],distortion_coeff:[101,156],distortion_coeffici:[0,1],distortpoint:100,distran:159,distribut:[11,14,19,35,38,59,62,63,75,82,105,106,108,109,110,111,113,120,123,128,131,142,144,157,165,174,180,181,183,217],distro:71,disttransform:159,disttyp:[120,123,157,162,191,196],ditto:114,div:[66,123],diverg:101,divers:[14,34,66,131],divid:[3,10,14,27,31,36,42,50,82,101,106,114,116],dividewith:10,divis:[50,81,82,101,114,123,124,148,174],divisor:[101,154,157],divx:32,dleft:[114,190],dll:[11,64,74,75],dmatch:[16,17,19,20,93],dmatcher:133,dmax:131,dmin:131,do_wave_correct_:210,doc:[35,59,60,61,62,66,74,114,175],doc_html:74,dock:76,docs_html:66,document:[27,31,59,60,61,62,64,66,74,76,97],docvjardir:64,docvlibdir:64,doe:[3,6,7,10,11,14],doesn:[3,27,60,61,64,74,94,104,106,122,147],doggi:58,doi:[3,112,173,202],dollar:75,domain:[8,10,13,106,108,109,110,123,136,156,159,160],domin:[123,126,157,162],don:[11,15,59,60,61,64,66,69,75,97,104,106,108,110,136,155,173,213],done:[0,1,3,8,9,10,11,27,32,34,37,41,59,60,61,62,64],donen:166,donor:[155,156],dosort:142,dot:[8,43,66,106,108,109,110],dotproduct:116,doubl:[0,5,6,7,9,10,11,13,19,20,22,23,24,25,27,30,31,32,35,36,37,39,42,44,48,50,56,62,69,75,76,96,101,104,106,108,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124],doubt:[33,93],dougla:162,down:[10,13,22,37,39,46,66,74,75,76,93,101,110,118,148,155,156,159,223],download:[0,3,8,9,10,11,12,13,17,18,19,20,22,23,24,25,27,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,62,63],downloaddescriptor:184,downloadfil:95,downloadpoint:201,downsampl:[50,142,155,192],downsid:13,downsiz:50,downstream:179,downward:[114,128],dpdc:101,dpddist:101,dpdf:101,dpdrot:101,dpdt:101,dptr:114,dr3dr1:101,dr3dr2:101,dr3dt1:101,dr3dt2:101,drag:[76,80],dramat:[119,131],drastic:[74,101],draw:0,draw_over_outimg:130,draw_rich_keypoint:130,drawabl:61,drawback:[75,106],drawchessboardcorn:[0,100],drawcontour:[51,52,53,54,55,158,159],drawing_random_circl:14,drawing_random_ellips:14,drawing_random_filled_polygon:14,drawing_random_lin:14,drawing_random_polylin:14,drawing_random_rectangl:14,drawkeypoint:18,drawmatch:[16,17,19,20,93],drawmatchesflag:[18,19,20,130],drawn:[6,18,61,106,117,130,151,162,174,181],drew:14,dright:[114,190],drill:9,drive:[9,27,31,66,74,75],driver:[60,74,137,194],driver_api_stereo_multi:137,drop:[74,80],dsize:[142,156,193],dsoftfp:63,dsp:80,dst0:123,dst1:[123,155],dst2:[123,155],dst3:123,dst:[5,25,30,34,36,38,40,41,42,44,45,46,48,49,50,58,96,101,103,106,108,109,114,118,120,121,123,137,138,141,142,147,148,152,154,155,156,157,159,160,162,166,192,193,195,199,202,203,207,216,219],dst_:207,dst_br:216,dst_cn:137,dst_count:123,dst_disp:137,dst_hist:157,dst_img_idx:212,dst_it:114,dst_mask:207,dst_mask_:207,dst_norm:25,dst_norm_scal:25,dst_point:101,dst_roi:[142,193,207],dst_roi_:207,dst_size:216,dst_tl:216,dstcn:159,dstcount:155,dstmap1:156,dstmap1typ:156,dstmap2:156,dstof:155,dstorder:142,dstpoint:101,dstr:[142,193],dstripe:155,dstsize:155,dstsp:[142,193],dststep:155,dsttri:48,dsttype:[141,155,192],dsty:155,dt3dr1:101,dt3dr2:101,dt3dt1:101,dt3dt2:101,dtg:106,dtop:[114,190],dtree:172,dtype:[123,138,145,147,148],dual:[144,170,219],dualiti:[217,219],duda01:106,duda:106,due:[0,27,31,32,39,45,50,75,101,106,114,119,138,162],dummi:[157,170,175,179,183],dummy1:91,dummy2:91,dump:[62,64,68,149],duplic:[119,123,126,199],durat:[151,219],dure:[0,10,14,27,42,61,65,66,74,75,96,97,101,104,115,118,119,128,136,149,151,155,171,172,175,181,186,192,196,208,219],durett:[3,112],dust:203,dwith_tbb:63,dx2:155,dx_:201,dy2:155,dy_:201,dyadic:5,dylib:62,dynam:[3,8,31,61,64,74,101,112,113,114,116],dynam_param:219,dynamicgop:149,dynamparam:[201,219],eabi:63,each:[0,3,6,7,8,10,11,12,13,14,15,16,25,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,46,47,50,52,54,58,59,64,65,66,74,75,80,81,82,84,89,93,94,96,97,101,103,104,106,108,111,112,113,114,115,117,118,119,120,121,123,124,125,126,127,128,129,130,131,133,137,138,139,141,142,144,146,147,148,149,151,152,153,154,155,156,157,159,160,161,162,164,165,166,167,169,170,171,172,173,174,175,176,178,179,180,181,182,184,186,187,189,191,192,193,195,196,197,199,201,203,206,210,212,219,223],ear:106,earli:137,earlier:[10,11,138,155,160],earliest:[120,157],earth:157,eas:[11,104,144,194],easi:[10,11,27,31,60,62,64,66,70,74,81,104,105,106,108,109,110,114,119,120,150,194],easier:[11,12,13,27,74,75,155,161,182],easiest:[70,74,121],easili:[10,25,38,46,47,50,62,66,70,74,75,76,96,101,104,106,110,114,123,125,126,127,128,129,163,175,178,186],easur:187,easy_instal:74,eccv:[106,126,128,131,149],eclips:11,eden:211,edg:[3,25,34],edge_dt:121,edge_s:118,edge_threshold:137,edgeblurs:128,edges_:213,edgethresh:40,edgethreshold:[131,139,184],edit:[32,59,61,62,64,66,68,106,114,151,153],editor:[9,60,64,66,74,106],ednext:170,edu:[101,106,173,178,181,183,202,219],eduard:[2,4,15,21,28,29,57,66,73,79,83,85,90],educ:13,effect:[0,3,7,14,34,38,78,86,101,106,112,114,117,131,144,155,160,171],effectu:[42,49,58],effici:3,effort:[26,66,68,74,87],eig_:201,eig_imag:154,eigen:[74,114,116],eigenfac:[104,105],eigenface_:[106,109],eigenface_reconstruction_:[106,109],eigenfaces_at:109,eigenv:154,eigenvalu:[23,104,106,108,109,123,149,154,201],eigenvector:[23,104,106,108,109,123,154,164],eigenvv:[123,154],eight:159,eighteenth:115,eigimag:154,either:[0,2,8,9,10,11,27,31,32,33,41,44,60,61,64,66,74,75,84,101,104,106,112,114,118,119,120,121,123,128,139,142,145,154,156,157,159,162,172,175,176,178,182,183,191,193,194,196,199,219,223],elad:217,elaps:[10,153],elast:106,eleg:[66,75],elem:[114,118],elem_idx:118,elem_s:[118,121,138],elem_typ:138,element:[6,9,10,11,12,13,14,27,31,32,33,34,42,49,62,81,97,101,114,115,118,119,120,121,123,124,125,131,135,136,137,138,140,141,142,145,147],element_array_buff:122,element_nam:125,element_valu:125,elementari:126,elementi:114,elementtyp:135,elems:78,elemtyp:118,elif:121,elimin:[62,123,138,142,144,152,175,193,211],ellips:[6,14,33,49],ellipse2poli:116,ellipsebox:117,ellipt:[117,155],elnext:170,els:[0,3,9,11,19,27,31,32,33,39,41,44,46,50,56,61,62,69,75,78,80,81,82,84,88,104,106,108,109,114,118,119,121,153,154,166,172,182,183],elsevi:[3,112],email:66,emb:[66,121],embed:[13,73,121,131,152],emerg:106,emit:10,emma:108,emma_watson:108,emma_watson_02:108,emma_watson_03:108,emma_watson_08:108,emot:[97,106,108,110],emphas:74,emphasi:66,empir:157,emploi:[6,171,172,181],empti:[0,1,3,6,8,9,11,27,31,32,44,66,69,75,76,84,93,96,101,103,104,106,108,109,110],emptytraindata:[127,129,164],emul:[59,60,61,66,114,123,144,155,156,231],enabl:[10,27,59,60,61],enable_solution_fold:74,enableview:61,encapsul:[112,114,119,123,124,125,131,138,164],enclos:[6,162],encod:[101,106,111,112,114,117,119,121,125,131,142,149,152,154,155,156,162,171,193],encount:[32,59,60,61,74,133],encourag:110,end:[3,5,6,9,10,11,13,14,27,31,32,34,46,59,60,61,65,66,72,74,75,80,106],end_angl:117,end_col:120,end_idx:118,end_index:[118,162],end_row:120,end_vtx:118,endangl:117,endcol:[114,120,190],endi:155,endif:[11,19,44,77,80,88,118,121,154],endl:[0,3,5,7,9,10,11,13,17,18,20,22,24,31,32,38,44,65,66,75,76,82,89,91,94,95,106,108,109,110,114,119,125,162],endofstream:149,endors:[106,108,109,110],endrow:[114,120,190],endwriteseq:116,endwritestruct:116,energet:3,energi:[3,112],enforc:[3,101,112],engin:[62,106,114,123,141,155,172,181,192],enhanc:[3,4,12,103,105,106,108,111,112,113,153,217],enjoi:[0,68,110,194],enlarg:156,enough:[0,10,21,31,32,66,69,74,101,106,108,109,114,118,123,127,128,131,138,142,149,154,155,157,159,172,174,179,191,192,201,219],enought:[142,202],enqueu:138,enqueueconvert:27,enric:219,enrich:187,ensembl:[171,172,175,181],ensur:[64,74,97,138],enter:[5,7,10,14,30,35,36,39,40,41,49,50,58,60,68,69,71,74,75],entir:[3,42,50,62,110,117,118,120,122,144,210],entiti:172,entri:[3,9],entropi:175,enumer:[0,9,66,97,114,119,143],enumeratevisibleitemswithsquar:66,env:[106,108,110],environ:[3,25,31,37,59],eol_com:121,eonext:170,epilin:101,epipolar:[101,156],epl:62,epnp:101,eps_svr:183,epsilon:[114,115,120,121,154,162,165,174,179,196,219],equal:[1,7,34,36],equalize_hist:38,equalized_window:38,equalizehist:[38,84,101],equat:[0,25,42,44,47,101,106,123,154,160,219],equip:60,equival:[46,48,81,101,103,112,114,115,118,120,121,123,124,125,148,155,172,182,186,199],eric:[2,4,15,21,28,29,57,66,73,79,83,85,90],erik:131,ernext:170,ernst:173,erosion_dst:33,erosion_elem:33,erosion_s:33,erosion_typ:33,erot:170,err:[0,114,117,124,149,201,213,219],err_msg:[119,124],err_need_more_img:210,erratum:211,errcod:119,erron:39,error:[0,1,3,5,10,12,18,19,20,27,30,31,37,40,50,59,60,61,64,66,74,80,81,82,84,101,104,105,106,108,109,110,111,112,114,116,118],error_messag:[106,108,109,110],errorcovpost:201,errorcovpr:201,errormessag:3,eruhimov:[2,4,15,21,28,29,57,66,73,79,83,85,90],esc:[0,41,42,46,50,97],esc_kei:0,escap:110,esiz:155,especi:[27,41,80,96,101,106,108,110,114,117,123,152],essa:211,essenc:[48,66],essenti:[31,42,60,71,101,119,165,179],establish:[36,40,44,46,60,114,162],estim:0,estimapion:219,estimateaffine3d:100,estimateblocks:142,estimatenewcameramatrixforundistortrectifi:100,estimatequantpercforposterior:166,estimaterigidtransform:[101,123,154],estmat:189,etc:[3,14,36,58,59,60,61,62,63,67,81,95,96,114,117,118,120,121,123,124,125,147,152,186,190,223,231],ethan:131,euclidean:[93,101,106,114,120,137,149,154,159,174,201],eugen:106,euler:101,eulerangl:101,eurograph:219,european:[106,126,149,184,219],eval:[62,123],evalu:[34,41,62,97,106,124,126,127,129,142,147,186,211],evect:123,even:[3,9,10,12,13,33,50,60,62,66,74,75,76,81,97,101,106,108,110,112,114,117,118,119,120,123,136,142,144,155,157,171,172,174,182],evenli:[142,157],event:[3,4,10,19,88,89,91,106,108,110,112,118,124,150,153,222],eventu:[3,8,29,31,32,58,66],ever:[66,74,85,86,181],everi:[9,10,12,13,14,28,32,33,42,44,46,49,50,60,61,62,66,75,82,86,95,97,101,104,106,114,115,117,118,120,121,123,125,127,128,129,148,151,153,154,155,156,157,159,162,166,167,169,170,172,175,180,181,186,187,190,196,199,219,223,226,231],everydai:0,everyon:66,everyth:[3,10,11,14,62,64,66,67,69,74,75],everywher:[27,30,74,119],evid:[44,50],evolut:131,evrim:[2,4,15,21,28,29,57,66,73,79,83,85,90],exact:[10,22,47,60,115,124,136,156,194,196],exactli:[8,9,50,64,74,89,96,97,101,114,119,120,153,156,166],examin:[64,97],exampl:[0,3,6,7,8,10,11,12,13,14,27,30,31,32,33,35,36,38,40,41,44,45,46,47,48,49,50,58,59,60,61,62,63,64,66,69,71,72,74,75],exampleimag:75,exc:124,exce:[118,120,159],excel:48,except:[3,27,45,60,62,82,103,104,105,106,108,109,110,112,114,116,118,119,120,123],exchang:[142,172],exclud:[66,114,118,128,138,171,178],exclus:[14,36,114,118,119,120,123,128,148,151,157],exctract:74,execut:[14,27,33,41,42,46,49,60,62,64,65],exemplari:[106,108,110],exercis:[81,82,125],exhaust:93,exist:[3,9,10,12,13,38,40,59,60,61,64,69,75,76,81,89,96,104,112,114,118,120,121,122,123,127,130,131,149,153,155,156,167,170,171,178,194,201,219,222],exit:[31,35,36,38,39,40,41,42,43,44,46,48,50,58,61,62,106,108,109,110,120,153,226],exp:116,expand:[0,8,25,32,75,77,114,123],expans:[25,113,219],expect:[3,31,32,37,39,50,58,61,64,74,76,82,104,106,111,114,117,123,142,152],expens:[10,27,82,219],experi:[3,66,102,104,106,110],experiment:99,explain:[0,11,27,33,34,35,41,43,44,48,50,58,61,62,68,73,80,81,82],explanatori:[66,74],explen:112,explicit:[9,48,74,75,114,119,123,137,138,139,149,184,189,190,201],explicitli:[9,11],explor:[0,41,59,69,74,76,82,136,155],expon:[123,148,199],exponenti:[157,172,181],expos:106,exposur:[152,205],exposure_comp:210,exposure_comp_:210,expr:[114,124,190],express:[0,7,10,11,12,14,25,27,31,32,36,37,42,44,46,47,48,58,62,66,76,101,106,108,110],exr:[3,112],ext:[32,106,108,109,110,152],exted:106,extend:[6,60,61,62,64,66,68,82,88,97,101,104,106,110,119,127,129,141,155,183,184,186,192,194,219,226],extens:[0,6,9,32,63,65,66,74,75,76,80],extent:34,exterior:170,extern:[61,66,68,101,106,114,118,119,120,162,224],external_color:162,externalcolor:162,extlink:66,extra:[10,27,41,60,66,71,101,113,114,117,118,119,121,123,124,125,128,138,142,144,145,147],extract:[3,25,31,32,60,66,68,74,86,87,101,104,106,111,112,114,118,120,123,126,128,129,131,139,156,159,162,166,182,184,187,190,219,222],extractimagecoi:116,extractor:[16,17,19,20,93],extractsurf:184,extrapol:[141,142,154,155,156,192,193,216],extrem:[14,44,101,131,162],extrema:[128,157],extremum:[123,195],extrins:101,extyaleb:106,extyaledatabas:106,eye_direct:[106,108,110],eye_left:[106,108,110],eye_right:[106,108,110],eyes_cascad:84,eyes_cascade_nam:84,f0_ok:206,f10:76,f11:59,f1_ok:206,f_x:222,f_y:222,fab:[111,120],fabmap1:111,fabmap2:111,fabmap:102,fabmap_sampl:111,fabmapfbo:111,fabmaplut:111,facciolo:219,face:[39,59,64,82,84,85,86,97,104,105],face_camera:223,face_cascad:84,face_cascade_nam:84,face_i:110,face_recogn:110,face_res:110,facedetect:[64,186,197],facedetector:64,facerec:[104,106,108,110],facerec_demo:106,facerec_eigenfac:106,facerec_fisherfac:[106,108],facerec_lbph:106,facerec_save_load:109,facerec_video:110,facerecogn:102,faceroi:84,facet:170,facial:106,facil:[62,105],facilit:65,fact:[0,10,14,39,44,45,50,82,106,114,156,157,219],factor:[0,3,48,50,101,106,108,110,112,114,117,120,123,131,135,136,141,142,148,149,155,156,157,171,179,192,193,194,199,217],factori:[106,108,109,210],fail:[0,9,101,106,108,109,110,111,124,144,154,230],failur:[60,61,226],fairli:[106,155],fall:[27,31,36,111,118,156,170,172,181],fals:[0,1,3,12,22,24,31,32,35,36,37,43,54,55,61,62,64,78,89,97,101,111,112,114,115,117,120,121,122,123,124,125,127,128,129,131,137,138,139,142,143,144,147,149,152,154,155,156,157,162,164,166,171,172,174,175,176,179,180,181,183,184,189,191,196,199,201,206,207,210,212,213,219,222],familar:[104,114],famili:[44,201,217,219],familiar:[13,14,60,70,94,95,114,119,210],fan:133,fanci:[15,30,66],fancier:[35,43,44,74],far:[34,65,81,101,106,139,157,223],farneback2003:219,farneback:[149,201,219],farsiu03:217,farsiu:217,farther:[127,129,155,192],farthest:162,farthest_pt_index:162,fashion:[10,11,14,61,66,81,101,175],fast:[10,11,19,21,31,47,75,80,93,101,111,112,114,118,120,123,128],fast_scor:131,fastarctan:124,fastatan2:116,faster:[3,7,12,97,112,114,117,118,120,121,123,127,131,137,142,149,156,157,172,179,184,189,191,194],fastest:[8,10,34,111,123,156,183,199],fastfeaturedetector:[16,93],fastfre:116,fastmalloc:116,fastnlmeansdenois:142,fastnlmeansdenoisingcolor:142,fastpyramid:[149,201],fastx:131,fatbin:144,favor:3,favorit:[40,43,64,66],favour:3,fback:219,fclose:114,fct:[149,201,219],feasibl:106,feather:207,featur:[0,3,7,14],feature_dimension:136,feature_label:164,feature_s:139,feature_set:143,feature_set_compute_10:143,feature_set_compute_11:143,feature_set_compute_12:143,feature_set_compute_13:143,feature_set_compute_20:143,feature_set_compute_21:143,featuredetector:[18,93,101],featureidx:186,features1:212,features2:212,features2d:[16,17,18,19],features_:213,features_find:210,features_finder_:210,features_match:210,features_matcher_:210,featurescalelevel:128,featurescalemul:128,featuresfind:210,featuresmatch:210,featuretyp:97,februari:[101,211],fed:3,fedcba:155,feed:[0,29,31,32,179],feedback:[0,66],feel:[59,60,61,66,74,106],feicho:[2,4,15,21,28,29,57,66,73,79,83,85,90],fellou:106,felzenszwalb04:159,felzenszwalb2006:[137,189],felzenszwalb2010:187,felzenszwalb:[137,159,187],femal:[106,108],fermi:144,fern:129,fernando:[2,4,15,21,28,29,57,66,73,79,83,85,90],fetch:153,feval:186,few:[6,10,13,14,25,27,66,67,70,73,82,96,101,106,114,118,119,121,123,154,170,186,217,219],fewer:[10,44,66,120],fexcept:[60,61],ffilldemo:[153,159],ffmpeg:[31,32,63,71,149,152],fft:194,fgd2003:149,fgdmodel:159,fgmask:[149,201,219],fht98:171,fiddl:[13,75],field:[10,59,62,74,76,101,111,113,114,118,120,121,129,138,142,149,169,170,172,190,197,201,219,222,223],fifth:[12,159],figur:[3,6,11,14,38,45,48,58,66,75,101,106,117,119,151,154,155,159,162,170,211],fild:118,file:[0,1,2,3],file_input_output:9,file_nam:[124,166,223],fileformat:66,filenam:[1,3,8,9,44,64,96,97,103,104,106,108,109,110,112,121,125,136,146,149,152,162,164,178,182,186,187],filenod:[9,114,116],filenodeiter:[9,116],filer:113,fileset:64,filestorag:[0,1,9,15,104,112,114,116],filestream:3,fill:[1,6,11,13,14,16,40,41,42,46,50,62,66,69,76,82,96,101,114,116,117,119,120],fill_par:61,fillconvexpoli:116,fillpoli:[6,116],fillval:156,fillvalu:114,film:[5,152],filter:[3,4,12,15,19],filter_gpu:[141,192],filterbi:128,filterbyarea:128,filterbycircular:128,filterbycolor:128,filterbyconvex:128,filterbyinertia:128,filterspeckl:100,filtrat:128,finalimag:78,find:[0,1,2,8,9,10,11,13,15,16,17,18],find_last_of:32,find_obj:133,find_packag:[69,70],findchessboard:1,findchessboardcorn:[0,1,100],findcirclesgrid:[0,100],findcirclesgriddefault:101,findcontour:[51,52,53,54,55,56,118,128,131,149,158,159],findcornersubpix:154,finddescriptor:164,finder:212,findextrinsiccameraparams2:101,findfundamentalmat:100,findgraphedg:116,findgraphedgebyptr:116,findhomographi:[16,20,100],findlargestobject:146,findnearestpoint2d:168,findstereocorrespondencebm:101,findtyp:116,findviewbyid:61,fine:[3,67,69,103,106,114,119,155,194],finefunct:187,finer:[13,104],finish:[11,14,27,32,41,58,59,60,61,66,68,69,75,76,81,82,97,101,118,121,125,138,149,152,161,226,228,230],finit:[129,219,223],first:[0,3,8,9,10,11,12,13,14,16,18,19,27,30,31,32,33,34,35,36,37,39,40,41,42,44,45,46,47,48,49,50,58,59,60,61,62,64,65,66,68,69,73,74,75,80,82,89,93,96,97,101,104,106,108,109,110,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,137,139,141,142,144,147,148,149,152,153,154,155,156,157,159,160,162,165,169,170,172,174,175,178,179,181,186,187,189,191,192,193,195,196,199,200,201,212,213,214,219,223,228],first_contour:162,firstfram:149,firstlevel:[131,139],firsttyp:116,fish:[0,69],fish_eye_preset:101,fisher36:106,fisher:[106,162],fisherfac:[104,105],fisherface_:[106,108],fisherface_reconstruction_:[106,108],fishey:100,fist:143,fit:[8,13,31,35,66,74,101,105,106,108,110,114,118,121,123,136,149,152,153,155,156,159,162,171,183,201],fitellips:[52,114,154,158],fitellipse2:162,fiter:112,fitlin:158,fitzgibbon95:162,fitzgibbon:162,five:[0,8,82,170,179],fix:[0,31,42,58,59,60,61,66,75,76,101,106,117],fixm:62,fixpt_depth:162,flag:[0,3,78,94,95,101,111,113,114,115,117,118,120,121,122,123,124,125,128,130,133,137,138,142,144,146,147,148,149,151,152,153,154,155,156,157,159,162,169,170,172,178,179,181,184,186,189,190,191,193,194,196,197,199,201,203,210,219],flag_keep_screen_on:61,flann_centers_init_t:136,flannbas:127,flannbasedmatch:[19,20],flash:60,flatten:155,flavor:[74,152,162,182],flawlessli:[114,144],flesh:35,flexibl:[11,101,114,179],flip:[0,46,76,116],flip_mod:123,flipcod:[123,147,199],flipmod:123,flipvert:0,flood:159,floodfil:[35,158],floodfill_fixed_rang:159,floodfill_mask_onli:159,floor:[106,108,110,116],flow:[32,113,114,121,125,149,154,155,157,169,194,201,217,219],flower:[106,151],flowi:[149,201,219],flowx:[149,201,219],flt_epsilon:[165,174,179,183],flt_max:114,fluctuat:179,flush:118,flushseqwrit:116,fm_ransac:101,fmt:[114,124,125],fn_csv:[106,108,109,110],fn_haar:110,focal:[0,91,95,101,206,208,222],focal_point:222,focallength:101,focu:[3,13,34,106],focus:[13,82,171],fold:[106,172],folder:[0,1,6,14,16,27,31,32,50,59,60,61,62,64,66,68,69,72,74,75,82,94,95,97,106,108,109,110,112],follow:[0,3,6,7,8,9,10,11,12,13,14,26,30,33,34,35,36,37,38,39,40,42,44,45,46,47,48,49,50,58,59,60,61,62,63,64,66,67,69,71,74,75,76,77,80,81,82,86,87,91,94,95,96,97,101,103,104,106,108,109,110,112,113,114,115,117,118,119,120,121,123,124,125,126,127,128,129,130,133,136,137,138,141,142,143,144,145,146,148,151,152,153,154,155,156,157,159,160,162,170,171,172,174,175,176,178,179,180,181,182,183,186,189,190,192,196,197,199,203,219,222,223,226,228],font:[14,66,69,117,151,223],font_fac:117,font_hershey_complex:117,font_hershey_complex_smal:117,font_hershey_duplex:117,font_hershey_plain:[110,117],font_hershey_script_complex:117,font_hershey_script_simplex:117,font_hershey_simplex:117,font_hershey_triplex:117,font_ital:117,font_siz:[222,223],fontfac:117,fontqt:150,fontscal:117,foo:[62,69,151,153],foor:14,fopen:114,forc:[3,17,114,122,127,136,139,153,159,191,219],force_draw:222,force_redraw:222,forceidr:149,forceintra:149,foreground:[49,86,87,97,149,159,160,201,219],foreground_region:149,foreign:114,foremost:66,forest:[173,181],forest_accuraci:181,forev:[14,65,72,153],forg:175,forget:[3,11,13,59,60,64,76,152,160],forgot:182,forgotten:149,fork:64,form:[0,8,11,13,14,25,29,32,39,42,44,48,66,69,74,81,82,96,101,106,108,109,110,111,114,117,118,119,120,121,123,124,125,128,135,142,155,156,170,172,174,175,176,183,190,192,197,199,219,222],formal:[81,106,114],format:[0,2,3,8,9,10,12],former:[101,114,156,182],formerli:106,formula:[0,10,11,12,27,31,66,114,119,123,154,156,159,161,162,171,174,179,187],forssen2007maxim:131,forth:[76,78,117,118,120,121,123,125,156,170],fortun:[42,62],forum:[59,60,61,66,74,219],forward:[118,123,125,142,149,156,160,179,199,201],found:[0,1,21,27,43,44,48,59,64,66,74,82,84,86,94,95,97,101,106,110,111,114,115,117,118,121,123,124,125,126,127,128,129,130,131,133,135,136,137,141,142,146,149,151,152,153,154,155,156,157,159,161,162,165,166,170,172,176,181,183,184,186,191,194,197,201,203,210,212,219],found_loc:[146,191],foundat:80,foundboardcorn:1,four:[0,9,13,27,32,40,49,66,101,111,141,142,156,159,170,172,186,223],fourcc:152,fourth:[13,74,159,223],fov:[222,223],fov_scal:101,fovea:112,foveal:[3,112,156],fovi:101,fovx:101,fparam1:179,fparam2:179,fpga:194,fprintf:[114,152],frac:66,frac_linear_sep:82,fraction:[10,82,117,136,155,156,162,171],fragment:118,frame0:[149,201],frame1:[149,201],frame:[0,3,25,31,32,61],frame_grai:84,frame_s:152,framebord:66,framebuff:122,framecount:125,framenum:31,framenumb:149,framer:[149,152],framerefer:31,frames:[149,152,201],framesourc:217,frametyp:[149,201],frameundertest:31,francisco:[179,211],freak:126,freak_demo:131,free:[0,59,60,61,66,74,99,101,106,118,142,143,146,149,154,156,165,174,179],free_elem:118,free_spac:118,freed:13,freedom:[101,219],freeli:[11,74,114],freeman:[121,162],freeposterior:166,freez:66,frequenc:[3,8,112,123,124,133,160],frequent:[34,118,156,179],fresh:68,fri:125,friedman:[81,171,172,175],friend:[3,166],friendli:[66,123],from:[0,1,2,3,5,6,8,9,10,11,12,13,14,16,17,18,19,20,22,23,24,25,27,28,30,31,32,33,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],from_arr:118,from_to:123,fromarr:118,fromarrai:116,fromplyfil:221,fromto:123,fromtyp:123,front:[61,80,101],frontal:[106,108,110],frtti:[60,61],frustum:[91,223],fs2:125,fstream:[91,106,108,109,110],ftau:[149,201,219],fua:[101,126],fukunaga90:180,fukunaga:180,full:[10,13,27,32,61,62,66,74,75,97,101,106,107,109,111,114,118,119,120,122,123,124,125,136,142,144,150,159,162,172,183,184,186,189,194,199,201,219,222],full_uv:123,fullaffin:219,fulldp:101,fulli:[13,62,74,101,105,114,118,119,127,139,141,151,152,155,172,191,192],fullscreen:[61,151],fun:69,func:[118,124,141],func_nam:124,fundament:[101,121,125,156],fundamental_matrix:101,fundamentalmatrix:101,funki:66,funni:117,further:[11,13,31,63,64],furthermor:[0,3,10,32,65,74,119,192],futur:[50,66,75,114,118,119,124,141,155,159,192,194],fuzzi:[179,181],fvarinit:[149,201,219],fvarmax:[149,201,219],fvarmin:[149,201,219],fxx:155,fyi:155,g_hist:36,gab:97,gabor:106,gabriel:219,gabriella:133,gain:[3,7,27,112,152,201,209],gain_block:209,galambo:154,gama:199,game:[31,159],gamma:[101,123,146,148,149,183,191,199],gamma_:149,gamma_correct:[146,191],gamma_grid:183,gammagrid:183,ganglion:112,ganglioncellssensit:[3,112],gao:101,gap:[10,44,62,114,118,120,138,154,190],garag:106,garbag:[68,118],garc:[2,4,15,21,28,29,57,66,73,79,83,85,90],gari:[131,219],gather:[118,183],gausian:[149,219],gaussian:[11,31],gaussian_mix:165,gaussianblur:[11,27,31,34,43,45,47,62,114,119],gausssian:219,gave:[14,27,39,69,144],gbk01:106,gbrgbrgbr:112,gbtree:175,gc_bgd:159,gc_eval:159,gc_fgd:159,gc_init_with_mask:159,gc_init_with_rect:159,gc_pr_bgd:159,gc_pr_fgd:159,gcc:[3,63,69],gcd:124,gemm:116,gemm_1_t:[123,147,199],gemm_2_t:[123,147,199],gemm_3_t:[123,147],gen:166,gender:[105,107],gender_classif:108,gener:1,generatepca:164,generic_descriptor_match:184,gentl:[97,171,174,186],geometr:[0,6,8,14,48,50,101,106,119,123,142],geometri:[1,15,81,88,101,114,119,222],georg:[108,110],georghiad:106,germani:219,gestur:74,get1d:120,get2d:120,get3d:120,get:[0,1,2,3,7,8,9,10,11,13,14,19,20,27,30,31,32,33,35,36,37,38,44,45],get_class_labels_map:177,get_cov:165,get_default_grid:177,get_delimit:177,get_layer_count:177,get_layer_s:177,get_log_likelihood:165,get_max_scal:164,get_mean:165,get_min_scal:164,get_miss:177,get_miss_ch:177,get_nclust:165,get_prob:165,get_proxim:177,get_respons:177,get_response_idx:177,get_rng:177,get_step_scal:164,get_support_vector:[81,82,177],get_support_vector_count:[81,82,183],get_test_sample_idx:177,get_train_error:177,get_train_sample_idx:177,get_tre:177,get_tree_count:177,get_valu:177,get_var_idx:177,get_var_import:[172,181],get_var_typ:177,get_weight:[165,177],getaffinetransform:[48,101,123],getalgorithm:114,getbool:114,getboxfilter_gpu:[141,192],getbuildinform:116,getcamera:221,getcaptureproperti:152,getclass:64,getclasscount:164,getclassifiers:146,getclip:222,getcol:116,getcolumnsumfilt:155,getcompressionmethod:164,getconvertelem:116,getconvertscaleelem:123,getcputickcount:116,getdefaultobjectnam:116,getderivkernel:141,getdescriptor:132,getdescriptorcount:164,getdiag:116,getdim:116,getdims:116,getdoubl:[104,106,114],getelemtyp:116,getfilenod:116,getfilenodebynam:116,getfilenodenam:116,getfirsttoplevelnod:116,getfocallength:222,getfov:222,getgaussiankernel:141,getgraphvtx:116,gethashedkei:116,gethistvalu:167,gethumo:162,getimag:116,getimagecoi:116,getimageroi:116,getimg:[141,192],getimgdescriptor:111,getindex:166,getindexparamet:134,getint:[106,114],getlin:[91,106,108,109,110],getlinearcolumnfilt:155,getlinearfilt:155,getlinearrowfilt:155,getlowpca:164,getmagno:3,getmat:[106,108,109,114,116],getmatvector:[106,114],getmineigenv:[149,201],getmorphologycolumnfilt:155,getmorphologyfilt:155,getmorphologyfilter_gpu:[141,192],getmorphologyrowfilt:155,getmssim:[27,31],getmssim_gpu:27,getmssim_gpu_optim:27,getnd:120,getnextsparsenod:116,getnumberofcpu:116,getnumthread:116,getopencldevic:194,getopenclplatform:194,getoptimaldcts:123,getoptimaldfts:[8,116],getoptimalnewcameramatrix:[0,100],getparam:114,getparvo:3,getpatchs:164,getpath:64,getpcadimhigh:164,getpcadimlow:164,getpcafilenam:164,getperspectivetransform:[101,123],getpointid:88,getpos:221,getposecount:164,getposterior2:166,getposterior:166,getposteriorbyindex2:166,getposteriorbyindex:166,getprincipalpoint:222,getprop:[59,221],getpsnr:[27,31],getpsnr_gpu:27,getpsnr_gpu_optim:27,getpyrlevel:164,getquadranglesubpix:156,getrawdata:116,getreal1d:120,getreal2d:120,getreal3d:120,getreal:116,getrealnd:120,getrenderingproperti:221,getresourc:64,getrootfilenod:116,getrotationmatrix2d:48,getrow:116,getrowsumfilt:155,getseqelem:116,getseqreaderpo:116,getsetelem:116,getsignatures:164,getsiz:116,getsobelkernel:155,getstr:114,getstream:138,getstructcount:164,getstructs:164,getstructuringel:[33,49],getsubrect:116,getter:114,gettestimgdescriptor:111,gettext:221,gettexts:[0,14,116],getthreadnum:116,gettickcount:[10,116],gettickfrequ:[10,116],gettrackbarpo:150,gettrainingimgdescriptor:111,getviewerpos:221,getvocabulari:132,getwidget:221,getwidgetpos:221,getwindow:61,getwindowbynam:[89,221],getwindownam:221,getwindowproperti:150,getwindows:221,geurt:173,gfedcb:155,gfedcba:155,gftt:128,ghost:211,gi1:27,gi2:27,giacomo:62,gif:106,gimag:197,gimg:197,gini:[171,172],gipsa:[3,112],girshick:187,git:62,github:[62,63,64,66,67,71,74,95,106,109,114,144,152,153,162,186],give:[0,3,6,7,10,13,14,27,28,30,31,33,40,41,42,44,45,46,47,48,49,58,59,60,62,65,66,70,75,80,81,82,97,101,106,107,108,136,152,154,155,156,159,162,172,179,219],given:[0,1,6,7,8,9,10,13,14,27,31,32,35,38,39,41,44,50,66,72,76,81,89,91,94,95,97,101,103,104,106,108,109,110,111,117,118,120,121,123,125,127,128,133,135,136,138,139,142,143,147,149,153,155,157,159,164,165,170,174,175,176,178,179,186,187,191,202,206,210,212,214,216,222,223],gl_quad:151,gl_texture_2d:122,glanc:[34,35,36,37,38,39],glass:[106,108],glbegin:151,glcolor3ub:151,gldrawel:122,glend:151,glloadident:151,global:[3,7,22,23,24,25,30,33,34,35,39,40,41,46,48,49,50,58,66],global_atom:143,glover:111,glrotatef:151,gltranslat:151,glulookat:222,glumov:[2,4,15,21,28,29,57,66,73,79,83,85,90],glut:122,glvertex3d:151,gmg2012:149,gmx:[106,108,109,110],gnu:[59,60,62,103,105],gnueabi:63,gnueabihf:63,gnustl_stat:[60,61],god:108,godbeher:149,goe:[31,44,66,82,96,120,152,172],goldberg:149,gone:61,gonzal:136,good:[0,3,8,13,19,20,21,27,28,31,37,39,40,47,48,62,64,66,68,73,74,75,77,82,97,101,104,106,108,110,113,114,119,125],good_match:[19,20],goodfeaturestotrack:[22,24,128,149],goodfeaturestotrack_demo:[22,24],goodinput:0,googl:[59,60,61,62,108,111,119,228,230,231],gool:184,got:[0,2,10,22,24,31,39,45,48,84,86,104,110,181],gotten:35,gpgpu:27,gpl:131,gpumat:[27,122,137],grab:[3,6,14,31,61,63,71,94,95,110,117,149,150],grabcut:158,grabfram:152,gracefulli:119,grad:[47,219],grad_i:47,grad_x:47,gradient:[25,36,40,43,45,47],grai:[3,8,10,13,22,23,24,25,32,43,47,51,52,53,54,55,58,61,72,78,81,82,95,101,106,110,112,114,149,154,155,157,159,201,222,223],grain:[11,106,155],granular:118,graph:[106,114,118,121,159,170,211,214],graph_flag:118,graphaddedg:116,graphaddedgebyptr:116,graphaddvtx:116,graphcut:211,graphedgeidx:116,graphic:[27,29,38,47,56,65,74,78,86,152,159,194,211,219],graphremoveedg:116,graphremoveedgebyptr:116,graphremovevtx:116,graphremovevtxbyptr:116,graphvtxdegre:116,graphvtxdegreebyptr:116,graphvtxidx:116,grasp:[27,28,33,66,73],gray_buf:155,gray_canva:155,gray_imag:72,gray_img:120,gray_img_hdr:120,gray_mat_hdr:120,grayimg:120,grayscal:[25,33,38,40,43,44,45,47,58,72,73,80,81,96,97,101,103,104,106,108,109,110,114,117,119,131,139,142,149,152,154,155,157,159,162,184,193,201,202],great:[66,106,108,119],greater:[25,58,101,104,106,114,118,120,123,124,125,131,136,137,142,143,155,157,161,172,183,192,202,212,219],greatest:[106,142],greatwav:[13,114],gree:43,greedi:175,greedyfuncapproxss:175,green:[0,6,13,20,38,43,81,82,91,96,101,110,114,117,123,152,159,162,170,172,222],green_theorem:162,greg:[211,219],grei:[96,106,131],greymat:78,greyscal:[36,96],grid:[101,104,128,156,176,183,223],grid_i:[104,106],grid_x:[104,106],gridcol:128,gridfast:128,gridrow:128,grimson:[149,201,219],ground:[66,177,181],group:[59,60,61,66,74,75,97,101,106,115,121,127,128,129,139,146,169,186,191,194,196],group_threshold:[146,191],groupid:62,grouprectangl:146,groupthreshold:186,grow:[13,33,114,118,128,149,173,175,201,219],growabl:118,gs1:27,gstreamer:114,gt220m:27,gtest:105,gtk:[63,71,122],gtkglext:122,guarante:[106,114,144,194,216],guess:[35,137,175,219],gui:6,guiba:157,guid:[59,60,61,62],guidelin:[66,97],gunilla:159,gunnar:[149,201,219],h264:[32,149],h264_mvc:149,h264_svc:149,h_bin:37,h_circl:142,h_color:142,h_keypoint:139,h_line:142,h_lumin:142,h_next:[118,162],h_prev:118,h_rang:37,h_vote:142,haar:[59,74,84,97,110,146],haar_cascad:110,haarcascad:[84,110],haarcascade_eye_tree_eyeglass:84,haarcascade_frontalface_alt:84,haarcascade_frontalface_default:110,haarcascades_gpu:146,haardetectobject:186,haartrain:186,had:[76,96,105,106,153],hadid:106,hairlin:106,half:[37,46,50,114,117,123,142,154],halo:3,ham:[93,127,131,191],hammingdist:191,han:[79,111,113,160],hand:[3,12,35,66,74,75,77,106,108,110,114,117,120,123,131,162,171,219],handi:[5,13,45,62,74,80],handl:[13,27,28,31,41,60,61,65,78,82,101,110,114,117],handlemissingvalu:101,handler:[124,153,222],handset:60,hang:66,hann:160,hann_funct:160,happen:[9,12,14,15,27,36,45,46,58,61,66,110,114,124,219],happi:[86,106],happyfish:65,happylittlefish:69,hard:[9,27,31,66,74,106],hardcod:[61,64],harder:[10,60,63,106,174],hardwar:59,harold:106,harri:[21,23],harris_dst:154,harris_respons:154,harris_scor:131,harrisk:[149,201],harrisk_:149,harsher:172,hart:106,hartlei:101,hartley99:101,harvest:27,hasbin:143,hasequalorgreat:143,hasequalorgreaterbin:143,hasequalorgreaterptx:143,hasequalorlessptx:143,hashsiz:120,hashtabl:120,hashval:114,hasptx:143,hasti:[81,171],hate:66,have:[0,3,5,6,7,8,9,10,11,12,13,14,25,26,27,30,31,32,33,34,35,36,37,38,39,40,42,44,46,47,48,49,50,58,59,60,61,62,64,65,66,68,69,70,71,72,73,74,75,76,77,78,80,81,82,87,93,95,96,97,101,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,121,123,125,126,127,128,129,130,131,135,136,138,139,142,144,145,146,147,148,149,151,152,153,154,155,156,157,159,161,162,163,165,171,172,173,174,175,177,179,180,181,182,184,185,186,190,191,192,193,194,195,197,199,201,202,219,223],have_opencv_nonfre:19,haven:59,hbin:157,hcellsspatialconst:[3,112],hcellstemporalconst:[3,112],hcolor:202,hdr:[3,74,112],head:[45,64,101,106,109,152,156,223],header:[11,13,22,23,24,25,27,33,34,35,39,46,49,51,52,53,54,55,58,59,63,65,67,69,71,74,75,80,84,105,114,118,119,120,121,123,138,155,157,162,190],header_dt:121,header_s:[118,121,162],headers:118,heap:[120,121],hear:[86,110],heard:110,heavi:[10,13,74,106,155],heavili:[6,66,101,106],heidelberg:[113,128,219],height:[0,5,14,31,32,34,39,61,62,64,66,76,78,81,82,84,95,97,101,106,108,109,110,114,117,120,123,137,138,141,142,149,152,153,154,155,166,169,176,189,190,192,193,201],heijden:219,helling:157,helloopencv:64,helloopencvact:61,helloopencvlayout:61,helloopencvview:61,helloworld:69,helloworld_proj:69,help:[0,3,9,10,11,26,27,31,32,34,44,59,60,61,62,64,65,66,74,76,87,101,106,107,108,110,114,118,119,128,136,144,149,156,172,194,201,219],helper:[114,118,119,124,190,229],helpercallbackinterfac:226,henc:[14,25,32,40,41,44,50,66,106,162,170],henrik:131,her:66,heraklion:126,herault:[3,112],here:[0,2,3,4,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,65,66,67,68,69,72,73,74,75,76,80,81,82,83,84,85,86,87,88,89,91,92,94,95,96,97,101,103,104,106,108,109,110,112,114,118,123,125,127,136,141,146,149,152,156,161,172,187,191,217,219],hereaft:112,hershei:117,hesit:66,hespanha:106,hess_thresh:212,hessian:[93,184],hessian_row:184,hessianthreshold:184,heterogen:[114,125,194],heung:211,heurist:[137,189],hgfedcb:155,hgvideo:66,hh08:101,hhhhhhh:155,hidden:[3,27,66,146,149,174,179,189,191,196,201,207,209,210,212,213,214,222,223],hide:[3,61,66,112],hiearchi:162,hierarch:[118,121,125,135,136,162],hierarchi:[51,52,53,54,55,56,97,106,108,110,121,125,162],hierarchicalclust:134,high:[3,8,25,27],high_thresh:[142,191],higher:[0,3,27,31,37,39,40,44,45,47,50,58,59,60,63,64,67,71,80,81,101,104,114,118,123,136,142,149,152,154,155,159,183,201,210,219],highest:[37,39,135,142,144],highgui:[5,7,8,11,17,18,19,20,22,23,24,25,27],highindex:123,highli:[66,74],highlight:[3,20,35,66,81,82],highthreshold:40,hilbert:114,hint:[3,66],hipr2:154,hirschmul:101,hist1:157,hist2:157,hist:[35,114,142,157,167],hist_and_backproj:35,hist_bas:37,hist_h:36,hist_half_down:37,hist_test1:37,hist_test2:37,hist_w:36,histimag:36,histimg:[35,157],histogram:[3,35],histogram_demo:38,histori:[149,201,219],histrang:36,histsiz:[35,36,37,114,142,157],hit:[69,76,97,155,179],hit_threshold:[146,191],hockei:151,hog:[74,146,187,191],hold:[8,10,12,74,103,104,106,108,109,110,118,138],holder:[106,108,110],hole:[33,49,117,162],hole_color:162,holecolor:162,holist:106,home:[60,62],homepag:[106,154],homogen:[34,101,106],homographi:[0,16],hope:[107,108,194],hopefulli:106,horizontalcellsgain:[3,112],horn81:[169,219],horn:[114,169,219],horribl:106,hotel:106,hou:101,houghcircl:43,houghcirclesbuf:142,houghlin:44,houghlines2:154,houghlinesbuf:142,houghlinesp:44,hour:74,hous:45,how:[0,1,2,3,4,5,6,7,8,9],how_to_scan_imag:10,howev:[0,3,7,8,9,10,11,12,13,27,31,32,34,39,40,45,66,71,74,75,78,80,81,82,96,101,106,108,110,114,118,119,121,123,125,135,144,145,153,154,155,156,171,172,174,179,181,182,192,194,199,210,219],hpp:[3,8,9,11,17,18,19,20,22,23,24,25,27,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,65,70,72,75,76,77,80,81,82,84,88,89,91,92,103,106,108,109,110,112,114,119,125,128,138,152,184],hrang:157,hscale:[69,117],hsv:[13,35,37,137,142,157,159],hsv_base:37,hsv_half_down:37,hsv_test1:37,hsv_test2:37,htf01:171,htm:[114,154,181],html:[35,60,61,62,66,74,106,155,159,167,183],http:[3,35,59,60,61,62,63,66,67,71,74,80,94,95,101,105,106,108,109,110,111,112,114,115,117,119,121,123,125,131,142,144,152,153,154,155,159,160,162,167,173,175,178,179,181,183,186,202,203,219],hu62:162,hu_moment:162,huam:[2,4,15,21,28,29,57,66,73,79,83,85,90],huaman:19,huang:149,hubel:106,huber:175,huber_loss:175,hue:[13,35,37,137,152,157],hue_rang:35,huffyuv:32,huge:[50,66,101,106,165,174],hull_storag:162,humoment:158,hundr:[10,97,119,186],hurri:62,hut:167,huttenloch:[137,159],hyper:183,hyperspac:155,hysteresi:[40,142,154,191],i1_2:[27,31],i1_i2:[27,31],i2_2:[27,31],i386:[60,62],i_1:66,i_2:66,i_yuv:11,ia32:60,ia64:60,ibact:80,iboutlet:80,ibrari:75,icb:[97,106],iccv:131,iceberg:[26,86],icip2002:97,icip92:159,icip:[3,112,186],icnn:179,icolor:14,icon:[61,75],icovar:123,icra2011:111,id1:222,id2:222,idct:116,idea:[8,12,13,21,27,32,33,47,48,66,75,81,82,106,108],ideal:[101,156,187],ident:[68,101,111,114,121,123,156,165,171,174,179,181,194,199,222,223],identifi:[36,39,40,58,106,108,114,117,121,125,141,152,153,159,180,182,192],idevic:86,idft:116,idiom:114,idiomat:62,idn:222,idr_period:149,idvendor:60,idx0:[120,167],idx1:[120,167],idx2:[120,167],idx:[114,118,120,125,162,167,178],ieee754:[123,124],ieee:[3,31,101,106,111,112,131,149,154,186,217,219],ifdef:[11,77,80],iff:114,ifndef:[19,80],ifram:[66,149],ifstream:[91,106,108,109,110],iglesia:[2,4,15,21,28,29,57,66,73,79,83,85,90],ignor:[36,101,113,114,120,123,125,131,136,146,149,154,155,159,162,179,186,197,223],iif:[121,125],iii:181,iiiiii:155,iiiiiii:155,iint:166,iir:155,iivarinen97:167,iivarinen:167,ijcai:219,ijcv:101,ijrr2008:111,ijrr2010:111,ill:0,illeg:110,illingworth:154,illum:106,illumin:[106,110],illustr:[3,27,58,101,114,123,149,155,157,211],im_height:110,im_width:110,imag:[0,1,2],image0:[106,108,110],image1:[9,160],image2:[14,160],image_1:20,image_2:20,image_block:142,image_copi:80,image_cpu:146,image_file_nam:97,image_gpu:146,image_head:120,image_height:139,image_list:0,image_mo:162,image_nam:44,image_path:70,image_point:101,image_points1:101,image_points2:101,image_s:[101,142],image_setting1:37,image_settings0:37,image_settings2:37,image_spect:142,image_sqsum:[142,197],image_sum:[142,197],image_width:139,image_window:39,imagedata:[114,120],imagedataorigin:120,imagedescriptor:166,imagef:[142,197],imagefeatur:206,imageid:120,imagekeypoint:166,imagelist:0,imagelist_cr:1,imagelogpolproject:[3,112],imagenam:[10,11,72],imagepoint:[0,101],imagepoints1:101,imagepoints2:[0,101],imageref:78,images:[0,101,120],images_:214,images_list:164,imagetoloadanddisplai:[65,75],imageview:80,imagewithcgimag:78,imagin:[3,35,36,46,47,50,81,106,108,109,110,118],imaginari:[8,147],imagw:142,imatch:102,imdecod:[96,150],imencod:[96,150],img0:103,img1:[16,17,18,19,20,93,96,97,130,142,151,192],img2:[16,17,18,19,20,93,97,130,142,151,192],img3:151,img:[1,6,13,39,69,96,97,101,104,114,117,119,120,123,146,151,152,154,155,159,162,164,176,184,186,191,207,219,223],img_00:152,img_01:152,img_02:152,img_1:[17,18,19],img_2:[17,18,19],img_:152,img_displai:39,img_idx:212,img_keypoints_1:18,img_keypoints_2:18,img_match:[16,17,19,20,93],img_object:20,img_path:164,img_scen:20,img_siz:[101,117,212],imgcollect:129,imgdescriptor:[111,133],imgidx:[111,127,139,191],imgproc:[8,11,22,23,24,25,27,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],imgrect:117,imgsiz:[101,117,156,192],imgtodenoiseindex:202,immedi:[62,112,114,118,123,222,223],immediate_rend:[222,223],impact:[3,82,171],imped:62,impercept:31,imperfect:[81,183],impl_:212,implement:[12,14,23,27,31,36,37,39,40,43,44,45,46,47,48,50,61,66,74,75,76,80,81,93,96,101,103,104,105,106,110,111,113,114,115,117,119,120,121,123,125,126,127,128,129,131,137,139,142,144,146,149,151,152,154,155,156,159,162,163,165,171,172,173,174,175,176,177,178,179,181,183,184,187,189,191,194,196,201,211,212,213,216,217,219,225],impli:[8,34,36,38,65,101,106,108,110,114,144,162,172],implicit:9,implicitli:[89,101,106,114,118,124,222,223],imposs:[104,106,109,114,118,119],impredict:14,improp:152,improv:[0,3,11,21,27,35,38,57,66,74,81,106,110,111,123,149,172,181,186,187,194,219],imread:[0,1,3,5,7,8,11,13,16,17,18,19,20,22,23,24,25,27,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,62,64,65,66,69,70,72,75,76,93,96,103,104,106,108,109,110,114,117,146,150],imread_color:75,imshow:[0,3,5,7,8,11,14,16,17,18,19,20,22,23,24,25,30,31,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,65,69,70,72,75,81,82,84,93,96,103,106,108,109,110,114,117,119,146,150,152],imwrit:[13,62,64,72,81,82,96,106,108,109,117,150],in_front:118,inabl:179,inaccur:74,inaccuraci:47,incid:118,incident:[106,108,110],includ:[3,5,7,8,9,11,13,17,18,19,20,22,23,24,25,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,65,66,69,70,71,72,75,76,77],includeantruntim:64,inclus:[14,114,118,120,123,128,157],incom:[110,118],incompat:230,incompatible_manager_vers:230,incomplet:118,inconsist:31,inconveni:119,incorpor:106,incorrect:[118,123],incorrectli:[101,172,181],increas:[3,10,12,13,27,31,34,66,81,82,112,114,119,124,127,128,139,144,146,157,171,172,179,181,191,219],increfdata:116,increment:[82,114,118,119,120,157,167,169],ind:[42,46],inde:[59,194],indefinit:46,indent:[66,121],independ:[101,106,108,110,111,114,117,120,123,126,138,148,155,156,159,160,179,180,192,194,199,219],index:[12,31,35,60,69,81,82,96,99,101,107,111,114,115,118,120,121,122,123,124,125,127,128,131,136,143,145,148,152,155,157,159,164,165,166,167,170,171,172,173,174,178,179,181,183,186,196,199,202,209,214,222],index_:[127,134],indexchang:131,indexparam:[127,136],indic:[7,33,34,35,36,38,39,42,47,49,72,75,76,93,94,97],indigo:60,indirect:[106,108,110],individu:[11,33,65,101,106,114,120,123,142,155,159,171,179,199,219],induc:171,industri:194,inequ:111,inertia:[128,179],inexist:12,inexpens:171,inf:[60,114,121,123,124,154],infer:171,infin:[121,124,170],infinit:[8,42,50,81,123,153,162],influenc:[12,105,136,155,171,192],influenti:8,info:[7,44,55],inform:[2,3,7,8,11,13,25,27,30,31,36,47,48,50,59,60,61,66,74,75,76,81,82,86,94,95,97,101,104,106,111,112,114,116,118,120,121],infothreshold:111,infrastructur:[144,194],infrom:222,ing:76,inher:128,inherit:[61,93,111,118,126,127,128,163,173,174],inheritor:133,init:[3,27,31,101,114,140],init_fail:230,init_thresh:128,initasync:[61,226],initcameramatrix2d:100,initdebug:61,initfeaturescal:128,initfont:116,initi:[0,7,8,9,13,14,27,30,35,37,41,42,48,50,58,59],initia:201,initial_button_st:151,initial_thresh:128,initialis:128,initializedescriptor:164,initializepos:164,initializeposetransform:164,initializetransformsfrompos:164,initimagehead:116,initimgbound:128,initintrinsicparams2d:101,initmathead:116,initmatndhead:116,initmodule_:114,initmodule_ml:114,initmodule_nonfre:[114,128,184],initsparsematiter:116,inittreenodeiter:116,initundistortmap:156,initundistortrectifymap:[0,100],initwithparentview:80,initwithtitl:77,initxystep:128,ink:75,inlcud:108,inlier:[16,101,137,212],inliers_mask:212,inlin:[66,114,118,120,121,125,166,222],inner:[101,106,112,122,124,127,133,139,141,149,174,192,201,217,219],inner_iter:149,inner_iterations_:149,innov:187,inpaint:159,inpaint_mask:203,inpaint_n:203,inpaint_telea:203,inpaintmask:203,inpaintradiu:203,inpaintrang:203,inplac:[155,199],input:[0,3,5,7,8],input_image_linear_s:131,inputarrai:[101,103,104,106,108,109,113],inputarrayofarrai:[101,104,114,117,123,162,202],inputcaptur:0,inputfram:[3,61],inputimag:[76,112],inputmat:78,inputmediatyp:3,inputoutputarrai:[101,114,115,117,123,154,159,160,162,219],inputoutputarrayofarrai:114,inputsettingsfil:0,inputtyp:0,inputvideo:32,inputvideonam:[32,66],inrang:116,inscrib:[117,155,162],insensit:101,insert:[61,76,118,121,123,170],inserted_edg:118,inserted_elem:118,inserted_vtx:118,insertimagecoi:116,insertnextcel:88,insertnextpoint:88,insertnodeintotre:116,insid:[0,6,9,11,12,13,14,21,31,32,57,61,64,65,66,73,74],insight:[82,108],inspect:[62,76],inspir:[3,112,131],instal:[3,32,59,60,61],install_cancel:230,installcallbackinterfac:[227,230],instanc:[0,3,6,9,10,11,12,13,16,27,31,32,33,35,42,44,46,47,48,49,58,59,62,66,69,75,78,82,93,96,97,101,104,112,113,114,115,119,121,128,129,141,149,155,164,172,181,182,192,210,212,213,216,217,219,223],instant:119,instanti:111,instantli:110,instead:[7,10,27,60,61,62,66,68,74,81,96,97,101,104,106,108,114,115,118,119,120,121,123,124,125,131,141,142,152,155,156,157,159,165,171,172,174,175,179,181,182,183,184,186,192,196,219],instig:111,institut:174,instruct:[26,50,60,62,63,64,66,76,87,95,119,124,144],instrument:144,int64:[120,124],int_max:[123,124,125,162,172],int_min:124,intact:11,intbuff:184,integ:[7,10,14,22,30,31,32,46,94,97,101,104,106,108,110,114,115,117,118,119,120,121,123,124,125,128,142,148,151,153,155,156,159,162,167,170,179,180,182,193,196,222],integr:[31,60,66,74,111],integral2:159,integral3:159,intel:[10,27,59,60,74],intellig:[101,106,154,183,219],intelperc:94,intelperc_captur:94,intelperc_include_dir:94,intelperc_lib_dir:94,intend:[8,14,27,66,118,122,129,138],intens:[13,25,33,34,36,38,40,45,47,58,65,66,93,94],intent:78,inter:193,inter_area:156,inter_cub:[110,142,156,193],inter_lanczos4:156,inter_linear:[0,142,156,193],inter_nearest:[142,156,193],interchang:[97,114],interest:[3,5,8,9,10,13,14,18,21,25,58,62,81,82,96,106,108,114,118,120,123,124,125,128,149,154,182,186,201,210,212,214],interfac:[9,11,13,15,17,18,19,29,60,61,62,64,66,74,75],interior:[101,162],interleav:[120,142,147,156,159,193,199],intermedi:[96,101,119,141,143,144,155,192,223],intermix:114,intern:[3,14,32,40,43,45,62,97,101],internet:[59,60,66,74],interop:62,interoperability_with_opencv_1:11,interp_mod:216,interpol:[46,78,101,106,119,123,142,149,155,156,159,193,201,216,223],interpret:[66,81,82,97,114,123],interrupt:[97,106,108,110],intersect:[25,37,44,114,117,120,157,162,214],interv:[36,101,114,137,175,219],intial:[62,106,114],intl:211,intrins:[0,1,101,137,216,222,223],intrinsinc:222,intro:[41,62],introduc:[3,8,11,13,27,31,38,62,73,81,101,119,123,128,162,166,173,175,181,194],introduct:[0,59],introductionari:75,intuit:[81,82,106],intvaluetoreduc:10,inv:97,inv_scal:114,invalid:[0,10,31,65,74,75,76,101,103,114,118,123,152,170],invari:[131,156,162,184,211],invent:106,invers:[43,97,101,114,123,142,148,154,156,160,162,172,193,199],invert:[33,49],investig:57,invit:31,invoc:[61,142,194],invok:[40,58,60,61,114,230],involv:[3,34,112,114,119,144],iomanip:31,iostream:[5,7,8,9,11,17,18,20,22,23,24,25,31,32,35,36,37,38,39,43,44,46,48,51,52,53,54,55,56,65,75,76,82,84,88,89,91,92,106,108,109,110],iphon:80,ipl_data_order_pixel:120,ipl_depth_16:120,ipl_depth_16u:120,ipl_depth_32:120,ipl_depth_32f:120,ipl_depth_64f:120,ipl_depth_8:120,ipl_depth_8u:[69,120,123],ipl_depth_sign:120,ipl_image_head:120,ipl_image_roi:120,ipl_origin_bl:120,ipl_origin_tl:120,iplconvkernel:155,ipldealloc:120,ipli:11,iplimag:[11,13,66,69,96],iplimage_:76,iplmagno:[3,112],iplmagnoparamet:112,iplparvo:112,iplroi:120,ipol:[142,202],ipp:74,iren:149,irfan:211,irimag:94,irregular:[167,219],irrelev:[3,114],irrit:62,irvin:178,is_clos:[117,162],is_color:152,is_focals_estim:213,is_focals_estimated_:213,is_geometry_valid:170,is_inst:121,is_rel:118,is_sort:118,is_thread_saf:212,is_thread_safe_:212,isa:114,isbn:[3,112],isc:117,isclos:[117,162],iscolor:152,iscont:62,iscontinu:10,iscontourconvex:158,isgreaterthan:199,isimagegeneratorpres:95,isinf:116,isint:116,ismap:116,isn:[10,27,66,74,75,103,106,216],isnam:116,isnan:116,isnon:116,iso:152,isol:[33,155],isopen:[0,3,9,31,32,110,114,116,119],isotrop:156,isreal:[114,116],isregress:[176,196],issepar:155,isseq:116,isstr:116,issu:[10,11,12,13,59,60,62,66,71,74,111,194],issubmat:62,ist:[173,183,202],istream:166,it1:114,it1_end:114,it2:[114,117],it_end:[9,11,114,125],ital:[117,151],item:[9,10,12],iter:9,iterationnr:9,iterationscount:101,itercount:159,iterfactor:123,itk:70,itnari:114,itnr:9,itself:[13,27,31,32,37,62,65,66,101,105,114,117,118,123,155,156,176,182,186],ixx:155,iyi:155,jaakko:167,jac:213,jacobian:[101,213],jain:106,jane:211,jasper:65,java:59,java_hom:64,javac:64,javacameraview:61,javadoc:[62,224],javasampl:64,javasamplebuild:64,javier2012:219,javier:219,jdk:[59,60,61,62,64],jean:219,jeanni:[3,112],jeffrei:106,jennif:108,jerom:175,jet:[103,106,108,109],jiamin:219,jinja2:74,jit:144,jni:[59,60,61,64],job:48,jochen:[97,186],john:40,johnni:[108,110],join:[33,106,108,110,118,154],joint:[101,137,155,156,219],joli:[108,110],jone:[97,186],josephson:136,journal:[97,106,111,137,159,184,211],joy:64,jp2:[65,152],jpbwhxsl1_0:66,jpe:[65,152],jpeg:[13,65,149,152,159],jpg:[0,1,3,5,7,8,9,10,11,30,34,44,47,50,65,66,70,72,75,96],jukka:167,juli:[181,211],jump:[45,47,137,189],jun:125,june:[149,154],juno:60,just:[0,3,6,9,10,11,13,14,27,30,31,32,33,34,36,41,44,48,59,60,61,62,64,65,66,68,69,70,74,75,80,82,101,104,106,108,109,110,112,114,118,119,121,123,124,125,136,152,155,156,159,165,172,174,184,193],justin:[108,110],jutta:133,jvm:[62,64],k_1:101,k_2:101,k_3:101,k_4:101,k_5:101,k_6:101,k_fold:183,k_rinv:216,kadewtrakupong:[149,219],kaehler:[33,41,42,44,47,49,50,58],kai:136,kak:106,kalman:[201,219],kalman_filt:219,kalmancorrect:219,kalmanpredict:219,kamaev:[2,4,15,21,28,29,57,66,73,79,83,85,90],kanad:[106,114,149,169,201,219],kanade73:106,karhunen:123,karl:106,kati:[108,110],katy_perri:[108,110],katy_perry_01:[108,110],katy_perry_02:[108,110],katy_perry_03:[108,110],kcgbitmapbyteorderdefault:78,kcgimagealphanon:78,kcgimagealphanoneskiplast:78,kcgrenderingintentdefault:78,kdtreeindexparam:[127,136],keanu:[108,110],keanu_reev:[108,110],keanu_reeves_01:[108,110],keanu_reeves_02:[108,110],keanu_reeves_03:[108,110],keep:[3,11,13,27,32,36,44,58,59,65,66,76,84,96,97,101,104,106,108,109,110,114,118,121,123,146,153,155,162,166,172,181,191,222,228],keep_floats_:166,kei:[0,7,30,34,40,49,60,64,65,66,72,76,96,97,110,114,119,121,131,136,153,155,172,199,222],kept:[104,114,128,146,191],kern:[12,141,155,192],kernel:[11,12,15,33,34,40],kernel_asymmetr:155,kernel_gener:155,kernel_integ:155,kernel_s:[40,42,45,126,142],kernel_smooth:155,kernel_symmetr:155,kernel_typ:[81,82,183],kernelx:[141,155,192],key_down:222,key_siz:136,key_up:222,keyboard:[75,150,222],keyboardcallback:222,keyboardcallbackfunct:222,keyboardev:221,keypoint:[16,17,18,19,20],keypointlayout:184,keypoints1:[16,93,130],keypoints2:[16,93,130],keypoints_1:[17,18,19],keypoints_2:[17,18,19],keypoints_object:20,keypoints_scen:20,keypointsgpu:184,keypointsocl:184,keypointsratio:[139,184],keypress:153,keystrok:[65,75],keyword:[10,11,27,65],kfold:183,khrono:194,kienzl:73,kilogram:172,kind:[7,9,31,34,36,39,41,44,49,50,66,72,106,112,114,123,210,213],kinectcamera:221,kit:60,kittler:154,klt:123,km01:106,kmeans2:115,kmeans_:[115,196],kmeans_pp_cent:[115,133,196],kmeans_random_cent:[115,196],kmeans_use_initial_label:[115,196],kmeansindexparam:[135,136],knearest:176,knew:101,knight:159,knn:[136,176],knnmatch2collect:[139,191],knnmatch2convert:[139,191],knnmatch2download:[139,191],knnmatchsingl:[139,191],knnsearch:134,know:[3,5,11,13,14,15,25,27,28,32,35,36,42,44,48,62,66,69,72,73,74,75,86,91,96,101,106,108,110,114,121,151,154,166,172,179],knowledg:[27,66,80,114,144,183,194],knowleg:60,known:[1,3,12,16],kohli:219,konolig:[101,128,131],kosov:113,kpt:164,kriegman:106,ksize:[141,142,154,155,192,193],ksize_:[141,192],kts09:113,ktype:155,kuang:106,kurt:131,kwatra:211,kyoto:106,l1dist:191,l2dist:191,l2gradient:[142,154,191],l7200:131,lab:[3,112],label:[30,61,81,82,104,106,108,109,110,115,153,159,162,164,165,171,172,174,175,176,178,181,182,183,186,196],labelsinfo:104,labelsmat:81,labeltyp:159,labl:196,laboratori:106,lag:[32,149],lagarith:32,lagrang:81,lagrangian:81,lai:[44,82],lambda:[113,114,169,217,219],lambda_1:23,lambda_2:23,lamda:114,lanczo:[119,156],landscap:80,lang:62,languag:[13,60,62,66,68,74,119,121],laplace_f:155,laplacian_row:184,lappyr:155,laptop:[27,131,138],larg:[8,10,11,12,13,25,27,31,66,82,97,101,106,110,111,114,118,123,127,128,136,142,149,154,155,159,164,170,174,184,193,201,219,223],larger:[8,10,13,27,32,41,66,75,93,97,101,104,111,113,120,123,124,131,141,145,146,154,155,159,169,171,176,179,183,184,186,192,194,196,197,219],largest:[81,106,111,123,146,154,157],laser:94,last:[0,3,6,9,13,14,27,32,36,47,60,61,62,66,89,106,108,109,114,115,117,118,120,123,125,128,146,151,152,155,157,162,172,175,182,190,191,194,196,219,223],lastfram:149,late:[0,3,124],latentsvm:187,latentsvm_multidetect:187,latentsvmdetect:187,later:[0,10,27,32,60,64,66,67,71,74,75,80,106,108,109,110,112,114,118,157,183],latest:[59,60],latex:66,latter:[12,60,114,118,119,120,121,123,138,144,156,159,176,179,182,196],launch:[59,60,62,63,66,67,68,71,74,76],lavaren:[3,112],layer:[50,112,113,118,120,128,131,155,179,184,219],layers:179,layout:[60,61,62,66,114,120,123,172,176,180,182,183,192,196],layout_height:61,layout_width:61,layoutparam:61,lazi:[10,64],lbp:[59,84,97,105,106,125,146,186],lbpcascad:64,lbpcascade_frontalfac:[64,84],lbph:[104,106,110],lbphfacerecogn:106,lbpval:125,lcl:32,lcs11:131,lda:106,lead:[3,66,106,122,136,138,172],leaf:[121,125,172,175,181],leaf_counts_:166,leak:[112,114],learn:[1,2,3,4,5,6,7,11,13,14,15,16,17,18,19,20,21,22,23,24,25,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,65,66,72,73,74,77,78,79,81,82],learner:175,learningopencv:34,learningr:[149,201,219],least:[0,3,8,34,60,66,75,80,97,101,106,108,109,112,114,123,136,142,153,162,166,171,186,187,210],leav:[3,11,31,45,49,62,66,69,104,106,138,142,162,172,175,186,197,212],lectur:[179,219],lecun98:179,lecun:179,led:60,lee05:106,lee:106,leek:11,leekc:106,left:[8,12,14,39,41,46,49,60,62,66,69,76,77,101,106,108,110,113,114,117,118,120,123,137,142,144,146,148,154,155,156,159,166,170,172,181,186,189,191,192,207,209,214,216,219],leftbutton:222,lefttoright:117,legaci:99,legal:62,lei:97,lein:62,leiningeng:62,len:[101,106,108,110,118,121,125,155,156],lena:[3,7,8,11,34,47,62,64,70],length:[0,14,41,55,64,78,95,101,106,114,117,118,120,121,123,126,145,154,155,162,171,175,206,208,213,219,222,223],lengthi:5,lens:[0,101,184],leo:[106,181],leonid:[2,4,15,21,28,29,57,66,73,79,83,85,90],lepetit:[101,126],less:[0,10,12,13,19,20,31,35,37,44,50,66,68,80,81,82,101,104,114,115,117,118,123,127,128,131,136,137,139,149,154,155,162,165,166,171,172,174,183,184,186,189,191,196,201,219,228],lesson:106,let:[0,1,3,5,6,8,10,12,14,25,30,31,33,34,35,36,38,39,40,41,42,46,47,48,49,50,57,58,60,61,62,64,65,66,67,69,70,72,73,74,76,81,91,93,96,101,104,106,108,110,119,123,155,156],letter:[8,11,33,49,66,74,75,117,159,166,219],letter_recog:[166,181],leutenegg:131,level:[3,15,23],levelsand:[137,189],levelweight:186,levenberg:[101,114,213],lexicograph:[114,123,157],liabil:[106,108,110],liabl:[106,108,110],liao2007:97,liao:97,lib:[59,60,61],libav:[63,71],libavcodec:[63,71],libavformat:[63,71],libdc1394:[63,71],libfacerec:[105,109],libgtk2:[63,71],libjasp:[63,71,152],libjpeg:[63,71,152],libopencv_java244:64,libopencv_java247:62,libopencv_java:61,libpng:[63,71,152],librari:[0,3,8,9,10,11,12,13,15,19,21,27,29,31,32],libstc:63,libstdc:60,libsvm:183,libswscal:[63,71],libtbb2:71,libtbb:71,libtiff:[63,71,152],libxtst:60,licens:[59,60],lie:[81,123,155],lienhart02:186,lienhart:[97,186],life:[0,62,64,106],lifecycl:60,lifetim:[96,122],light:[3,13,15,37,82,101,106,112,114,128,149],lightweight:[118,120,138],like:[0,1,3,6,8,9,10,11,12,26,27,30,31,32,34,35,36,38,48,59,60,61,62,64,65,66,68,69,70,71,72,74,75,76,80,86,87,97,101,104,106,108,109,110,114,117,118,119,120,121,123,124,125,138,141,142,152,155,156,159,162,165,172,174,177,178,181,182,184,186,187],likelihood:[111,165,174],limit:[3,10,27,30,31,32,36,40,60,97,106,108,110,114],lin:183,line:[0,3,6,8,10,12,14,17,18,19,20,22,23,24,25,27,31,32,33,36,40,41,42,43],line_length:223,line_loop:122,line_storag:154,line_strip:122,line_typ:117,line_width:[92,222,223],linear:[3,5,7,8,30,34],linearindexparam:136,linearlayout:61,linearli:[3,81],lineiter:116,lineno:66,liness:[106,108,109,110],linethresholdbinar:128,linethresholdproject:128,linetyp:[6,14,81,82,117,162],linewidth:69,link:[11,26,27,34,35,61,66,67,69,74,76],linkag:61,linker:[69,75,114],linux:[11,59],linuxlogo:[5,30],lisp:62,list:[0,1,9,27,32,36,58,59,60,66,69,74,75,76,86,95,97,101,103,104,106,108,109,110,111,114,118,120,121,123,124,125,131,144,146,152,155,157,172,175,178,182,186,200,222,223],listdir:[106,108,110],listen:66,listic:[3,112],liter:[50,66,121],literalinclud:66,literatur:31,littl:[0,10,11,28,48,60,66,74,75,86,106,108,110,114,131,177],liu:111,live:[0,3,64,66,95],lixin:133,liyuan:149,lk_homographi:219,lk_track:219,lkdemo:219,llopi:219,lmed:101,lnc:126,lo_diff:159,load:[0,1,3,5,7,10,11,13,22,23,24,25,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,58,59,60,61],loader:[152,225],loadercallbackinterfac:[61,226,229,230],loadimag:152,loadimagem:152,loadlibrari:[61,62,64,68,229],loadpcadescriptor:164,loadwindowparamet:150,loc:170,local:[3,20,27,33,39,40,42,60],local_copi:155,local_modul:60,local_path:60,local_src_fil:60,localadaptintegration_k:[3,112],localadaptintegration_tau:[3,112],localtim:125,locat:[6,7,12,14,21],location_row:139,locbuf:145,lock:[104,138],lodiff:159,loev:123,log10:[27,31],log2:119,log:[3,8,60,61,66,94,95,111,112,116,118,119],log_step:183,logarithm:[3,8,31,112,123,148,165,174,183],logic:[106,114,123,124,212,213,216,226,231],logicop:114,logist:171,logit:171,logitboost:[97,171,186],loglikelihood:[111,174],logn:162,logo:[75,97],logpolar_bsm:156,longer:[11,13,31,32,66,74,96,114,136,152,179,190],look:[0,3,8,10,11,12,14,15,25,30,31,32,34,38,41,48,57,59,61,62,64,66,68,70,74,75,76,80,85,86,87,101,104,106,108,109,110,111,112,114,117,118,121,123,125,128,139,142,147,152,155,156,157,176,181,186,199,202],lookupt:10,loop:[0,3,7,14,41,42,46,50,62,66,88,89,91,110,111,114,118,119,121,123,124,149,153,155,167,222],loos:114,lopencv_calib3d:69,lopencv_contrib:[3,69],lopencv_cor:[3,69],lopencv_features2d:69,lopencv_flann:69,lopencv_highgui:[3,69],lopencv_imgproc:69,lopencv_legaci:69,lopencv_ml:69,lopencv_objdetect:69,lopencv_video:69,lopez:108,lose:[50,171],loss:[106,108,110,111,175],loss_function_typ:175,lossless:32,lost:[27,50,64,72,96,101,106,159],lot:[7,10,12,13,27,74,101,105,106,107,108,114,119,123,137,154,189],loui:173,love:74,low:[0,3,27,40,66,106,112,114,118,120,121,123,124,127,136,137,144,164,171,181,184,189,194,211],low_thresh:[142,191],lowconstrastmask:114,lowcontrastmask:114,lowe04:184,lower:[3,13,31,32,36,37,39,40,50,58,101,106,111,114,118,120,121,123,125,131,135,142,144,147,154,155,157,159,170,179,183,219],lower_bound:157,lowerb:123,lowerbound:157,lowerlevel:142,lowertoupp:123,lowest:[3,39,119,142],lowindex:123,lowthreshold:40,lsh:136,lshindexparam:136,lst:97,lsusb:60,ltcg:74,luca:[114,149,169,201,219],lucas81:[169,219],luck:[60,64],luckili:[0,13,31,66,74,75],luma:11,lumin:[3,4,13,80,112,142,202],lun:97,lut:[10,116],luv:142,m00:[55,162],m01:[55,162],m02:162,m03:162,m10:[55,162],m11:162,m12:162,m1type:[101,156],m20:162,m21:162,m30:162,m_00:55,m_descriptor:164,m_patch_siz:164,m_pca_avg:164,m_pca_dim_high:164,m_pca_dim_low:164,m_pca_eigenvector:164,m_pose_count:164,m_pyr_level:164,m_train_feature_count:164,m_transform:164,mac:59,macchi:106,machin:[60,61,62,76],maco:[60,67,122],macosx:[62,95,152],macro:[13,32,80,116,117,118,119,120,121],made:3,magenta:222,magi:8,magic:[66,114,190],magnet:13,magnitud:[8,13,82,116],magnocellular:[3,112],magomimmo:62,mahalanobi:116,mahalonobi:123,mai:[0,8,9,10,11,12,13,27,29,31,32,35,39,44,47,48,59,60,61,63,65,66,69,74,75,76,82,97,101,106,108,109,110,114,115,117,118,119,120,121,123,124,126,127,128,129,130,138,142,144,145,149,153,154,155,156,157,159,162,165,170,171,172,174,176,178,179,180,181,182,183,185,186,194,196,199,201,203,219,228,231],mail:[104,110],main1:151,main2:151,main:[3,5,7,8,9,11,13,14,17,18,19,20,22,23,24,25,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,62,64,65,66,68,69,70,72,75,76,81,82,84,88,89,91,92,97,103,106,108,109,110,111,112,113,114,117,118,119,120,121,123,125,151,152,154,155,156,157,162,174,175,176,192],mainli:[3,13,14,32,101,121,146,191],maintain:[3,11,104,112,123,149,201,219],major:[0,10,11,47,97,114,143,146,174,176,181,191],make:[0,3,7,8,10,11,12,13,21,27,31,33,34,35,38,39],make_patch:166,makecamerapos:[91,221],makefil:[60,64,69,71],makeposteriors2:166,makeseqheaderforarrai:116,maketransformtoglob:[91,221],male:[106,108],malsburg:106,manag:[3,11,13,27,59,60,61,62,65,71,75,76],mandat:138,mandatori:60,manduchi1:155,manger:75,mango:[106,108,109,110],manhattan:93,mani:[0,3,10,11,13,31,34,40,64,66,74,75,82,97,101,104,106,114,115,117,118,119,123,127,128,129,141,142,144,146,155,159,162,165,171,172,174,175,178,179,181,182,186,191,192,194,197,219],manifest:[0,61,62,64],manipul:[13,15,31,32,57,59,79,86,150,202,223],manner:[10,30,31,33,155,192,194],manual:[10,13,27],map1:[0,101,156,193],map2:[0,101,156,193],map:[0,9,16,20,27,31,38,40,46,48,62,81,94,95,101,104,111,112,113,121,122,125,137,138,142,144,153,154,156,159,161,165,169,172,178,183,187,189,191,193,197,207,216,223],map_i:[46,142,193],map_matrix:156,map_x:[46,142,193],mapdevic:116,maphost:116,mapi:156,mapmatrix:156,mappcontext:226,mapper:88,mapx:156,march:159,margarita:131,margin:[81,82,101,131,183],mariu:136,marix:223,mark:[27,39,45,80],marker:[106,159],market:[59,228,230],market_error:230,marketplac:228,markov:174,marku:167,markup:66,marquardt:[101,114,213],marsaglia:123,martinez:106,martix:114,mask1:184,mask_siz:159,maskcollect:[139,191],maskroi:120,masks_:214,masksiz:159,masksum:184,masochist:13,mass:[55,114,157,162,171,181,219],massiv:27,master:[66,114,124,144,152,153,162,186],mat:[0,1,3,5,6,7,8,9,10,11,12],mat_8u:123,mat_:[8,9,10,11,12,13,81,82],mat_dst:193,mat_hist:193,mat_i:46,mat_iter:120,mat_mask_oper:12,mat_src:193,mat_x:46,mata:154,matas00:154,matbasicima:66,match:[16,17],match_conf:212,match_method:39,match_par:61,matchcollect:[139,191],matchcolor:130,matcher:[16,17,19,20,93,119],matcher_simpl:[93,184],matches1to2:130,matches_info:212,matchesinfo:206,matchesmask:130,matching_mask_:210,matching_to_many_imag:[127,129],matchingmask:210,matchingmethod:39,matchloc:39,matchshap:158,matchsingl:[139,191],matchtempl:[39,123],matconstiterator_:114,materi:[13,66,106,108,109,110],matexpr:[114,123],math:[40,50,66,101,106,108,110,114,118,121,154,155,162,192],mathemat:[8,12,106,194],matic:114,matiter:114,matiterator_:[10,11,114],matlab:[7,11,13,101,103,105,114,119,123],matmulderiv:100,matnd:[35,37,120,123,157],matofrect:64,matric:[0,10,11],matricesl:123,matrix:[0,3,7,8,9],matrix_axpi:114,matrixl:123,matrixm:101,matrixq:101,matrixqi:101,matrixqx:101,matrixqz:101,matrixr:101,matsukawa:149,matter:[27,71,81,97,103,118,123,131,159],matthebasicimagecontain:66,matthebasicimagestructur:66,matx12d:114,matx12f:114,matx16d:114,matx16f:114,matx21d:114,matx21f:114,matx22d:114,matx22f:114,matx23f:114,matx33d:[222,223],matx33f:114,matx44d:222,matx61d:114,matx61f:114,matx66d:114,matx66f:114,maven:62,max:[19,20,22,24,35,66,80,97,101,110,114,116],max_binary_valu:58,max_categori:[172,181],max_data_term:[137,189],max_depth:[171,172,175,181],max_depth_of_weak_tre:97,max_disc_term:[137,189],max_disc_threshold:137,max_dist:[19,20,137],max_elem:[33,49],max_false_alarm_r:97,max_featur:128,max_flow:219,max_idx:157,max_intensity_devi:97,max_it:[114,120,121,128,142,155,165,179,193],max_iter:121,max_k:[176,196],max_kernel_length:34,max_kernel_s:[33,49],max_level:[118,155,162],max_loc:123,max_lowthreshold:40,max_num_of_trees_in_the_forest:181,max_oper:49,max_qualitylevel:23,max_radiu:[43,154],max_rang:169,max_siz:186,max_thresh:[25,51,52,53,54,55,128],max_trackbar:39,max_typ:58,max_val:[123,183],max_valu:[58,157,159],max_weak_tree_count:97,max_x_rotation_angl:97,max_y_rotation_angl:97,max_z_rotation_angl:97,maxarea:[128,131],maxbufrow:155,maxcircl:142,maxcircular:128,maxcompon:123,maxconvex:128,maxcorn:[22,24,128,149,154,201],maxcorners_:149,maxcount:[114,125,154,174,219],maxdepth:97,maxdiff:101,maxdisp:113,maxdist:[127,129,139,154,191],maxevolut:128,maxfalsealarmr:97,maxfeatur:149,maxidev:97,maxidx:123,maxim:[8,25,27,33,81,82,97,101,106,114,118,131,153,156,159,162],maxima:[154,195],maximally_stable_extremal_region:131,maximum:[31,32,38,39,40,43,44,45,47,58,81,82,95,96,97,101,106,111,113,114,115,119,120,123,124,128,131,136,137,139,141,142,145,146,148,149,154,155,157,159,160,161,162,165,166,167,172,174,176,179,181,183,186,187,191,192,193,195,196,197,201,219,223],maxinertiaratio:128,maxit:[123,174],maxk:[176,196],maxlevel:[149,155,162,201,219],maxlin:142,maxlinegap:[44,154],maxloc:[39,123,145,195],maxobjects:146,maxposbuff:184,maxradiu:[142,154,156],maxscal:164,maxsigmacolor:[155,192],maxsiz:[128,186,197],maxspeckles:101,maxthreshold:128,maxtotalkeypoint:128,maxtrackbar:[22,24],maxv:128,maxval:[39,56,96,123,142,145,157,159,193,195],maxvalu:159,maxvari:128,maxweakcount:97,maxxangl:97,maxyangl:97,maxzangl:97,may02:186,mayb:[3,196],maydt:[97,186],mbstowc:61,mc5:[62,64],mcallest:187,mean:[0,3,6,8,10,11,13,14,27,31,32,34,35,39,40,44,48,60,62,65,66,75,76,81,93,95,101,104,105,106,108,109,111,112,113,114,115,116,117,118,119,120,121],mean_field:111,meaning:[104,105,106,128],meaningless:45,means0:174,meanshift:155,meanshift_segment:155,meanstddev:116,meant:66,measure_dist:162,measure_param:219,measuredist:162,measurementmatrix:[201,219],measurementnoisecov:201,measureparam:[201,219],mechan:[13,114,118,123],media:3,medianblur:34,mediawiki:186,meet:118,megabyt:71,megamind:[31,32],megamind_bug:31,meinhardt:219,mem:138,mem_typ:190,member:[9,10,60,62,76,112,114,118,138,149,171,172,181,182,183,190,217,219],member_typ:114,memor:[119,155],memory_weight:136,memstorag:[118,121],memstoragealloc:116,memstorageallocstr:116,mention:[0,9,25,34,44,48,66,86,97,106,114,137,155,172,189],menu:[59,60,61,68,74,75,76],merchant:[106,108,110],merg:[8,11,32,62,66,106,112,116,120,121],merger:223,mesh:221,mess:[11,66],messag:[3,10,27,59,61,62,66,74,77,96,105,110,114,124,137,172,189],messer06:106,messer:106,met:[106,108,109,110,118,172],meta:123,metatyp:120,meter:95,method1:155,method:[1,3,7],methodolog:106,metric:[37,39,57,93,101,120,127,157,196],meyer92:159,meyer:159,mget:116,mhi:219,mi_xx:60,michael:[97,166,186,219],microsoft:[11,73,74],mid:[3,112],middl:[34,38,46,60,66,118,123,154,155,186],middlebutton:222,might:[13,14,27,30,32,40,46,60,66,97,104,106,156,184],migrat:[66,123],mikic:[149,219],miktex:74,milanfar:217,millimet:0,million:[10,13],millisecond:[10,12,27,42,65,89,151,152,153,219,222],mimmo:[2,4,15,21,28,29,57,62,66,73,79,83,85,90],min:[19,20,40,66,80,101,106,108,109,114,116],min_disp_th:[137,189],min_dist:[19,20,43,154],min_divers:131,min_featur:128,min_hit_r:97,min_idx:157,min_inlier_count:137,min_loc:123,min_neighbor:186,min_radiu:[43,154],min_sample_count:[172,181],min_siz:186,min_thresh:128,min_val:[123,183],min_valu:157,minarea:[128,131,162],minarearect2:162,minarearect:[52,114,158],mincircular:128,minconvex:128,mind:[13,27,59,60,61,66,101,104,108,110,114,162,181],mindisp:113,mindispar:101,mindist:[22,24,128,142,149,154,201],mindistance_:149,mindistbetweenblob:128,mindivers:128,mine:[27,171,183],mineigenv:193,mineigthreshold:[201,219],minellips:52,minenclosingcircl:[51,154,158],minhessian:[17,18,19,20],minhitr:97,minidx:123,minim:[33,40,60,61,63,76,81,82,97,101,105,106,112,114,118,120,123,127,135,137,149,153,154,157,162,183,189,201,213,219],minima:195,minimal_perimet:162,minimum:[3,23,30,33,39,43,44,60,62,81,96,101,111,113,114,115,118,123,124,128,137,138,141,142,145,146,148,149,153,154,155,157,159,161,162,167,181,183,186,189,192,193,194,195,197,201,212,214,216,219,223],mininertiaratio:128,mininlierscount:101,minlinelength:154,minlinlength:44,minloc:[39,123,145,195],minmargin:128,minmaxbuf_:201,minmaxidx:116,minmaxloc:[23,39,56,96,116],minneighbor:[146,186,197],minnesota:111,minor:[114,143],minprob:114,minradiu:[142,154],minrect:52,minrepeat:128,minscal:164,minsdkvers:[60,61],minsiz:[142,146,186,193,197],minthreshold:128,minu:[9,12,14,32,101,119,124,159,186,187],minus:13,minusdelta:117,minusstep:117,minut:[59,60,67,74],minv:128,minval:[39,56,96,123,145,195],mip:[59,60,231],mirror:[13,155,190],misc:117,misc_training_alg_param:182,miscellan:158,misclass:171,misclassif:[82,171,172,175,183],misclassifi:[82,171,172,181],mismatch:62,miss:[8,50,61,64,66,69,74,97,101,114,142,143,152,154,155,171,172,175,176,177,178,180,181,182,183,196],missing1:181,missing2:181,missing_mask:182,missingdatamask:[171,172,175,181],mistak:[68,172],mitzel09:217,mitzel:217,mix:[11,27,35,59,62,66,80,114,154,155,165,178,192,207],mix_train_and_test_idx:177,mixchannel:[35,116,119],mixchannelsmixchannel:35,mixtur:[114,149,165,174,180,187,201,219],mkdir:[62,63,64,69,71],mkv:32,ml_init:114,mlat:113,mldata:177,mle:174,mll:177,mloadercallback:61,mlp:179,mm2003:149,mmx:124,mobil:60,mock:[142,146,191],mod:118,mode:[0,3,10,11,59,60,75,76,80,95,97,112,118,120,122,123,125,137,141,142,145,146,147,148,149,152,155,156,159,162,170,189,192,199,201,216,219,222,223],model0:109,model1:109,model:0,model_info:106,models_voc2007:187,modern:[10,68,74,123,124],modif:[8,10,11,13,60,106,108,109,110,120,128,141,142,154,155,157,159,192,202],modifi:[3,10,13,30,61,62,64,66,69],modify_a:123,modular:119,module_nam:60,modulenam:114,modulo:123,mog2001:[149,201],mog2004:[149,201],mog2:114,moir:156,moment:[10,13,32],momentum:179,mondai:182,monitor:66,monochrom:[112,149],monocular:156,monolith:171,monoton:[106,117,123,124],monotyp:66,montreal:149,mopencvcallback:226,mopencvcameraview:61,more:[0,3,7,9,10,11,12,13,21,22,31,32,33,34,35,36,37,38,40,41,42,43,44,47],moreno:101,moreov:[8,10,13,75,104,108,175],morph:170,morph_blackhat:[49,141,155],morph_clos:[49,141,155],morph_cross:[33,155],morph_dil:[141,155,192],morph_elem:49,morph_ellips:[33,155],morph_erod:[141,155,192],morph_gradi:[49,141,155],morph_hitmiss:155,morph_open:[49,141,155],morph_oper:49,morph_rect:[33,155],morph_siz:49,morph_tophat:[49,141,155],morph_x:49,morphology2:155,morphology_oper:49,morphologydefaultbordervalu:[155,192],morphologyex:49,mosaic:[3,112,211],mose:136,most:[2,3,8,10,13,27,31,33,34,41,47,59,60,61,64,66,74,81,82,86,93,101,104,106,108,110,114,115,117,118,119,120,121,123,124,125,126,128,136,138,142,144,149,152,154,155,156,162,165,171,172,174,177,179,180,181,182,183,201,202,217,219,231],mostli:[3,9,11,61,74,101,114,123,172],motempl:219,motion_model:111,mous:[76,150,153,161,222],mouse_and_match:161,mousebutton:222,mousebuttonpress:222,mousebuttonreleas:222,mousecallback:[153,222],mousedblclick:222,mouseev:221,mousemov:222,mousescrolldown:222,mousescrollup:222,mouth:106,mov:32,move:[0,3,12,25,30,33,39,40,49,75,115,117,118,120,125,149,153,154,156,159,186,190,194,196,201,219],movement:106,mover:157,movewindow:150,mp3:32,mp4:3,mpeg1:149,mpeg2:149,mpeg4:149,mpeg:152,mr1:[62,64],mrl:186,msb:118,msbuild:64,mse:[27,31,66],mser:128,mset:116,msg:[0,106,108,109,110,124],msg_type:[137,189],msr:211,mssim:[27,31],mssimv:31,msysgit:74,mtx:[13,114,119,123,124,145,199],mtxq:101,mtxr:101,mu02:162,mu03:162,mu11:162,mu12:162,mu1:[27,31],mu1_2:[27,31],mu1_mu2:[27,31],mu20:162,mu21:162,mu2:[27,31],mu2_2:[27,31],mu30:162,much:[3,8,9,12,13,27,31,38,44,57,60,66,74,80,82,101,106,108,110,117,118,121,123,131,146,149,155,156,157,171,172,179,184,186,191,192,197,201,219],mug:119,muja2009:136,muja:136,mul:[11,27,31],muller:179,mulligan:211,mulspectrum:116,multi:[10,63,97,99,113,114,118],multi_band:207,multi_probe_level:136,multichannel:[10,13,123,142],multiclass:175,multicor:[3,97],multicultur:66,multidimension:[13,114,126,127,129,163],multigrid:113,multimedia:[74,186],multipl:[7,8,10,11,12,13,26,27,32,33,48,65,66,74,75,80,81,82,86,101,106,111,114,119,120,121,123,125,128,137,142],multiplex:[3,149],multipli:[0,12,27,42,50,81,101,114,116,117,120],multiplyacc:160,multiprocessor:143,multiresolut:211,multivari:174,multiview:211,multranspos:116,mushroom:172,must:[0,9,11,15,25,34,61,64,66,74,75,82,86,95,97,101,104,106,108,109,110,111,112,114,118,120,121,122,123,124,128,131,135,136,137,138,141,142,145,146,147,149,151,152,154,155,156,157,159,161,162,165,166,167,170,171,172,175,176,179,180,182,183,189,191,192,193,194,195,196,197,199,201,212,213,219],mutat:62,mutex:114,mutual:[101,123],mvbegin:123,mview:226,mwc:123,mx1:123,my_funct:114,my_jni_lib1:61,my_jni_lib2:61,my_work:[63,67,71],my_working_directori:67,myactiv:226,myaffinetransform:114,myagkov:[2,4,15,21,28,29,57,66,73,79,83,85,90],myalgo:114,mycheckmatcontinu:114,mycvoldfunc:114,mydata1234:9,mydata:[9,125],myellips:6,myfil:114,myfilledcircl:6,myharris_copi:23,myharris_dst:23,myharris_funct:23,myharris_maxv:23,myharris_minv:23,myharris_qualitylevel:23,myharris_window:23,myhugematrix:125,myimag:[12,114],mylin:6,mymodul:114,mymovi:[3,112],mypictur:[3,112],mypolygon:6,myretina:3,myself:[106,107],myshitomasi_copi:23,myshitomasi_dst:23,myshitomasi_funct:23,myshitomasi_maxv:23,myshitomasi_minv:23,myshitomasi_qualitylevel:23,myshitomasi_window:23,mysolutionnam:75,mysteri:114,myvideo:3,mywindow:[88,89,91,92,222,223],n_detect:128,n_featur:[139,212],n_point:166,nactive_var:181,naiv:[111,123],naive_bay:111,naluframingtyp:149,name:[0,6,9,10,11,13,27,30,31,32,33,38,39,40,60,61,62,63,64,65,66,68,69,72,74,75,76,77,80,81,89,97],nameb1:151,nameb2:151,namedwindow:[5,7,11,16,22,23,24,25,30,31,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,62,65,69,70,72,75,93,96,119,122,150,152],namefont:151,nameless:125,nameofproject:77,namespac:[5,7,9,11,17,18,19,20,22,23,24,25,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,65,69,70,72,75,76,80,81,82,84,88,89,91,92,101,103,104,106,108,109,110],nan:[114,121,123,124,222,223],naomi:108,narrai:114,narrow:101,narrow_preset:101,nativ:59,native_doubl:143,native_library_nam:[62,64,68],nativecameraview:61,nativeobj:62,natur:[0,3,13,33,39,41,60,74,106,123,148,192],navier:203,navig:[64,66,68,69,74,75,77,121,125],navneet:146,nbin:[146,191],nchannel:[12,120,166],nclass:164,ncluster:[115,165,174],ncol:[10,114],ncontour:117,ndarrai:114,ndim:114,ndisp:[137,189],ndispar:[101,137,189],ndk:[59,60,61],ndkroot:[59,60],ndmatrix:120,ndst:123,nearest:[19,93,104,106,118,119,120,124,127,133,134],nearli:[62,64,172],neat:[66,74],necessari:[3,6,36,46,61,64,110,112,114,123,124,125,141,155,172,182,184,192,194,228],necessarili:[97,106,118,120,123,159,170,180,199],need:[0,3,5,7,8,9,10,11,12,13,25,27,30,31,32,33,35,39,40,41,43,44,45,48,50,57,58,59,60,61],neeed:22,neg:[14,34,42,48,76],negat:[114,186],neglig:[106,108,110],neighbor:[12,15,19,27,34,47,101,104,106,120,127,128,134],neighborhood:[7,34,106,128,131,142,149,154,155,156,159,166,169,192,193,201,203,219],neighborrespons:176,neighbour:159,neighbourhood:[113,131,192],neighour:196,neither:[94,95,106,108,109,110,118,123],nelem:114,neon:[59,60,63,231],nerv:106,nest:[121,125,162],net:[80,182,219],network:[3,65,111,112,152,171,177],neural:[3,112,171,177],neuron:179,neurosci:106,never:[66,75,108,123,124,151],nevertheless:[8,9,10,11,13,27,31,32,65,66,74,75,81],new_camera_matrix:[101,156],new_cent:[106,108,110],new_cn:120,new_dim:120,new_imag:7,new_imag_s:101,new_image_s:101,new_node_nam:121,new_plane_yaxi:223,new_points1:101,new_points2:101,new_row:120,new_siz:[101,120],new_val:159,new_yaxi:223,newbi:62,newborn:106,newcameramatrix:[101,156],newcn:120,newdim:120,newer:[11,60,77,97,144],newfram:[149,201],newimag:104,newimages:101,newimgs:101,newlabel:104,newli:[8,62,69,72,114,123,149,201,219],newman:111,newparamet:112,newpoints1:101,newpoints2:101,newrow:120,newval:[101,159],nexampl:3,next:[0,10,12,27,39],next_fre:118,next_nod:172,nextgraphitem:116,nextimag:0,nextimg:[149,201,219],nextpt:[149,201,219],nexttreenod:116,nfeatur:[131,139,184],nguyen:179,nib:80,nice:[10,13,14,65,70,72,74,76,106],nicer:106,night:66,nightli:[59,66],nil:[62,77],nimag:157,nine:10,nineteen:10,nister2008linear:131,nit:[27,113],nlevel:[131,139,142,146,191],nlinearsampl:82,nmake:74,nmatch:[139,191],nmixtur:[149,201,219],nng:170,nninterpol:156,no_input_scal:179,no_output_scal:179,no_uv:123,noarrai:[101,114,115,119,123,131,142,154,156,157,160,162,174,184,223],nobutton:222,nocont:66,noctav:[131,184],noctavelay:184,node:[9,114,118,120,121,125,128,129,164,165,171,172,173,181,182,186],nodenam:125,nodes_:166,noguer:101,nois:[0,3,4,11,31,33,34,40,43,45,47,81,97,101,111,112,142,154,155,159,172,179,193,201,202,219],noisesigma:[149,201,219],noisyi:11,non:[9,10,27,40,46,59,66,81],non_linear_svm:82,nonatom:80,none:[0,66,101,104,105,106,108,110,115,117,118,120,121,122,123,124,125,151,152,153,154,155,156,157,159,160,161,162,169,170,171,175,179,181,182,193,203,219],nonexist:9,nonfre:[17,18,19,20,99,114,128,184],nonmax:128,nonmaxsuppress:[128,131,139],nonzero_row:123,nonzerorow:123,nor:[106,108,109,110,114,118,123],norm:[0,39,114,116],norm_0_255:[106,108,109],norm_buf:147,norm_ham:127,norm_hamming2:[127,131],norm_inf:[123,145],norm_l1:[123,127,145,196],norm_l2:[17,123,127,139,145,147,199],norm_l2sqr:196,norm_minmax:[25,35,36,37,39,106,108,109,123],norm_typ:[123,147],normal:[8,11,25],normalbayesclassifi:180,normalis:111,normaliseoutput:[3,112],normalized_respons:101,normtyp:[123,127,145,147,199],nose:106,not_draw_single_point:[19,20,130],notabl:119,notat:[12,81,96,114,121,125],notch:66,note:[3,6,10,12,30,40,45,46,47,48,49,50,60,61,62,64,66,74,75,76,80,93,96],noth:[0,13,34,66,96,106,108,109,110,114,118,119,120,123,124,151,153,157,182,194,209,214],notic:[7,8,14,34,35,36,38,39,40,45,47,50,58,101,106,108,109,110,114,121,131,159,172,181],notif:60,notion:155,notitlebar:61,notori:[45,47,48],noun:62,novel:131,novemb:106,now:[0,1,3,5,7,8,9,11,12,13,14,16,25,27,30,31,32,33,34,35,36,41,44,47,48,49,50,58,59,60,62,64,65,66,68,69,70,72,74,75,76,77,81,82,93,96,103,104,105,106,107,108,109,110,114,117,119,120,121,123,127,128,137,141,142,145,146,147,155,162,186,191,192,193,194,197],npair:123,nplane:114,npleas:3,npoint:101,npp:141,nprogram:3,npt:[6,117],nr_plane:[137,189],nrepl:62,nrframe:0,nrow:[10,114],nrplane:[137,189],nrun:64,nsampl:123,nscale:219,nsdata:78,nshadowdetect:[149,201,219],nsize:120,nsrc:123,nstruct:164,ntamd64:60,nth:66,nthen:3,nthi:44,nthread:124,nto:3,ntotal:120,ntraining_sampl:82,ntu:183,ntx86:60,nu02:162,nu03:162,nu11:162,nu12:162,nu20:162,nu21:162,nu30:162,nu_svc:183,nu_svr:183,nuanc:123,nugrid:183,nul:118,num:97,num_band:207,num_class:166,num_compon:[104,106,108,109,187],num_errs_per_measur:213,num_errs_per_measurement_:213,num_featur:136,num_filt:187,num_imag:213,num_images_:213,num_inli:212,num_it:137,num_lay:212,num_layers_descr:212,num_leav:166,num_leaves_:166,num_matches_thresh1:212,num_matches_thresh1_:212,num_matches_thresh2:212,num_matches_thresh2_:212,num_nod:166,num_octav:212,num_octaves_descr:212,num_params_per_cam:213,num_params_per_cam_:213,num_part_filt:187,num_quant_bit:166,num_quant_bits_:166,num_sig:166,num_tre:166,numband:207,number:[0,3,6,8,9,10,11,12,13,14,22,24,27,31,33,34,35,36,37,38,41,42,44,50,66,75,76,78,81,82,93,96,97,101,104,106,108,110,111,113,114,115,117,118,119,120,121,122,123,124,125,127,128,131,135,136,137,138,139,141,142,143,145,146,147,148,149,152,154,155,156,157,159,160,162,164,165,166,171,172,174,175,176,178,179,180,181,182,183,184,186,187,189,190,191,192,193,195,196,199,201,202,212,213,219,222,223],number_of_channel:114,number_of_image_channel:101,number_of_negative_sampl:97,number_of_positive_sampl:97,number_of_sampl:[97,176,196],number_of_stag:97,numberlist:131,numberofdispar:101,numdispar:101,numdistcoeff:101,numer:[13,30,37,40,42,81,114,119,121,123,125,157,161,162,172,175,178,186,219],numeric_limit:[114,127],numfeatur:187,numinitializationfram:149,numit:[149,201],numlevel:[149,201],numneg:97,numpi:[13,71,74,114,120,162],numpo:97,numsampl:111,numsid:223,numstag:97,numthread:187,nvbin:146,nvcc:138,nvcuda:74,nvidea:146,nvidia:[27,59,60,143],nview:164,nvve_avg_bitr:149,nvve_clear_stat:149,nvve_configure_nalu_framing_typ:149,nvve_deblock_mod:149,nvve_disable_cabac:149,nvve_disable_sps_pp:149,nvve_dynamic_gop:149,nvve_force_idr:149,nvve_force_intra:149,nvve_idr_period:149,nvve_p_interv:149,nvve_peak_bitr:149,nvve_preset:149,nvve_profile_level:149,nvve_qp_level_inter_b:149,nvve_qp_level_inter_p:149,nvve_qp_level_intra:149,nvve_rc_typ:149,nvve_set_deinterlac:149,nx1:[101,114,156],nx2:[101,162],nx3:[101,114],nxn:101,obj:[20,114,125],obj_corn:20,obj_host:146,objbuf:146,objdetect:[64,84],object1:162,object2:162,object:[0,1,3,7,8,9,10,11,12],object_point:101,objectdescriptor:166,objectkeypoint:166,objectpoint:[0,101],objectsbuf:146,obliqu:[117,151],obscur:114,observ:[0,6,7,8,9,10,11,14,27,31,32,35,36,37,39,40,44,45,46,49,65,66,74,82,101,103,106,112,118,125,154,156,159,172],obsolet:[74,97,101,114,120,125,155,165,169,176],obtain:[14,37,38,40,44,45,48,49,57,62,68,81,82,91,97,101,106,123,135,137,139,142,145,152,155,162,172,174,175,178,181,183,186,191,207,219],obviou:[66,82,159,172],obvious:[47,62,101,106,114,156,159],occ_thr:219,occasion:66,occasionali:66,occlud:101,occlus:[106,149,201,219],occupi:[114,118,131,159,182],occur:[0,3,10,66,111,112,124,149,160,172,181,219],occurr:[0,111,172],ocl:99,oclchannel:190,oclmat:[184,189,190,191,192,193,194,195,196,197],oclmatexpr:190,oclmatrix:190,ocltyp:190,oclud:95,octav:[103,105,128,131,139,184],octave_row:[139,184],octob:137,ocv:[104,105,114,141,222],ocvjardir:64,ocvlibdir:64,odd:[8,34,42,47,101,141,142,155,162,192,202],of2:102,off:[10,11,31,32,60,61,62,64,66,74,95,101,111,124,128,131,171,172,182,219,222,223],offer:[10,13,34],offici:[60,63,66,74,105],offset1:166,offset2:166,offset:[8,106,108,110,114,117,123,125,155,162,190,222],offset_h:[106,108,110],offset_pct:[106,108,110],offset_v:[106,108,110],often:[7,27,31,59,103,106,109,114,118,119,120,138,144,155,159,171,174,178],ogl:116,okai:[66,69,74],old:[0,11,13,15,66,74,82,97,101,104,106,114,117,123,146,153,155,157,162,178,186,197,219],older:[13,60,66,97],oldmat:114,olshen:172,omit:[66,75,117,123,143,146,156,162,191],on_chang:[151,153],on_mous:[151,153],on_off:124,on_opengl:151,on_trackbar:30,onc:[0,3,9,13,27,28,33,58,59,62,64,65,66,74,75,76,80,89,101,106,108,114,119,123,141,155,156,172,179,181,192],oncamerafram:61,oncameraviewstart:61,oncameraviewstop:61,onchang:153,oncreat:61,ondestroi:61,one_class:183,onewaydescriptor:164,onli:[0,3,6,7,8,9,10,11,12,13,14,19,20,27,30,31,32,34,35,36,38,39,40,43,44,45,47,48,60,61,62,65,66,69,74,75,76,80,81,82,95,97,101,103,104,105,106,108,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,125,127,128,129,130,137,138,139,141,142,144,146,149,151,152,153,154,155,156,157,159,162,165,167,171,172,174,175,176,178,179,180,181,182,183,184,186,189,190,191,192,193,194,196,199,201,206,210,212,216,217,219,222,223,229],onlin:27,onmanagerconnect:[61,226],onmous:153,onoff:124,onopengldraw:[151,153],onpaus:61,onresum:[61,226],onto:[40,41,97,106,170,216],oob:181,oob_error:181,oop:62,opac:[142,222,223],opaqu:152,open:[0,3,9,31,32,34,44],openalea:66,opencl:[99,190],opencl_kernel:194,opencv1x:119,opencv2:[3,8,9,11,17,18,19,20,22,23,24,25,27,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,65,67,70,72,75,76,77,80,81,82,84,88,89,91,92,103,106,108,109,110,114,119,125,128,152],opencv4adroid:59,opencv_2:[59,231],opencv_:[64,75],opencv_build_3rdparty_lib:152,opencv_calib3d249d:75,opencv_calib3d:69,opencv_camera_modul:61,opencv_contrib249d:75,opencv_contrib:[3,69],opencv_cor:[3,69],opencv_core249d:75,opencv_debug:75,opencv_dir:[64,74,75],opencv_extra:187,opencv_features2d249d:75,opencv_features2d:69,opencv_flann249d:75,opencv_flann:69,opencv_fold:3,opencv_gpu249d:75,opencv_haartrain:97,opencv_highgui249d:75,opencv_highgui:[3,69],opencv_imgproc249d:75,opencv_imgproc:69,opencv_install_modul:61,opencv_java244:[62,64],opencv_java:229,opencv_legaci:69,opencv_legacy249d:75,opencv_lib:[69,70],opencv_lib_typ:61,opencv_ml249d:75,opencv_ml:69,opencv_modul:19,opencv_nonfree249d:75,opencv_objdetect249d:75,opencv_objdetect:69,opencv_ocl249d:75,opencv_opencl_devic:194,opencv_perform:97,opencv_photo249d:75,opencv_sourc:[123,157,159,162,176,183],opencv_source_cod:[101,111,114,115,117,123,125,126,127,128,129,131,133,137,141,142,146,149,152,153,154,155,156,157,159,161,162,165,166,184,186,191,197,203,210,219],opencv_source_codesamplescppletter_recog:166,opencv_stitching249d:75,opencv_storag:[0,3,9,121],opencv_superres249d:75,opencv_traincascad:[97,186],opencv_ts249d:75,opencv_version_2_4_10:229,opencv_version_2_4_11:229,opencv_version_2_4_12:229,opencv_version_2_4_13:229,opencv_version_2_4_2:229,opencv_version_2_4_3:229,opencv_version_2_4_4:229,opencv_version_2_4_5:229,opencv_version_2_4_6:[61,226,229],opencv_version_2_4_7:229,opencv_version_2_4_8:229,opencv_version_2_4_9:229,opencv_video249d:75,opencv_video:69,opencv_videostab249d:75,opencv_visual_studio_and_libfacerec:105,opencvdoc_themesbluestaticdefault:66,opencvlibrari:80,opencvload:[61,226,229],opencvreleasefold:112,openexr:[3,65,74,112],openexrimages_hdr_retina_tonemap:[3,112],openfabmap:102,openfilestorag:116,opengl:[101,116],opengldrawcallback:[151,153],openjdk:60,openmp:124,openni2:74,openni:74,openni_captur:[95,152],openni_include_dir:95,openni_lib_dir:95,openni_prime_sensor_module_bin_dir:95,opensourc:[74,106,108,109,110],oper:[0,5,7,9,10,11],operand:[114,123],operat:122,operations_on_arrai:35,opl:112,oplandiplparvo:[3,112],oplandiplparvoparamet:112,oppon:126,opponentsift:126,opportun:62,oppos:106,opposit:[6,114,117,119],opt:[0,60,62],opt_flow:219,optflow_farneback_gaussian:219,optflow_lk_get_min_eigenv:219,optflow_use_initial_flow:219,optic:[0,101,114,149,155,169,194,201,217,219],optical_flow:149,opticalflow:217,opticalflow_nvidia_api:149,optim:[7,8,10,12],optimum:[136,172],option:[0,3,10,12,13,27,32,33,36,39,41,48,50,59,60,61,62,63,64,66,69,71,74,75,76,77,80,97,101,102,111,114,117,118,119,120,121,122,123,125,127,128,129,131,139,141,142,145,147,148,149,151,152,153,154,155,156,157,159,160,162,165,170,171,172,174,175,176,179,181,182,183,184,190,191,192,193,195,197,199,201,212,219,222,223],oracl:[60,64],orb:[126,127,128],ord:[172,178],order:[0,3,13,17,18,19,26,32,34,37,38,47,60,61,64,66,72,73,74,81,82,86,87,88,94,95,96,97,101,104,106,112,114,117,118,120,121,123,125,127,131,136,138,139,141,142,146,152,154,155,156,157,159,162,172,175,176,178,180,182,183,186,191,192,196,199,212,213,219],ordinari:120,org:[3,14,35,59,61,62,63,64,66,68,95,106,108,109,110,112,114,115,117,119,121,123,125,131,151,154,155,160,162,179,203,219],organ:[36,106,108,109,110,118,123,162,192],organis:106,orient:[8,48,80,101,118,126,128,130,131,139,146,156,162,182,184,187,191,219,223],orientationnorm:131,orig_resol:210,origin:[1,3,7,8,17,25,27,31,33,34,35,38,40,41,44,45,48,49,50,58,62,72,101,106,108,109,110,111,112,113,114,117,118,119,120,123,124,142,149,151,153,154,155,156,159,162,166,167,169,170,172,176,178,179,181,183,186,196,199,201,213,216,219,222,223],original_num_class:166,original_num_classes_:166,origwins:186,orl:106,orr:179,orthogon:[101,106,123,154],orthonorm:106,ortiz:131,ostream:[9,149,166],other:[0,3,8,10,11],otherbuttontitl:77,otherwis:[0,6,10,13,14,31,32,33,34,50,58,59,60,62,65,66,72,74,75,101,106,108,110,114,117,118,119,120,121,123,124,125,133,137,138,141,142,143,144,145,147,149,152,153,154,155,156,157,159,162,170,172,174,178,183,186,189,192,194,199,201,206,210,212,219,222],otsu:159,ouptut:93,our:[0,2,5,7,8,9],out:[0,2,3,7,8,9,10,11,12,13,14,15,27,28,31,32,33,35,38,39,40,47,49,50,58,59,60,61,62,64,66,68,70,72,74,75,77,78,82,85,86,101,106,108,110,111,112,114,118,119,120,121,123,124,127,128,129,139,141,147,151,155,156,157,159,162,179,181,184,186,191,192,193,213,219],out_cn:149,outcom:118,outdat:231,outer:[101,106,112,114,162],outer_iter:149,outer_iterations_:149,outgo:118,outimag:130,outimg:130,outlier:[101,123,127,137,155,156,171,183],outlin:[43,49,101,117,120,154,159,162,171,172],outperform:171,output:0,output_fold:[106,108,109],outputarrai:[101,103,113],outputarrayofarrai:[101,114,123,155,162,219],outputrejectlevel:186,outputvideo:32,outsid:[9,64,101,114,117,124,141,155,156,159,162,170,192],outstand:138,over:[10,12,13,14,31,33,38,39,41,42,66,69,76,89,106,111,114,119,123,128,131,149,154,155,156,159,161,171,172,181,182,186,187,192,201,216,219],overal:[97,105,106,159,171],overcom:[62,66],overdetermin:123,overfit:[172,181],overflow:[45,47,114,123,137,155,189,199],overhead:[114,123,144,152],overlai:[42,151,223],overlap:[12,33,66,82,106,108,109,114,144,159,161,169,170,192],overlap_threshold:187,overlapthreshold:187,overload:[31,32,138],overrid:[61,66,101,114,121,165,171,172,226],overridden:182,overriden:[114,155],overtrain:97,overwrit:[104,111],own:[3,9,10,13,21],owner:[106,108,110,119],ozan:90,p3f:13,p8700:27,p_interv:149,packag:[3,59,60,61],packuswb:119,pad:[8,41,57,114,118,123,137,146,160,166,189,191,194,219],paddusb:119,page:[3,59,60,63,66,68,71,74,75,76,99,106,107,131,138,152,154,155,211,219],pageabl:138,pagebreak:[2,4,15,21,26,28,29,57,66,73,79,83,85,86,87,90],pai:104,pain:68,paint:[101,117],pair:[27,35,40,44,46,62,93,101,104,113,114,118,120,121,123,125,127,129,131,137,144,152,156,167,172,184,189,206,209,212,213],pair_count:123,pairwis:[212,213,214],pairwise_match:[206,212,213],pairwise_matches_:213,pami2005:106,pami:[101,106,149,162,187,219],pan:[76,151],pane:60,panel:[59,77,151,153],pano:[207,210],panoconfidencethresh:210,panoram:211,panorama:[128,212,213],papenberg:149,paper:[3,66,101,106,112,126,127,131,137,149,159,162,167,183,184,186,187,189,217,219],paradigm:[62,123],parallel:[0,3,27,69,74,101,123,124,136,144,159,172,175,176,179,180,181,183,184,186,187,194,212,219],param1:[101,120,154,155,159,179],param2:[101,120,154,155,179],param3:155,param4:155,param:[81,82,112,120,128,135,136,149,151,152,153,162,164,165,166,171,172,175,179,181,182,183,184,193],param_1:43,param_2:43,param_id:183,param_nam:114,paramet:[0,1],parametr:159,paramhelp:114,paramid_1:152,paramid_2:152,paramtyp:114,paramvalue_1:152,paramvalue_2:152,parasolcells_beta:[3,112],parasolcells_k:[3,112],parasolcells_tau:[3,112],parent:[114,118,121,153,162,165,170,172,190],parenthes:[13,114,124],parenthesi:75,pari:219,parlanc:62,pars:[121,125,149],parser:149,part:[0,3,8,9,13,32,36,40,42],part_idx:166,parti:[74,75,124],partial:[47,101,106,114,117,118,123,155,183,187],particip:[106,171],particular:[36,39,42,81,82,95,96,101,104,106,108,110,114,118,120,121,123,131,144,155,156,159,171,176,178,179,182,183,186,187,192,194,211,219,223],particularli:[58,64,84,179],partli:[3,114,118],parvocellular:[3,112],pasperson:97,pass:[0,3,6,10,11,13,27,31,32,44,61,66,74,75,80,81,96,97,101,106,108,112,114,115,117,118,119,120,121,123,124,127,129,131,136,138,141,142,144,151,152,153,154,155,156,157,159,165,172,174,175,176,179,181,182,183,184,186,187,192,194,196,199,213,219,222],past:[3,64,69,86,106,219],pat:32,patch:[39,131,142,149,156,157,161,164,166,201,202,219],patch_data:166,patch_height:[164,166],patch_siz:[126,157,164,166],patch_width:[164,166],patchgener:[164,166],patchsiz:[131,139,156,164],patchtyp:156,patent:[106,185],path:[0,3,11,40,41,42,45,46,48,49,58,59,60,61,62,63,64,65,66,68,69,71,72],path_to_imag:38,path_to_opencv:61,path_where_ndk_is_plac:[60,61],pathwai:112,patianc:82,patient:[59,74,182],patrick:[108,110],pattern:[0,2,14,80,97,101,104,105],pattern_s:101,pattern_was_found:101,patternfound:101,patterns:101,patternscal:131,patterntyp:0,patternwasfound:101,paul:[97,111,186],paus:76,pavlenko:[2,4,15,21,28,29,57,66,73,79,83,85,90],pbm:[65,152],pca:[106,109,116],pca_config:164,pca_desc_config:164,pca_descriptor:164,pca_dim_high:164,pca_dim_low:164,pca_filenam:164,pca_hr_config:164,pca_lda_with_gnu_octav:106,pcabackproject:123,pcacomput:123,pcacomputevar:123,pcafilenam:164,pcaproject:123,pcaset:123,pch:[77,80],pclcontext:200,pcldevic:200,pclplatform:200,pdf:[59,66,74,82,101,106,119,173,175,181,183,186,219],peak:[31,34,160],peakbitr:149,pearson:106,pedro:[137,159],pefrom:190,penal:113,penalization_charbonni:113,penalization_perona_malik:113,penalization_tichonov:113,penalti:[101,183,187],pentland:106,peopl:[66,75,85,86,104,106,108,119,144,146,186,191],peopledetect:146,per:[0,3,7,8,10,13,27,31,32,34,36,40,64,78,82,101,106,114,115,119,120,123,124,127,131,139,140,142,146],perc:166,perceiv:131,percent:[106,108,110,114,175],percentag:[101,123,136,172,181],percept:[3,31,103,112],perceptron:179,perceptu:13,perf:194,perfect:[31,37,73,106],perfectli:[0,142,202],perfom:190,perform:[0,3,5,7,8],performance_gpu:74,perhap:[97,155],perimet:[101,162],period:[3,112,149,151,153,202],periphear:112,peripher:[3,112],permiss:[60,61,106,108,109,110,127,129,139,152,191],permit:[65,106,108,109,110],permut:[123,142],perri:[108,110],persist:[104,105,116],person0:[104,106,108,110],person1:104,person:[21,66,104,106,108,110,219],perspect:[97,101,108,110,119,123,137,142,156,193],perspectivetransform:[16,20,101,116],perviewerror:0,peter:[106,113],peucker:162,peucker_algorithm:162,peura:167,pframe:149,pgh:167,pgm:[65,106,108,110,152],pgrid:183,phase:[8,77,113,116],phase_correl:160,phasecorrel:158,phasecorrelater:160,phd:[3,106,112],philipp:[104,106,108,109,110],phillip:106,phone:60,phonon:74,photographi:99,photoreceptor:112,photoreceptorslocaladaptationsensit:[3,112],photoreceptorsspatialconst:[3,112],photoreceptorstemporalconst:[3,112],physic:[101,172],pic1:44,pick:[41,105,136,173],pictur:[3,13,34,38,46,48,49,60,66,81,82,101,106,154,157,159,170],pictyp:149,pid_xxxx:60,piec:[7,76,106,114,170],piecewis:[117,172],pierr:173,pietikainen:106,pii:11,pil:11,pin:[76,138],pincushion:101,pinehol:101,ping:[106,108,110],pinhol:[0,101],pinva:114,pipelin:[194,205,208,210],pitch:[101,138],pitt:[108,110],pivot:123,pix1:114,pix2:114,pix:114,pix_roi:155,pixel:[0,3,5,6],pixel_pack_buff:122,pixel_unpack_buff:122,pixval:120,pkg:[69,71],pkgconfig:63,place:[8,10,12,27,36,42,46,62,66,74,75,80,97,101,104,111,113,114,118,119,123,141,142,155,156,159,160,175,186,192,223],placehold:[152,153],placement:187,plai:[35,59,61,66,75,110,112,120,155,228,230,231],plain:[12,62,114,119,121,123],plan:[6,60,66,69,74,104,114],planar:0,plane:[0,1,8,11,36,44,80,81,82,94,101,114,120,142,146,147,155,157,159,170,183,191,193,210,216,223],plane_ar:101,planeprojector:216,platform:[13,59,60,61,63,67,74,105,106,108,110,114,120,124],platform_id:200,platforminfo:200,platformsinfo:200,pleas:[3,26,33,41,43,47,59,61,66,76,87,94,95,97,103,104,105,106,108,109,110,112,121,144,160,181],plexiform:112,plot:[36,44,47,58,106,157],plu:[0,7,31,48,66,73,75,82,101,109,118,120,124,142,179,187,197],plug:[60,76],plugdev:60,plugin:[11,59,60,61],plusdelta:117,plusstep:117,ply:[91,222,223],png:[13,16,49,62,64,65,66,69,81,82],pnggauntlet:66,pngoutput:97,pnp:101,pock:[217,219],poggio:106,point1:[117,223],point2:[117,223],point2d:[101,114,160],point2f:[0,13,16,20,22,24,48,51,52,55,56,96,101,114,115,128,156,162,164,201,216],point2i:[114,223],point3d:[114,222,223],point3f:[0,1,13,88,91,92,96,101,114,223],point3i:114,point:[0,3],point_count:101,point_siz:[222,223],pointbuf:0,pointcollect:129,pointcount:101,pointer:[3,10,11,12,13,76,78,96,114,115,117,118,119,120,121,122,123,124,125,138,141,145,149,151,152,153,155,157,162,167,170,171,172,176,178,181,182,186,190,192,195,200,222],pointidxsofclust:133,pointlessli:66,pointmat:114,pointpolygontest:[56,158],points1:[16,101,119],points1project:16,points2:[16,101,119],points4d:101,points_per_colum:101,points_per_column:101,points_per_row:101,points_v:201,pointsiz:151,pointsmat:96,polar:[44,147,156],polar_transform:156,polartocart:116,poli:[117,162,183,223],polici:122,poligon:222,pollut:[3,75],poly_n:[113,219],poly_sigma:[113,219],polydata:88,polygon:[6,14,51],polylin:[14,116],polymorph:[114,119],polyn:[149,201],polynomi:[113,123,156,183,219],polysigma:[149,201],pool:[120,124],poor:101,poorli:213,pop:[32,59,69,118],pop_back:[106,108,109],popcount:124,popul:[14,76],popular:[13,59,63,66,106,114,159,171,175],port:[27,28,62,70],portabl:[65,74,152],portion:[118,155,175,178],portrait:80,pos_i:110,pos_x:110,pose:0,pose_count:164,pose_idx:164,posecount:164,posit:[0,14,22,25,27,31,33,34,39,42,43,46,48,76,91],possib:155,possibl:[0,3,8,9,10,11,13,25,27,32,33,39,40,50,59,60,65,66,71,74,75,80,81,82,83,94,95,97,101,104,106,108,110,113,114,115,118,119,120,121,122,123,124,125,127,128,130,131,136,139,141,144,146,149,152,154,155,156,157,159,160,162,165,170,171,172,174,179,181,183,186,191,192,194,196,197,199,201,210,211,212,219],post:[0,10,101,113,137,189],poster:155,posterior:[165,166,174],posteriori:201,posteriors2_:166,posteriors_:166,postfix:114,postprocess:219,postprocess_window:219,posvect:101,potenti:[7,13,106,114,179],pow:[23,116],power:[27,28,64,66,68,74,75,82,86,104,106,119,123,124,144,148,160,171,172,194,199],powerful:[83,86],powerpc:124,poynton:159,ppm:[65,152],ppt:6,pptr:124,ppx:208,ppy:208,practic:[0,10,13,30,31,39,66,101,104,106,114,119,120,124,125,159,174],practition:106,pragma:80,prati:[149,219],pre:[11,44,60],prebuilt:[59,60,64,74],precalc_hashv:120,precalcidxbufs:97,precalcul:97,precalculated_idxs_buffer_size_in_mb:97,precalculated_vals_buffer_size_in_mb:97,precalcvalbufs:97,precis:[0,31,97,101,111,112,114,120,121,123,124,125,131,136,149,156,159,162,172,176,181,196,199,201,219],precomput:219,predecessor:50,predefin:[13,36,106,108,109,118,119],predetermin:0,predic:[115,123],prediciton:104,predict:[37,81,82],predict_al:183,predict_prob:177,predicted_confid:104,predicted_label:104,predictedlabel:[106,108,109],predictor:[171,178,181],predomin:106,prefer:[10,59,60,62,66,68,74,105,123,124,127,144,156,171,172,192],preferr:200,preffer:118,prefilt:101,prefilter_xsobel:[137,189],prefiltercap:101,prefix:[11,13,62,77,80,104,114,154,162,222],preliminari:[27,31,94,95,112,165,174],prepend:11,preprocess:[3,146,165,172,174,191],preprocessedinput:172,prerecord:31,prerequisit:27,presenc:[0,123,144],present:[0,3,8,10,26,27,31,32,37,47,60,65,66,73,86,112,121,167,179],preserv:[3,8,101,104,106,113,114,123,142,145,151,155,178,202],preset:[101,137,149,189],press:[0,7,30,34,40,41,42,46,50,59,60,61,65,68,69,72,74,76,80,89,97,151,153,180,222],pretend:155,pretti:[44,165,174],prev:[121,169,219],prev_featur:219,prev_pyr:219,prevent:[60,89,96],prevfeatur:219,preview:[59,61],previmg:[149,201,219],previou:[3,5,12,13,14,27,30,33,36,41,43,44,45,48,49,66,75,77,81,82,97,101,111,113,114,118,121,123,125,131,138,146,151,152,156,162,169,170,179,182,190,201,219,223],previous:[3,40,41,62,97,101,111,112,118,119,120,123,125,136,155],prevpt:[149,201,219],prevpyr:219,prevtimestamp:0,prevtreenod:116,price:[0,3,27,66],primari:[39,60,152,172],primarili:159,prime:[95,123],primesensor:[74,95],primit:74,princen:154,princip:[0,101,104,106,108,109,123,156,208,222],principal_component_analysi:123,principalpoint:101,principl:[61,101],prinicp:104,print:[9,10,15,31,62,66,106,108,109,110,114,118,120,123,124,131],print_statu:166,printabl:66,printf:[5,19,20,30,37,41,50,55,69,70,72,84,93,114,118,119,120,121,123,124,155,166],println:[62,64,68],prior:[3,60,64,65,66,74,101,106,108,109,110,111,118,149,155,171,172,181,192],priori:[172,201],prioriti:175,privat:[61,139,146,149,166,189,191,196,201,207,209,210,212,213,214,222,223,226],privit:122,prl:162,prob:[165,166,174],prob_imag:219,probabilist:43,probabl:[0,10,31,34,35,39,60,69,82,101,104,106,108,110,111,114,123,149,157,165,166,172,174,175,179,180,181],probe:[106,136],probimag:219,problem:[0,10,11,13,26,41,58,59,60,66,81],probs0:174,proc:[149,162,179,211,217,219],proce:[14,36,43,59,60,70,71,114,155,171],procedur:[3,34,38,39,40,42,50,66,81,97,101,118,121,125,142,154,155,165,172,173,174,175,179,181,182,183,186,191,193,219],proceed:[115,136,154,219],proces:189,process:0,process_video_fram:114,processimag:80,processnoisecov:201,processor:[27,124,231],procur:[106,108,110],produc:[0,5,7,11,14,30,34,36,47,50,60,63,69,97,101,111,114,119,120,123,125,127,131,143,155,171,184,199],product:[3,5,59,61,95,101,106,108,109,110,114,120,121,123,147,148,149,154,160,187,199,201,229],profession:76,profil:[62,194],profilelevel:149,profit:[106,108,110],program:[0,3,5,6,10,11,12,13,14,15,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,58,60,62,65,66],programm:[10,13,62],progress:[3,112,154],proj:222,projdirpath:60,project:[0,1,3,16,27],projectnam:80,projector_:216,projectorbas:215,projectpoint:[0,96,100],projectpoints2:101,projmatr1:101,projmatr2:101,projmatr:101,projmatrix:101,projpoints1:101,projpoints2:101,promin:[149,154,201],promot:[106,108,109,110],prompt:[60,62,74],prone:66,proof:106,prop:[75,223],prop_id:151,prop_valu:151,propag:[137,155,179,189],proper:[59,61],properli:[25,58,80,101,114,172],properti:[3,31,32,59,60,61,64,69,75,76,80,91,94,95,112,114,119,143,151,152,155,172,192,222,223],property_id:152,propid:152,proport:[151,155,162,181,183,192],proporti:75,propos:[3,66,106,112,131,186,187,211],protect:[66,114,126,127,128,129,133,149,163,164,172,178,181,207,212,213,214,216,226],protocol:80,prototyp:[151,153],prove:[149,162,201,219],provi:80,provid:[3,5,13,30,34,42,59,60,61,64,74,78,80,86,96,97,101,104,105,106,108,109,110,111,112,114,118,119,120,121,123,128,131,136,137,142,143,144,149,150,151,152,154,155,156,159,165,171,174,178,179,182,184,189,190,194,197,201,222,228,229],provok:124,proxi:[114,119],proxim:[142,181,197],prune:131,pruned_tree_idx:172,pseudo:[114,123],psgd:111,psnr:[27,29],psnrtriggervalu:31,psnrv:31,psu:[173,183,202],psx:192,psy:192,psychot:69,pt1:[14,44,88,114,117,154,223],pt2:[14,44,88,114,117,154,223],pt3:[88,114],pt_max:223,pt_min:223,pt_on_axi:223,ptemp_:166,ptr1:114,ptr2:114,ptr:[3,10,11,12,91,101,104,106,108,109,110],ptrnd:120,ptrstepf:138,ptrstepi:138,ptrstepszb:138,ptrstepszf:138,ptrstepszi:138,ptvec:1,ptx:[143,144],pub:[106,142,186,202],publish:[59,66,106,111,211,228,229],pull:66,punish:82,pure:[11,142,157,194],puriti:172,purpos:[0,8,13,27,31,33,36,40,44,47,48,61,97,106,108,110,114,118,120,121,123,129,159,174,229],push:[74,104,118,151],push_back:[0,13,19,20,104,106,108,109,110],pushmeet:219,put:[0,11,12,31,32,43,64,66,69,71,75,80,101,106,110,114,117,118,121,123,125,153,156,162,171,186,219],puttext:[0,14,34,110,116],puzzl:[61,75,226],puzzle15view:226,pygment:74,pyr_level:164,pyr_scal:219,pyramidstar:128,pyrbord:219,pyrdown:50,pyrlk_optical_flow:149,pyrscal:[113,149,201],pyrup:50,python2:[101,115,123,131,133,146,152,154,155,157,159,161,162,165,166,176,183,186,203,219],python:[13,63,64,66,67,71,74,101,104,105,106,108,110,114,115,117,118,119,120,121,123,124,125,128,131,133,146,151,152,153,154,155,156,157,159,160,161,162,165,166,167,169,170,171,172,174,175,176,179,180,181,182,183,184,186,203,219],pzge:111,pzgne:111,qin:136,qp_level_interb:149,qp_level_interp:149,qp_level_intra:149,qsort:118,qt3support:74,qtdir:74,qtkit:152,quad:[101,122,170],quad_edg:170,quad_strip:122,quadrangl:156,quadrant:[8,123],quadrat:[81,101,183],qualifi:62,qualit:171,qualiti:[0,3,23,31,66,97,101,149,152,154,172,201,210],quality_level:154,qualitylevel:[22,24,128,149,154,201],qualitylevel_:149,quantif:112,quantifi:38,quantil:175,quantit:171,quantiti:82,quantiz:[157,166],quantizationlevel:149,quantizevector:166,quarter:50,quartzcor:80,queri:[9,10,31,74,75,106,111,114,121,127,129,136,137,139,143,152,167,189,191],querydescriptor:127,queryfram:152,queryhistvalue_1d:167,queryhistvalue_2d:167,queryhistvalue_3d:167,queryhistvalue_nd:167,queryidx:[19,20,111,127],queryimag:129,queryimg:111,queryimgdescriptor:111,querykeypoint:129,question:[1,8,9,10,15,39,48,66,82,106,117],queue:[27,118,138,194],quick:[13,19,20,27,46],quicker:118,quickli:[60,65,114,149,150],quiet:123,quietli:123,quit:[0,5,10,12,13,14,27,31,62,69,74,82,106,108,109,114,123,223],quot:[3,106,121],r8b:60,r_hist:36,r_kinv:216,rab:97,rabaud:131,race:97,radial:[0,101,154,156,183],radian:[44,97,106,108,110,123,142,154,199],radii:[131,154],radio:[43,76,151],radiobox:151,radiu:[6,43,51,84,104,106,117,129,136,137,142,149,154,155,156,162,193,203,217,223],radius:128,radiuslist:131,radiusmatch:19,radiusmatchcollect:[139,191],radiusmatchsingl:[139,191],radiussearch:134,radix:199,rai:[213,222],rainer2002:97,rainer:[97,186],rais:[81,118,120,123,124,148,160,170,179,199],ramanan:187,ramer:162,ran:[0,62,69],rand:[11,114,118,119,120,125,162],randarr:116,randint:116,randinv:97,randn:[11,116,120],random:[10,11,13],randomcolor:14,randomforest:181,randomli:[14,41,82,97,114,123,130,136,173,175,181],randreal:116,randshuffl:116,randu:[11,13,116,119,120],rang:[3,7,8,13,14,30,31,35,36,37,38,41,42,49,50,66,74,93,94,97,101,106,109,112],rank:[106,123,131,184],ransac:[101,137],ransacreprojthreshold:[16,101],ransacthreshold:101,raphic:27,rapid:[97,186],rapidli:[123,186],raport:136,rare:[82,114,172,231],raster:[65,117,123,142,145,152,156,157,162,197,219],rate:[31,40,95,97,105,106,108,152,171,172,179],rather:[3,13,60,66,96,101,114,118,121,123,125,154,155,171,179,199],ratio:[0,3,31,40,43,65,101,106,112,123,127,128,131,142,151,153,154,181,208,212,219],ration:[101,212],raudi:106,raw:[66,111,114,120,124,149,155,192,222],raw_dist:56,raw_mod:171,rawmod:171,rawtim:125,rbf:[154,183],rctype:149,reach:[3,10,13,50,114,119,120,172,179,190],reachabl:[112,118],reactiv:3,read:[0,1,3,5,7,9,10,11,15,16,18,19,20,27,29,30],read_csv:[106,108,109,110,177],read_elem:118,read_onli:122,read_writ:122,readbynam:116,reader:[118,121,149,152],readi:[1,3,33,36,59,62,69,112,123,138,144,149,172,194],reading_and_writing_images_and_video:66,readint:116,readintbynam:116,readm:[17,18,19,20,59,62,106,108,110],readobj:116,readraw:116,readrawdata:116,readrawdataslic:116,readreal:116,readrealbynam:116,readstr:116,readstringbynam:116,real:[0,3,8,13,31,40,59,60,80,97,101,106,113,114,117,120,123,125,142,144,147,149,155,157,171,186,199,219],real_nam:121,realiti:101,realiz:[75,82],realli:[11,13,27,32,60,66,71,72,75,106,108,110,119,123,127,153,194],realloc:[13,27,112,114,119,123,138,142,152,199],realtim:[128,219],rearrang:[8,123],reason:[27,34,60,66,75,82,101,106,108,109,110,114,119,138,149,156,171,172,179,181,201,219],reassign:118,rebuild:[60,64],rebuilt:[66,171],rec:[106,117,159],recal:[81,111],recalcul:[12,120,219],reccomend:60,receiv:[3,6,11,33,36,81,86,171,181],recent:[3,59,102,106,219],recent_edg:170,reciproc:123,reclaim:123,recogn:[25,60,104,106,109,110,155],recognit:[74,97,104,105],recogniz:25,recolor:103,recommend:[3,10,27,40,59,60,61,62,64,66,71,74,82,101,106,112,114,121,136,137,138,141,142,155,159,165,174,179,189,192,194,202,210,219],recomput:[101,171],recongit:104,record:[13,31,35,60,219],rect1:114,rect2:114,rect3:114,rect:[8,13,33,49,51,52,62,64,84,96,101,110,114,117,120,123,141,142,146,155,159,162,170,186,187,190,191,192,193,207,210,212,214,216,219,223],rect_:110,rect_point:52,rectangl:[6,13,14,35,39,51,52,62,64,97,101,110,114,116],rectangular:[33,49,114,120,141,142,154,155,159,162,186,187,190,192],rectif:[101,152,156],rectifi:[101,113,137,156,189],rectlist:186,recurs:[3,112,121,136,155,162,172,219],red:[0,6,13,39,43,46,60,82,88,96,101,114,117,152,159,172,222,223],redirect:59,redistribut:[106,108,109,110,113],redraw:153,redrawn:[3,112],reduc:[3,13,34,40,43,45,46,47,50,101,105,106,111,112,114,116],reduced_num_dim:166,reduceop:145,reduct:[3,10,106,112,123,140],reductionfactor:112,redund:66,reev:[108,110],ref:[11,31,66,114,125,138],refactor:68,refcount:[114,120,123,190],refer:[0,3],referenc:[62,114,118,119,121],refid:64,refimg:164,refin:[22,101,137,154,159,174,213],refinement_mask_:213,refinementmask:213,reflect:[46,58,94,153,162],regard:[3,59,97,101],regardless:[0,101,114,119,120,121,141,155,192,199],region:[12,13,25,33,40,45,49,58,76,81,82,93,96,101,106,112,114,117,120,122,123,124,128,131,138,139,141,149,154,155,159,160,161,170,175,184,186,187,192,195,201,203,210,212,214,219],regist:[40,66,95,104,114,121,125,138],registerkeyboardcallback:221,registermousecallback:221,registertyp:116,registr:[95,106,160,219],registr_resol_:210,registrationresol:210,registri:74,regress:[83,86,171,172,175,176,177,181,182,183,196],regression_accuraci:[172,181],regul:[142,146,155,156,160,191,202],regular:[59,60,86,101,128,136,172,175,219,228],regularli:128,reiniti:[143,149,152],reinterpret:123,reinvent:10,reject:[40,58,101,137,149,154,155,186,201],rejectionthreshold:111,rejectlevel:186,rel:[0,31,42,60,61,66,69,74,75,97,101,104,114,117,118,122,123,128,141,152,155,159,165,167,171,172,174,181,186,187,192,199],relat:[0,3,11,25,30,48,60,61,64,66,97,101,114,117,118,120,128,148,156,157,159,170,194,199,209],relationship:[118,162,171],releas:[0,9,10,11,13,31,59,60,61,62,64,68,71,74,75,86,104],releaseandgetstr:116,releasedata:116,releasefilestorag:116,releasegraphscann:116,releaseimag:116,releaseimagehead:116,releasemat:116,releasematnd:116,releasememstorag:116,releasesparsemat:116,releasevideowrit:150,relev:[3,11,111,152,165,171,174,219],reli:[60,66,101,114,138],reliabl:76,reload:[3,112,200],remain:[0,3,11,13,31,40,101,114,118,120,123,125,126,154,156,162,219],remaininginputrow:155,remainingoutputrow:155,remap:[0,38],remap_window:46,rememb:[0,3,8,10,11,13,14,27,34,48,58,62,66,75,76,82,84,106,114,128,150,182],remot:62,remov:[0,3,4,11,33,40,45,49,50,59,93,106,108,109,114,118,120,126,142,157,159,160,162,166,170,171,172,193,202,203,209,211,219,222],removeallwidget:221,removewidget:221,renag:112,renam:[68,77,80,112],render:[14,27,61,78,80,101,116,117],renorm:171,reorder:[101,123,126,159],reorgan:[11,66],rep1:173,rep:[162,173],repack:223,repaint:[117,150,159],repeat:[14,31,32,42,114,116],repeatedli:[121,152],replac:[10,11,33,34,59,60,66,75,77,106,117,120,121,123,125,181,190],replic:[41,123,142,155,156],replica:41,report:[60,74,97,106,114,118,120,121,123,157,171,174,186,211],reposit:[121,223],repositori:60,repres:[6,25,34,35,36,39,40,44,46,48,58,61,66,81,82,92,94,96,101,106,111,114,117,118,120,121,122,123,125,126,127,129,135,142,154,155,156,157,159,162,163,165,166,172,175,176,179,181,183,187,190,194,199,219,222,223],represent:[13,38,81,82,101,106,111,114,117,120,121,123,125,129,139,141,156,157,172,182,187,193,219,222,223],representation_point:[222,223],representation_surfac:[222,223],representation_wirefram:[222,223],reproduc:[106,108,109,110],reproject:[1,101,137,213],reprojectimageto3d:100,reprojectionerror:101,reprojerr:0,request:[10,66,110,118,119,120],requir:[0,3,13,17,19,31,59,60,61,62,64,66],requit:61,rerun:[62,64,128],resampl:[106,108,110,156],rescal:[3,112],research:[3,106,110,111,112,131,167,186,211],resembl:[27,74,81,119,124,172],reserv:[106,108,110],reset:[3,112,118,120,122,124,155,182,222],resetcamera:221,resetcameraviewpoint:221,resetcolorarrai:116,resetimageroi:116,resetnormalarrai:116,resettexcoordarrai:116,resetvertexarrai:116,reshap:[27,96,106,108,109,110],reshapematnd:116,resid:[69,114,118,141,174,192],residu:3,resist:[101,155,172],resiz:[0,50,65,66,97,104,106,108,110],resizewindow:150,resol_mpx:210,resolut:[0,3,21,31,32,43,44,50,66,95,99,101,112,119,142,153,154,155,156,162,164,184,205],resolv:[59,75,114,119,172,214],reson:13,resourc:[60,62,64,66,75,122,143,153],resp:[171,172,175,181],respect:[7,9,34,35,37,41,46,48,58,61,64,94,95,101,113,114,118,123,125,141,142,153,155,156,157,159,162,192,193,199,213,219,223],respond:106,respons:[3,10,13,40,81,82,104,112,128,131,139,149,154,155,159,160,165,171,172,174,175,176,178,179,180,181,182,183,184,186,196,201],response_row:139,responsethreshhold:128,responsethreshold:128,rest:[13,34,42,49,58,60,66,82,86,104,118,123,157,183],restart:[60,76,151],restor:[118,125,151,182,203],restorememstoragepo:116,restrict:[36,101,118,120,155,192,219],restructuredtext:[66,105],result_col:39,result_data:142,result_messag:[106,108,109],result_row:39,result_s:142,result_spect:142,result_window:39,resulttyp:135,resum:[118,121,124,159,226],retain:[80,101,104,106,108,109,110,114,119,123,124,131,137,146,154,172,184,186,189,197],retainedvari:123,retin:131,retina_color_bay:[3,112],retina_color_diagon:112,retina_color_random:112,retina_colorsamplingmethod:112,retina_tuto:3,retina_tutori:3,retinacolor:[3,112],retinadefaultparamet:[3,112],retinademo:[3,112],retinaoutput_magno:[3,112],retinaoutput_parvo:[3,112],retinaparamet:102,retinaparameterfil:112,retinaspecificparamet:[3,112],retr_list:162,retr_tre:56,retrain:106,retransform:8,retreiv:112,retriev:[3,31,61,62,94,95,101,104,106,112,114,117,118,120,121,122,123,124,136,146,150,151],retrievefram:152,return_point:162,return_sum:171,returnd:170,returndfv:183,returnpoint:162,returnsum:171,retval:[101,115,117,123,124,151,152,153,155,156,157,159,162,171,172,174,175,176,179,180,181,183,186,219],reus:[13,27,64,68,75,110,114,118,123,130,155,172,182,192],revers:[114,118,123,156,159,170,194],revis:[59,60,124,186],rework:105,rewritten:[106,114,120,121],rgb2grai:193,rgb:[11,13,114,117,122,123,126,137,151,152,155,157,159,190,194],rgba:[61,122,123,142],rgbrgbrgb:112,rho:[44,142,154],rich:150,richard:[5,7,34,106,211],rid:59,riedmil:179,rig:101,right:[8,10,12,25,27,38,39,41,45,46,49,59,60,62,66,69,74,75,76,101,106,108,110,113,114,117,118,121,123,137,142,144,148,151,155,159,162,166,170,172,179,184,189,192,194,219],rightbutton:222,rightmost:123,rigid:[97,101],ring:[81,82],rinv:216,rj91:106,rmat:213,rng:[14,22,23,24,41,51,52,53,54,55,82,84,115,116,119],rng_state:176,road:66,robinson:217,robot:[106,111],robust:[3,66,97,101,105,106,110,112,113,114,126,131,154,174,184,217,219],rocess:27,rodrigu:[92,100],rodrigues2:101,roi1:101,roi2:101,roi:[8,13,101,114,120,141,155,159,162,164,166,190,192,194,210,212,214,216,219],roi_imag:166,roi_siz:120,roia:123,roib:123,roland:131,role:[106,120,155,170],roof:45,rook:6,rook_imag:6,rook_point:6,rook_window:6,root:[59,60,64,106,116,121,123,124],rosenfeld:106,rosten06:131,rosten:131,rot_mat:[48,92],rot_vec:92,rotat:[0,6,8,48],rotatedrect:52,rotation_vector:101,rotationwarp:[210,215],rotationwarperbas:215,rotmatr:101,rotmatri:101,rotmatrix:101,rotmatrixi:101,rotmatrixx:101,rotmatrixz:101,rotmatrx:101,rotmatrz:101,rough:165,roughli:[43,48,106,131,157,159,229],round:[10,40,114,116,117,120],routin:[46,48,162],row:[0,7,8,9,10,11,12,13,19,20,23,25,27,34,36,37,39,41,43,46,48,50,56,62,64,66,78,81,82,93,96,101,106,108,109,110,111],row_head:120,rowbordertyp:[141,155],rowclon:13,rowfilt:[141,155,192],rowkernel:[141,155,192],rowrang:82,rows_count:[139,184],rp_dw0:179,rp_dw_max:179,rp_dw_min:179,rp_dw_minu:179,rp_dw_plu:179,rprop93:179,rprop:179,rqdecomp3x3:100,rrect:114,rrkb11:131,rs04:211,rs10:211,rst:66,rtree:[166,181],rtreeclassif:166,rtreeclassifi:163,rtype:[114,123,190,199],ruble:131,rubner:157,rubnersept98:157,rule:[11,27,60,61,66,75,82,104,106,119,155,165,172],run:[0,1,3,6,7,10,11,12,27,28,34,40,43,45,58],runcalibr:0,runcalibrationandsav:0,runlin:118,runnabl:62,runner:66,runningavg:160,runtim:[0,9,10,11,27,31,32,64,66,74,75,82,104,118,119,120,124,138,144,170,194,200],runtime_error:152,rvec1:101,rvec2:101,rvec3:101,rvec:[0,1,101,137],rview:0,rw_type:190,s10:106,s11:106,s12:106,s13:[106,108,110],s14:106,s15:106,s16:106,s17:[106,108,110],s18:106,s19:106,s20:106,s21:106,s22:106,s23:106,s24:106,s25:106,s26:106,s27:106,s28:106,s29:106,s30:106,s31:106,s32:106,s33:106,s34:106,s35:106,s36:106,s37:106,s38:106,s39:106,s40:[106,108,110],s_bin:37,s_rang:37,sacrific:10,sad:[106,189],saddl:154,sadwindows:101,safedowncast:223,safer:10,safesignaturealloc:166,safeti:10,sai:[25,32,35,36,46,60,62,69,76,104,106,186],said:[7,36,106],sake:[43,49,114],salfordsystem:175,salienc:111,salient:[3,119,128],same:[0,1,3,5,7,8,9,10,11,12,13,14,16,27,30,31,32,33,34,35,36,37,39,40,42,44,46,48,49,50,59,61,62,64,66,68,74,75,76,81,82,89,96,97,101,104,105,106,108,109,110,113,114,115,118,119,120,121,123,124,125,126,127,128,129,131,137,139,141,142,145,147,148,149,151,152,153,154,155,156,157,159,160,161,162,163,169,170,171,172,173,175,178,179,181,182,183,184,186,189,190,191,192,193,194,195,197,199,201,202,203,212,219,222,223,228],samewindow:89,samller:106,sampl:[0,1,3,6,8,9,10,11,12,13,14,19,26,27,31,32,35,37,41,43,44,47],sample1:181,sample1java:61,sample2:181,sample_count:172,sample_fract:136,sample_height:97,sample_idx:182,sample_width:97,samplecount:115,sampleheight:97,sampleidx:[165,171,172,175,176,179,180,181,183,196],samplemat:[81,82],sampleweight:179,samplewidth:97,samplingstrenght:112,san:[117,179,211,219],sanchez:219,sand:126,saniti:76,satisfi:[27,40,114,119,137,155,159,176,183,189,196],satur:[13,14,35,37,112],saturate_cast:[7,11,12,114,116,119],saturatecolor:112,saturaterang:123,savecameraparam:0,savedindexparam:136,savedinstancest:61,saveimag:152,savememstoragepo:116,savepcadescriptor:164,savescreenshot:221,savewindowparamet:150,saw:[13,14,36],saxpi:123,sbbh653:101,sbin:157,sbteclips:64,scala:62,scalabl:131,scalacopt:64,scalaset:64,scalavers:64,scale0:[146,191],scale:[0,3,8,10,13,14,31,32,45,47,48,57,61,78,81,96,97,101,103,106,108,110,111,112,113,114,117,120,123,128,131,139,141,142,146,148,149,150,153,154,155,156,157,159,162,164,165,171,174,184,186,187,191,192,193,197,199,201,210,216,217,219,222,223],scale_factor:[149,186],scale_factor_:149,scale_rang:164,scaleadd:116,scalefactor:[131,139,146,186,197],scalenorm:131,scalerotatetransl:[106,108,110],scalng:190,scanimageandreducec:10,scanimageandreduceiter:10,scanimageandreducerandomaccess:10,scanner:[13,118],scatter:106,scenario:[104,106,108,110,123],scene:[3,16,20,21,25,27,66,101,106,111,112,157,160,222,223],scene_corn:20,schar:[118,119,123],scharr:[47,123],schedul:124,schema:61,scheme:[97,101,106,114,119,123,171,172,174,175,219,226],schoenemann:217,school:66,schunck:[114,169,219],schwarzenegg:[106,108,110],scienc:[106,157,174,179,219],scientif:74,scope:76,score:[25,131,184,187],score_threshold:187,scoretyp:[131,139],scrambl:[114,123],scratch:[66,74,123,171,176,179,180,196,203],screen:[8,9,14,50,61,64,66,74,78,153,222],screenshot:[14,41,101,222],scripttool:74,scroll:110,sdepth:159,seam:205,seam_est_resol_:210,seam_find:210,seam_finder_:210,seamestimationresol:210,seamfind:210,seamlessli:59,search:[19,39,62,64,66,69,74,75,93,99,101,104,106,107,108,114,118,121,123,127,131],search_window:142,searchparam:[127,136],searchwindows:202,searchwindowss:202,sec:46,second:[3,9,10,11,12,16,18,31,32,33,34,37,39,40,41,42,45,46,47,49,62,65,66,76,82,84,89,101,104,112,113,114,115,117,118,120,123,124,125,126,127,128,129,130,133,139,141,142,145,146,147,148,149,153,154,155,156,157,159,160,162,169,172,174,175,178,179,180,181,191,192,193,195,196,199,201,209,212,214,219],secondli:66,section:[9,10,12,13,14,26,27,29,33,41,44,48,50,57,58,59,60,61,62,65,66,69,74,75,77,81,86,87,101,112,118,120,121,122,123,125,126,127,129,131,133,136,141,152,155,156,157,163,165,172,174,175,176,179,181,182,196,222,223,230],sectionnam:66,sector:117,secur:[3,60],see:[1,3,6,8,9,10,11,12,13,14,15,26,27,31,32,33,35,36,37,38,39,41,43,48,49,50,58,59,60,61,62,64,66,68,69,72,73,74,75,76,81,87,94,95,96,97,101,103,104,105,106,108,109,110,111,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,135,136,137,138,141,142,143,144,146,147,149,151,152,153,154,155,156,157,159,160,161,162,165,171,172,173,174,175,176,178,179,180,181,183,186,187,189,190,191,192,193,196,197,199,201,202,203,207,209,210,213,214,219,222,226,229,230],seed:[115,120,131,159],seed_point:159,seedpoint:159,seek:[8,10,31],seem:[38,75],seemingli:[114,162],seen:[5,7,8,14,34,38,41,42,43,45,46,47,49,82,106,121],seg_mask:219,seg_thresh:219,segmant:149,segmask:219,segment:[3,14,36,58,101,117,142,149,154,155,159,160,162,193,201,219],segment_object:162,segthresh:219,seidel:113,select:[3,13,32,39,49,59,60,61,66,68,69,74,75,76,77,96,97,101,114,115,118,120,123,128,131,136,144,145,151,155,156,157,159,160,161,167,170,172,181,182,194,195,196,199,200,203,219,228],selectedpair:131,self:[66,74,77,80,117,162],semant:[119,129,141,155,182,192],semi:[101,114,115,117,155,184,192,196],semiglob:101,send:[3,32,66,110],sender:80,sens:[0,25,42,81,95,101,106,108,109,114,121,123,157,159,162,179],sensibl:101,sensit:[3,13,66,81,101,103,106,112,149],sensor:3,sensorkinect:95,sentenc:66,sep:186,separ:[7,11,13,31,35,36,58,59,60,66,74,75,81],separatelli:142,seper:81,septemb:[126,136,157,187],seq:[9,64,118,121,125],seq_flag:118,seq_typ:118,seqelemidx:116,seqinsert:116,seqinsertslic:116,seqinvert:116,seqpop:116,seqpopfront:116,seqpopmulti:116,seqpush:116,seqpushfront:116,seqpushmulti:116,seqremov:116,seqremoveslic:116,seqsearch:116,seqslic:116,seqsort:116,sequenc:[3,9,31,56,101,111,112,114,118,120,121,123,125,149,152,154,160,162,171,172,183,187,202,219],sequenti:[9,14,27,31,32,34,37,101,111,118,120,123,124,179],sergei:113,seri:[42,128,171],serial:[9,104,114,138],serif:117,serious:66,serv:[11,64,219],server:[60,62],servic:[59,66,74,106,108,110],session:[60,76],set1d:120,set2d:120,set3d:120,set:[0,1,3,6,10,11,12,13,14,16,22,23,24,30,31,32,33,36,37,40,41,42,43,47,48,50,58,59,60,61,62,63,64,66,68,69,73],set_data:172,set_data_structur:115,set_delimit:177,set_elem:118,set_elem_ptr:118,set_flag:118,set_head:118,set_miss_ch:177,set_response_idx:177,set_train_test_split:177,set_var_typ:177,setadd:116,setalgorithm:114,setautoreleas:116,setbackgroundcolor:221,setblend:210,setbool:114,setbundleadjust:210,setcamera:221,setcameraparam:216,setcaptureproperti:152,setclip:222,setcolor:[88,221],setcolorarrai:116,setcompositingresol:210,setconfthresh:213,setcontentview:[61,226],setcvcameraviewlisten:61,setdata:116,setdoubl:114,setexposurecompens:210,setfastparam:139,setfeaturesfind:210,setfeaturesmatch:210,setfov:222,setfullscreen:221,setgldevic:116,setid:88,setident:116,setimagecoi:116,setimageroi:116,setinput:88,setinputdata:88,setint:114,setiosflag:31,setiplalloc:116,setmapp:88,setmat:114,setmatchingmask:210,setmatvector:114,setmousecallback:150,setnd:120,setnew:116,setnormalarrai:116,setnumband:207,setnumthread:116,setopenglcontext:150,setopengldrawcallback:150,setpanoconfidencethresh:210,setparam:139,setpcahigh:164,setpcalow:164,setpoint:88,setpoli:88,setpos:221,setprecis:31,setprop:[88,221],setreal1d:120,setreal2d:120,setreal3d:120,setreal:116,setrealnd:120,setrefinementmask:213,setregistrationresol:210,setremov:116,setremovebyptr:116,setrenderingproperti:[92,221],setrepresent:221,setscal:216,setseamestimationresol:210,setseamfind:210,setseqblocks:116,setseqreaderpo:116,setsharp:207,setstr:114,setter:114,settermcriteria:213,settexcoordarrai:116,settext:221,settl:[112,155],setto:[12,62,64,82],settrackbarpo:150,setup:3,setuptool:74,setuseoptim:116,setverbos:164,setvertexarrai:116,setviewerpos:[91,221],setvis:61,setvocabulari:132,setwarp:210,setwavecorrect:210,setwavecorrectkind:210,setwidgetpos:[92,221],setwindowposit:221,setwindowproperti:150,setwindows:221,setx:[60,74],setzero:116,seven:162,seventh:162,sever:[59,60,61,63,67,94,95,96,97,101,105,106,114,117,118,119,120,121,122,123,125,126,127,128,137,142,147,153,155,156,157,159,179,183,186,187,190,193,199,202,222,223,231],sf_bgr:149,sf_grai:149,sf_iyuv:149,sf_nv12:149,sf_uyvi:149,sf_yuy2:149,sf_yv12:149,sgbm:101,shade:[10,13,95,222,223],shading_flat:[222,223],shading_gouraud:[222,223],shading_phong:[222,223],shadow:[35,149,201,219],shadowdetect2003:[149,201],shall:[106,108,110,184],shame:66,shape:[6,33,57,101,104,106,114,117,120,155,158],share:[11,13,60,62,66,89,114,118,119,138,159,172,194,222,223,228],shared_atom:143,shared_ptr:[114,119],sharp:[155,207],sharpen:[12,114,119],sharper:155,sharpness_:207,shear:117,shed:15,sheet:75,sheikh:31,shell:[59,60],shengcai:97,shi94:154,shi:[21,22,23],shift:[32,92,101,114,117,118,120,123,136,142,148,155,156,157,159,160,162,169,179,193,219,222],shift_siz:169,shiftsiz:169,shiftvec:123,ship:[11,65,74,109,152],shortcut:[101,120],shorten:120,shorter:[12,114,123,154],shortest:159,shot:62,should:[0,3,6,9,11,13,14,25,27,32,37,38,41,42,44,47,50,59,60,61,62,63,64,65,66,68,69,70,71,72,74,75,76,77,78,80,81,82,94,95,96,97,101,104,106,108,110,112,113,114,117,118,119,120,121,122,123,124,125,127,128,131,136,139,142,146,147,148,149,151,152,153,154,155,156,157,159,162,171,174,175,178,179,180,183,184,186,191,192,193,194,195,197,199,201,202,209,210,212,219,223],shouldn:[31,66],show:[0,3,5,7,8,9,10,11,13,14,17,18,19,20,22,24,25,30,31,32,34,35,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,59,61,62,65,66,72,75,76,77,81,82,84,86,88,92],show_fp:61,showimag:[153,221],shown:[3,13,17,18,19,20,22,23,24,25,33,36,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,60,65,66,70,75,76,77,81,82,84,96,97,101,106,107,108,111,114,121,123,153,154,159,160,162,179],showundistors:0,showwidget:[88,91,92,221],shrink:[114,156],shrinkag:[146,175,191],shrt_max:124,shuffl:[123,178],shum:211,siam:115,sid:113,side:[41,45,49,66,69,105,106,114,120,122,123,154,155,186],siegwart:131,sift:[106,114,126,127,128,131],sift_param:114,sig:166,sig_len:166,siggraph:211,sight:104,sigma12:[27,31],sigma1:[141,155,192],sigma1_2:[27,31],sigma1sigma2:192,sigma2:[141,155,192],sigma2_2:[27,31],sigma:[11,114,123,141,142,149,155,159,184,192,201,217,219],sigma_color:[142,219],sigma_color_fix:219,sigma_dist:219,sigma_dist_fix:219,sigma_rang:137,sigma_spati:142,sigmacolor:[155,192],sigmai:[155,192],sigmaspac:[155,192],sigmaspav:192,sigmax:[155,192],sigmoid:[112,179,183],sigmoid_sym:179,sign:[11,13,66,75,101,106,113,114,119,120,121,123,124,125,162,171,183,184,199],signal:[3,31,34,112,119,123,124,149,160,222],signatur:[114,118,120,146,157,164,166,190],signature1:157,signature2:157,signatures:164,signific:[0,27,101,118,144,149,201,219],significantli:[3,31,60,101,123],silent:[114,170],silhouett:[45,219],simd:[63,119],similar:[0,3,6,13],similarli:[50,101,114,118,119,120,123,154,156,157,162,166],simillari:74,simliar:131,simoncelli:31,simpl:[0,3,5,6,7,9,10,11,12,15,21,27,31,32,33,34,36,38,46,47,48,59,61,62,64,66,68,69,70,73,75,77,79,80,81,82,97,101,106,108,110,112,114,117,118,119,120,121,123,125,128,142,144,150,153,155,162,171,172,180,186,207,223],simple_sampl:62,simpleblob:128,simpleblobdetector:101,simpleflow:219,simpleflow_demo:219,simpler:[35,47,101,106,108,110,114,123,174,186,199],simplesampl:[62,64],simplest:[10,13,31,34,48,58,61,106,108,110,114,118,124,156,171],simplex:157,simpli:[0,7,9,12,59,62,66,74,76,101,106,108,109,110,114,117,118,120,123,125,142,155,156,219],simplic:[1,66,114,151,155],simplif:[81,142],simplifi:[101,106,108,109,110,114,119,126,155,231],simul:3,simultan:[101,113,114,123],sin:[44,92,106,108,110,114,154],sinc:[3,5,6,7,10,13,14,25,26,34,36,37,40,44,45,46,48,49,50,59,60,61,66,68,69,74,76,81,82,87,89,94,95,96,97,101,104,106,110,114,118,119,120,123,124,128,153,155,159,162,172,199,200,231],sine:[106,108,110],singl:[0,3,10,11,13,27,31,32,36,44,50,66,74,76,80,95,96],singlepointcolor:130,singular:[106,114,123,154],singularli:111,sinu:8,sinusoid:44,sir:106,sister:33,site:[60,63,64,69,74,159,181,219],situat:[31,104,106,112,118,172],sixth:[12,159],size0:123,size1:155,size2:155,size2d:223,size2f:114,size2i:114,size:[0,1,3,5,6,7,8,10,11,12,13,14,19,20,22,23,24,25,27,30,31,32,33,34,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,59,60,62,65,66,71,76,78,80,84,96,97,101,104,106,108,109,110,111,112,113],size_row:[139,184],size_t:[13,43,44,84,91,114,118,123,124,125,128,138,139,143,146,147,149,154,166,187,190,191,212,214],size_typ:32,sizei:[131,187],sizeof:[114,118,120,121,124,138,146,162,166],sizeof_head:120,sizes_:214,sizex:187,skew:101,skin:35,skip:[10,59,60,61,74,114,121],sklanski:162,sklansky82:162,slabaugh:101,slam:111,slant:117,sleepi:106,slice:[106,108,109,114,118,162,171,175],slicelength:118,slid:157,slide:[5,34,39,59,61,161,187],slider:[33,40,49,112,153],slight:[101,105],slightli:[35,41,43,44,131,136,157,162,187],sln:64,slope:117,slow:[3,101,119,144,155,156],slowdown:123,slower:[10,27,60,114,120,121,131,152,219],slowest:121,small:[8,10,11,13,19,25,27,31,43,49,66,71,73,75,82,101,106,114,117,119,123,131,142,144,149,154,155,159,164,171,172,179,181,184,186,193,201,202,219],smaller:[3,13,27,33,50,57,63,66,82,101,106,111,113,114,117,118,119,123,124,127,128,129,131,142,146,149,152,154,160,164,169,171,172,179,186,193,197,201,202,219],smallest:[13,71,118,123,131,154,155],smallimg:96,smart:[11,113,114,122,155,190],smart_ptr:114,smartli:171,smear:106,smile:106,smooth:3,smoother:[101,113,169,183,219],smoothingradiu:149,smoothtyp:155,smorkalov:[2,4,15,21,28,29,57,66,73,79,83,85,90],snapshot:[0,31,34,42,49,58,62,63,71],snippet:[8,33,46,48,61,66,69,74,80,104,226],sobel:[40,45],sobelx:96,soc:63,socket:114,soft:184,softfp:63,softwar:[59,60,66,94,106,108,109,110,181],soi:101,solari:62,sole:[111,114],solid:170,solut:[9,12,27,59,64,66,74,75,76,81,82,101,106,108,110,113,114,123,124,171,183,219],solv:[0,10,13,26,27,45,58,81,82,86,101,106,114,116,119],solvecub:116,solvepnp:[1,100],solvepnpransac:100,solvepoli:116,solver:[101,149],solver_iter:149,solver_iterations_:149,solvez:116,some:[0,2,3,6,7,8,10,11,12,14,15,23,27,30,31,32,33,34,35,36,39,40,41,44,45,46,48,50,57,59,60,61,63,66,69,71,73,74,75,76,77,80,81,82,94,95,97,101,102,104,106,108,109,110,111,112,114,115,117,118,119,120,121,123,124,125,127,136,138,141,142,143,144,146,154,155,156,157,159,160,162,165,169,170,171,172,174,175,179,181,182,184,185,186,189,190,191,192,194,196,197,199,202,211,219,231],somebodi:13,somehow:[10,27,32,106,114,119],someon:[66,75],someth:[10,13,31,32,36,64,66,69,72,74,75,101,106,108,110,124,125],sometim:[7,10,13,34,47,62,101,104,106,120,123,126,150,154,172,176,201,219],somewhat:[31,74,75,106],somewher:[27,64,66,74,101,106,114,118,123],soon:[13,41,106,115,172,194,196],sophist:[49,57,110,123,156,172],sorri:27,sort:[8,11,44,114,116,118],sort_biton:199,sort_merg:199,sort_radix:199,sort_select:199,sortidx:116,sound:32,source_window:[22,24,25,38,48,51,52,53,54,55,56],sourcecomparewith:31,sourceforg:[59,63,64,71,74,80],sourceforga:74,sourcerefer:31,sp1:74,space:[0,10,11,13,34,44,49,59,60,62,66,69,71,81,82,99,101,104,106,111,114,117,118,119,121,122,123,126,127,129],spacial:217,spam:172,span:[106,114,119,120,190],sparc:[62,114],spars:[101,114,118,120,123],sparse_mat:114,sparsematconstiterator_:114,sparsematiterator_:114,spatial:[3,8,34,106,112,142,154,155,162,192,193,219],spatio:[3,4,112],speak:[62,66,190],spec:119,specfi:[146,191],special:[6,10,11],specif:[3,9,10,14,17,18,25,48,59,60],specifi:[0,3,6,9,10,11,12,13,14,31,32,33,34,49,60,61,65,66,74,75,81,97,101,104,110,112,113,114,115,117,118,119,120,121,122,123,124,125,127,128,129,131,136,137,138,139,141,142,143,145,146,148,149,151,152,153,154,155,156,157,159,161,162,165,167,169,170,171,172,174,176,178,179,182,183,184,186,189,190,191,192,193,194,195,196,197,199,200,201,209,214,219,223],speckl:101,specklerang:101,specklewindows:101,spect_len:142,spectral:[3,112,123],spectrum:[3,8,112,123,142,157,160,199],speech:106,speed:[0,10,13,101,111,114,120,121,123,131,136,142,149,152,155,156,160,179,184,193,197,201,219],speed_up_thr:219,spell:66,spent:[124,136],sphere:[216,223],sphere_radiu:223,sphere_resolut:223,spheric:[142,193,210,216],sphericalprojector:216,sphinx:[66,74],spin:[88,89,91,221],spinonc:[89,92,221],spl:[32,178],spline:211,split:[0,8,11,27,32,36,115,116,120],split_criteria:171,split_point:172,spread:[38,81],springer:[113,126,128,131,171,179,211],sprintf:[30,124],sptr:155,sqdiff:39,sqdiff_norm:39,sqerr:171,sqr:142,sqrt:[0,8,106,108,110,116],sqsum:[142,159,160,186,193],squad:31,squar:0,squareacc:160,squared_loss:175,squares:0,squeez:[28,86],srang:157,src0:123,src1:[5,30,114,120,123,145,147,148,160,195,199],src2:[5,30,114,120,123,145,147,148,160,195,199],src3:[123,147,199],src:[22,23,24,25,32,33,34,35,36,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,62,64,66,69,74,96,101,103,104,106,108,109,110,114,120,121,123,138,141,142,145,147,148,154,155,156,157,159,160,162,164,166,192,193,194,195,196,199,202,203,214,216,219],src_base:37,src_copi:[54,56],src_count:123,src_disp:137,src_grai:[22,23,24,25,40,43,45,47,51,52,53,54,55,58],src_img_idx:212,src_point:101,src_seq:162,src_size:[141,142,192,193,216],src_test1:37,src_test2:37,srccount:155,srcdir:64,srcimg:202,srcpoint:101,srcroi:155,srcstep:155,srctri:48,srctype:[123,141,155,192],srel:167,srn:[44,154],ss00:211,sse2:[119,124],sse:[27,31,124],ssim_map:[27,31],ssl:60,ssse:124,sstream:[31,106,108,109,110],stabil:[93,102,210,219],stabl:3,stack:[118,124],stage:[3,97,101,112,136,142,154,155,156,170,172,181,182,186],stagetyp:97,stai:[57,101,114,154,155],stan:[97,157],stand:[27,59,101,114,118,120,157,162],standalon:[154,157,162,172],standar:47,standard:[10,31,32,34,35,39,43],standpoint:106,stanford:[157,171],star:[128,187],stardetector:128,start:[0,3,6,10,11,14,31,32,33,36,49,59,60,61,62,64,65,66,68,69,74,75,76,77],start_angl:117,start_auto_step:165,start_col:120,start_e_step:165,start_idx:118,start_index:[118,162],start_m_step:165,start_row:120,start_stag:186,start_step:165,start_vtx:118,startangl:117,startappendtoseq:116,startcol:[114,120,190],starter:68,starter_video:152,starti:155,startnextstream:116,startreadrawdata:116,startreadseq:116,startrow:[114,120,190],startup:[74,75],startwriteseq:116,startwritestruct:116,stat:181,state:[0,3,27,61,76,101,104,106,109,115,117,118,120,123,144,151,155,159,175,178,181,182,194,201,219],statement:[76,78,80,89,114,119],statepost:201,statepr:201,static_cast:[32,124],statist:[35,81,83,86,106,108,114,157,160,171,172,177,180],statistician:106,statmodel:[182,183],statu:[61,94,95,101,124,138,144,149,201,210,219,226,229],statusbar:[151,153],stauffer:[149,201,219],std:[0,3,5,7,9,11,13,17,18,19,20,22,23,24,25,31,32,34,35,36,37,38,39,44,48,51,52,53,54,55,56,61,65,75,76,82,84,88,89,91,92,96,101,104,106,108,109,110,112,114,115,118,119,122,123,124,125,127,131,136,139,142,149,152,155,162,165,166,171,172,175,178,181,184,191,197,201,206,207,209,210,212,213,214,219,223],std_dev:123,stddev:[123,145,199],stderr:[124,152],stdio:[11,17,18,19,20,22,23,24,25,33,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,70,72,84,152],stdlib:[22,23,24,25,33,40,41,42,45,47,49,50,51,52,53,54,55,56,58],stdout:152,steepest:217,stefan:131,stem:82,step:[0,8,10,11,17,18,19,20,35],stephen:25,stepscal:164,stereo:[101,102],stereo_calib:101,stereo_match:[101,113,137],stereo_multi:137,stereobm:100,stereocalibr:100,stereorectifi:100,stereorectifyuncalibr:100,stereosgbm:100,stereovar:102,stewart:[108,110],stick:104,still:[3,8,11,13,44,48,59,62,66,69,75,101,106,111,112,114,118,119,121,123,136,144,153,156,159,160,161,162,175,203],stitch:[99,184,205,208],stitching_detail:210,stl:[9,11,60,65,114,119,123,124,125],stn:[44,154],stochasticboostingss:175,stock:59,stoke:203,stone:[66,172],stop:[0,3,50,62,80,89,97,114,115,117,118,120,137],storag:[10,104,114,116,118,121],store:[7,8],stori:74,stork:106,storyboard:80,str:[62,91,104,121,125,178],straight:[44,81,159],strategi:[3,155,192],strcmp:3,stream:[3,4,10,27,29],stream_accessor:138,stream_index:121,streamcallback:138,streamidx:[125,152],strecha:126,strengh:[3,112],strenght:112,strength:[3,10,27,40,128,142,179,202,219],stretch:38,strict:[106,108,110],stride:[114,146,191],string:[0,3,9,10,31,32,61,62,64,68,84,91,103,104,106,108,109,110,112,114,116,117,118,121,124],stringstream:[10,31,106,108,109,110],strip:[63,71,152],stripe:[144,186],stroke:[96,117],strong:[3,128,149,154,155,157,171,201],stronger:154,strongest:[128,131,149,154,201],strongli:[60,110],struct:[27,111,112,118,120,121,127,128,130,136,138,142,146,149,162,164,165,166,170,171,172,175,178,179,181,183,187,191,197,208,212,216,223],struct_flag:121,struct_nam:121,struct_ptr:121,structdblptr:121,structptr:121,structsiz:164,structur:[6,8,9,11,13,15,27,31],structure_:9,struggl:13,stub:[209,214],stuck:172,student:3,studio:[11,64,66,73,74],stuff:[7,9,10,11,14,15,30,33,35,44,47,60,61,64,66,75,80,99],stump:[97,171],style:[0,7,10,11,13,61,66,97,114,117,120,123,151],sub:[10,27,66,74,101,114,117,118,120,123,141,145,154,156,160,172,181,190,192,194,195],subclass:114,subcolumn:12,subdirnam:[106,108,110],subdiv2dedgedst:168,subdiv2dgetedg:168,subdiv2dloc:168,subdiv2dnextedg:168,subdiv2drotateedg:168,subdiv:170,subdivdelaunay2dinsert:168,subdivid:170,subdivis:[36,118,168],subject:[0,3,66,81,101,104,106,108,110,154],subject_path:[106,108,110],sublinear:219,submat:[120,138],submatrix:[101,114,120],submit:[66,97],suboptim:[172,181],subpart:36,subpixel:21,subplot:106,subr:123,subsampl:[3,97,128],subsample_port:175,subsampleidx:172,subsect:[13,58,60],subsequ:[11,50,114,117,118,120,121,123,124,136,143,152,155,162,164,171,186,228],subset:[11,101,117,119,120,156,162,171,172,173,175,176,178,181,182,183,196],subspac:[106,123],subspaceproject:[106,108,109],subspacereconstruct:[106,108,109],substanti:171,substitut:[66,74,106,108,110,120,123],substr:[32,104],substract:14,subsystem:60,subtitl:[32,66],subtl:106,subtract:[10,27,114,116,119],subtractor:114,subtre:121,subwindow:187,succe:[0,27,31,119],succeed:[0,32,152],success:[0,10,31,32,41,50,60,61,66,75,106,111,114,152,190,226,229,230],successfulli:[60,61,70,95,106,118,123,144,149,152,174,206,226,229,230],sudden:119,sudo:[60,63,67,71],suffer:[106,131],suffici:[64,104,106,114,123,155,157,162,171,181],suffix:[101,104,182],suggest:[26,74,87,104,136,159,228],suit:[58,108,194],suitabl:[60,101,108,139,153,157,181,191,223],sum:[0,8,12,27,31,34,42,66,82,101,114,116,120],sumelem:123,summar:106,summari:[62,162,171,175,202],summat:[154,161],sumofhorizontalgradiensinwindow:189,sumtyp:[141,155],sun:[60,64,65,152],suno:62,superpos:40,superposit:[101,121],superr:[99,205],superset:181,supervis:[81,171],suport:83,suppli:[96,101,111,114,115,123,138,152,160,186,196],support:[0,11,13,27,32,59,60,61,62,63,64,65,66,68,74,80],suppos:[9,74,112],supposedli:50,suppress:[40,131,139,154,157,187],suppressnonmaxs:128,sure:[7,10,11,12,50,59,60,64,66,69,74,75,76,80,93,96,104,110,114,119,124,128,157,159,170,184],surf:[17,18,19,20,93,111,114,126,127,128,131,166],surf_descriptor:[17,20],surf_detector:18,surf_flannmatch:19,surf_keypoint_match:184,surf_match:184,surfac:[35,101,113,149,219,222],surfaceformat:149,surfaceview:61,surfdescriptorextractor:[16,17,19,20,93,129],surffeaturedetector:[17,18,19,20,93,128],surpport:192,surpris:[27,106,181],surrei:219,surrog:[171,172,175],surround:[3,25,106,117,128,202],survei:106,surveil:[110,149,219],suspend:124,suzuki85:162,suzuki:162,svbacksubst:123,svbksb:123,svd:[114,116],svdecomp:123,svm_type:[81,82,183],swap:[8,114,123,155,170,190],sweep:25,swing:62,sxga:95,sylvain:219,symbol:[60,62,63,67,69,81,117,122,222],symmetr:[0,101,114,123,155,159,165,174,179],symmetri:[123,155,199],symmetrytyp:155,symposium:115,synapt:71,synchron:[105,138,152,153],synonym:[114,125,128,141,157,192],syntax:[7,60,62,66,123,182],synthesi:211,sysproperti:64,system:[0,1,3,10,11,13,27,28,31,32,44,59,60,61,62],szeliski:[5,7,34,211],t_1:101,t_2:101,tab:[60,66,68,69],tabc:123,table_numb:136,table_of_content_sect:66,tabularcolumn:66,tackl:13,tadp:[59,60],tag:[60,61,121,226],tahiti:194,take:[0,3,7,8,10,12,13,14,27,31,33,34,38,41,45,46,47,48,57,59,60],taken:[3,61,70,82,97,101,106,114,118,120,123,131,149,155,156,157,159,162,167,179,183,192],talk:[3,9,13,36,81],taller:159,tan10:106,tan:106,tang:101,tangent:117,tangenti:[0,101,156],tanh:179,tao2012:219,tao:219,tap:59,tarbal:[63,71],target:[3,13,59,60,61,63,64,77,80,97,101,112,114,116,117],target_arch:61,target_link_librari:[69,70],target_precis:136,task:[10,11,13,31,62,66,75,81,82,106,108,109,110,124,171,219],tau:[149,201,217,219],taxonom:106,taylor:25,tbb:[63,74,97,101,124,159,172,175,176,179,180,181,183,184,186,212,219],tbd:96,teacher:3,team:[11,23,37,59,66,74,124],technic:[0,157,171,174,186,211],techniqu:[10,12,39,66,101,113,114,123,127,138,159,162,171,179,183,186,203,219],technolog:[60,74,119,183],teh:162,tehchin89:162,telea04:[159,203],telea:[159,203],tell:[66,69,74,75,80,96,104,114],temp1:192,temp:[0,123,155,194],temp_imag:154,tempa:123,tempb:123,temperatur:182,tempimag:154,templ:[39,142,161,197],templ_block:142,templ_siz:142,templ_spect:142,templat:3,templatewindows:202,templf:[142,197],tempor:[3,4,5,50,112,128,217,219],temporalarearadiu:217,temporalwindows:202,temporari:[11,71,101,114,118,120,121,123,149,155,159,201],ten:[10,75,106],tend:[3,8,13,49],tensor:114,term:[25,34,35,44,66,82,97,106,108,109,110,111,113,117,123,137,154,157,179,181,189,213,217,219],term_crit:[81,82,101,165,179,181,183],term_criteria:213,term_criteria_:213,termcrit:[115,121,133,155,174],termcrit_typ:181,termcriteria:[0,22,82,101],termin:[30,62,63,67,69,71,81,82,89,101,104,114,115,120,121,142,154,155,165,169,172,174,179,181,183,193,196,213,219],terminal_cost:214,test:1,test_imag:166,testdata:187,testimgdescriptor:111,testlabel:[106,108,109],testsampl:[106,108,109],testset:123,tex:[74,122],texcoord:122,texrect:122,text:[0,8,9,10],text_scal:223,text_siz:117,text_str:117,textorg:117,textorigin:0,textsiz:[0,14,117],textstr:117,texttt:192,textual:164,textur:[3,106,112,122,137,154,155,189,211],texture2d:116,texture_flow:154,teynor:111,tflag:[171,172,175,181,182],tha:[142,192],than:[3,8,12,13,19,20,22,25,27,31,32,34,40,43,44,47,50,58,60,66,74,80,81,82,93,96,97,101,104,106,111,113,114,115,117,118,119,120,121,123,124,125,127,129,131,135,136,137,139,142,144,146,149,153,154,155,157,159,161,162,164,165,166,169,171,172,174,176,179,181,183,184,186,189,191,192,194,196,197,201,212,219],thank:[3,104,114],thei:[0,2,5,8,9,10,11,13,14,25,26,27,30,31,33,35,36,37,40,45,48,58,59,60,62,66,74,75,76,81,82,84,86,93,97,101,106,108,110,114,115,117,118,119,120,121,123,124,125,128,129,131,133,141,149,155,156,157,159,162,165,171,172,174,182,183,186,192,193,199,201,219,223],them:[0,3,5,6,7,9,10,11,12,13,14,16,22,25,27,31,32,33,34,36,37,41,45,46,47,48,57,58,59,60,61,62,64,65,66,69,72,74,75,81,82,93,97,101,103,104,106,108,110,112,114,115,117,118,119,120,121,123,125,126,131,139,146,149,153,154,155,156,157,159,162,164,165,171,179,180,181,184,186,187,192,193,196,201,211,217,219],theme:61,themselv:[0,59,123,162,176,186,194,199,228],theorem:160,theoret:[114,123,124,155],therebi:171,therefor:[0,8,10,11,13,27,31,32,33,66,75,80,81,82,101,106,114,118,119,120,123,124,126,131,144,155,159,162,171,184,223],therng:116,thesi:106,theta:[44,142,154,219],theta_d:101,thi:[0,1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],thick:[6,14,81,82,101,112,117,162,223],thin:[40,114,118],thing:[10,11,12,13,14,27,32,48,62,66,75,82,106,110,114,122,123,125],think:[7,11,13,46,66,82,104,106,107,108,110,172],thinner:33,third:[10,33,66,75,114,118,120,123,124,139,147,155,159,162,172,186,191,199],thoma:66,thorough:66,thoroughli:[59,60,61,119],thorsten:113,those:[0,3,11,13,27,60,62,64,66,71,74,89,101,106,119,123,125,131,142,154,155,156,159,162,171,181,187,190,212],though:[33,59,60,61,76,101,114,117,120,123,142,144,155,157,170,180,186,199],thousand:[66,97,119],thread:[10,61,69,74,97,101,104,113,114],thread_scheduler_init:124,threadingbuildingblock:63,threat:31,three:[0,7,8,10,11,13,14,27,32,33,34,36,37,40,43,44,48,66,81,95,97,101,106,123,126,131,156,162,170,174,175,179,199],threhold:58,thresh:[25,51,52,53,54,55,131,142,159,166,193],thresh_:128,thresh_binari:[51,52,54,142,159],thresh_binary_inv:[142,159],thresh_callback:[51,52,53,54,55],thresh_otsu:[142,159],thresh_tozero:[114,159],thresh_tozero_inv:159,thresh_trunc:[159,193],threshold1:154,threshold2:154,threshold:[25,40,43,44,47,51,52,54,57],threshold_demo:58,threshold_l2hi:[146,191],threshold_output:[51,52,54],threshold_typ:[58,159],threshold_valu:58,thresholdstep:128,thresholdtyp:[159,193],threw:112,through:[0,3,9,10,11,12,13,15,34,38,42,44,64,68,74,75,76,94,95,101,106,110,111,112,114,117,118,120,121,125,149,159,161,162,167,171,213,219,228],throughout:[8,75],throughput:194,thrown:[27,103,104,112,114,119,124,178],thu:[3,11,101,106,114,117,118,119,120,121,122,123,142,154,155,156,157,162,169,171,172,174,181,183],thumb:[106,165],thumbnail:76,tian:149,tibshirani:[81,171],tick:[10,124],tidbit:194,tif:[65,152],tiff:[65,152],tight:[117,219],tightli:106,tile:123,tileinfo:120,tilt:159,tilted_sum:[159,186],tiltedsum:159,timberlak:[108,110],time:[0,3,8],time_t:125,timer:151,timestamp:[152,219],tini:[106,108,110],tip:[9,11,66,74,117,151,223],tipic:42,tiplength:117,titl:[2,4,15,21,28,29,57,61,66,73,79,83,85,90],tlbph:106,tm_ccorr_norm:39,tmp1:27,tmp2:27,tmp:[8,50],tmpcorners_:201,toarrai:64,tobj:114,tocdefinit:66,toctableopencv:66,toctre:66,todai:31,todo:[114,120],togeth:[3,11,26,32,74,75,86,101,106,114,118,123,155,170,172,181,192,219,222],toggl:0,toi:106,tol:166,toler:[74,81,97,106,183],tom:[108,110],tomasi:[21,22,23],tomographi:13,tonal:35,tongu:58,tonkal:90,too:[0,3,8,9,10,11,13,14,27,32,62,65,66,74,75,81,82,97,101,106,111,114,119,123,131,142,149,152,154,156,157,159,172,193,201,219],took:[10,12,106,219],tool:[3,30,59,60,61,63,64,66,69,70,73,74,75,82,97,101,159,162,231],toolbar:[59,151,153],toolbox:111,toolchain:[60,63,69],toolkit:[74,114,122,144],top:[8,12,41,42],topbottomleftright:192,tophat:[155,192],topi:60,topleft:170,topolog:[88,162,170,179],torsten:106,tort:[106,108,110],tortoisegit:74,total:[6,12,27,31,37,47,78,81,82,101,106],total_num_match:213,total_num_matches_:213,totalavgerr:0,totalerr:0,totalpoint:0,totyp:123,touch:[101,159,162],toutf16:61,toward:[65,118,172],tower:[3,112],tp91:[105,106],tr1:119,tr2004:159,trace:[25,114,116],track1:151,track2:151,track:[21,32,44,74,76,86,87,119,149,154,156,157,158],track_error:219,trackbar:[22,23,24,25,29],trackbar_label:39,trackbar_nam:153,trackbar_typ:58,trackbar_valu:58,trackbarcallback:153,trackbarnam:[30,153],tracker:[154,157,219],trade:[111,179,219],tradeoff:136,train:[66,74,81,82,83,84],train_auto:177,train_data:182,train_feature_count:164,train_imag:[164,166],train_method:179,train_path:164,train_sample_count:[176,178],train_sample_part:178,train_sample_part_mod:178,train_sample_port:178,traincascad:186,trainclass:[82,176],trainclasses1:176,trainclasses2:176,traincollect:[139,191],traindata1:176,traindata2:176,traindata:[82,171,172,175,176,180,181,183,196],traindesccollect:[127,139,191],traindesccollectioni:127,traindescriptor:127,trainfromsingleview:164,trainidx:[19,20,127,139,191],trainimag:129,trainimageslist:164,trainingdata:81,trainingdatamat:81,trainingfaces_24:97,trainkeypoint:129,trainm:174,trainpath:164,trait:[8,10,114],trajectori:223,tran:[154,219],transact:[31,101,106,111,162,183,211],transfer:[27,66,122,194],transform:0,transit:[31,112,201],transitionmatrix:[201,219],translat:[0,8,31,48,57,66,91,92,101,106,108,123,137,156,160,208,219],translation_phas:92,translation_vector:101,transmat:123,transmit:3,transpar:[13,97,117,151,152,190,194],transport:157,transpos:[80,114,116],transposit:[114,123,147,190],transvect:101,travers:[81,82,118,121,136,172],treat:[61,101,106,114,117,118,120,123,145,154,162,170,199,226],tree:[45,62,66,97,101,106,108,110,111,114,118,121,129,135,136,144,152,153,162,164,166,171],tree_iter:118,trees_:166,treetonodeseq:116,trend:27,tri:[9,32,61,66,118,121,125,169,172,178,181,189,206,209,213],trial:111,triangl:[14,48,88,122,156,170],triangle_fan:122,triangle_strip:122,triangul:[101,170],triangular:101,triangulatepoint:100,trick:[10,106,179],trickier:[36,43],trigg:[106,146,187],trigger:31,trim:[66,97,171],trivedi:[149,219],trivial:144,tro2010:111,troubl:[13,60],troubleshoot:64,troublesom:[10,11,66,75],trough:61,truncate_pruned_tre:172,trust:[59,228],truth:[14,181],try1d:114,try_gpu:207,try_use_gpu:[210,212],tryreuseinputimag:219,tsang:123,tu06:106,tune:[3,128,136,154,172,194],tupl:[101,114,119,120,125,131,157,179],turati:106,turk:[106,211],turn:[8,10,27,31,35,46,58,66,74,80,104,106,108,114,119,124,128,152,156,167,171,222,223],tutori:[0,1],tutorial1:66,tutorial_cod:[0,3,8,9,11,12,27,31,32,50,66,82],tuytelaar:184,tvec1:101,tvec2:101,tvec3:101,tvec:[0,1,101,137],twaek:3,tweak:[3,112],twice:[50,63,71,81,113,114,117,138,142,149,154,156,201,219],two:[0,3],txt:[69,70,97,105,106,110,114,117],type:[0,3,5,6,7,8,9,10,11,12,13,14],type_5_8:131,type_7_12:131,type_9_16:[128,131],type_id:[0,9,121],type_nam:121,typedef:[114,118,121,123,138,157,170,222],typenam:[114,115,121,123,124,125,135,138,163,164,223],typesaf:64,typic:[3,31,62,80,95,101,112,113,114,118,119,120,123,125,138,149,159,181,192,193,194,201,219],typical:112,ubuntu:[60,63,71,152],uchar:[7,9,10,11,12,96,114,117,119,120,123,124,125,127,128,129,138,149,152,155,164,166,190,201,209,212,219],uchar_max:152,uchar_min:124,uci:178,ucsd:106,udev:60,ues01:[209,211],uex:32,uialertview:77,uibutton:80,uiimag:78,uiimagefromcvmat:78,uiimageview:80,uikit:80,uint64:123,uiviewcontrol:80,ultim:123,unadapt:126,unari:[11,114],unbind:116,uncalibr:101,unchang:[120,123],uncheck:[60,64],uncom:47,uncompl:60,uncompressed_nv12:149,uncompressed_uyvi:149,uncompressed_yuv420:149,uncompressed_yuyv:149,uncompressed_yv12:149,uncorrel:106,undefin:[12,31,61,76,123,138,162],under:[31,33,34,60,62,66,68,69,74,75,77,80,101,106,108,109,110,123,131,146,149,186,192,194,206,210],underfit:181,undergo:206,underli:[13,62,104,114,118,119,120,122,123,125,219],underlin:66,underpopul:38,undersc:112,understand:[3,15,76,81,86,112,141,144,192],undesir:[3,75,203],undist:0,undistort2:156,undistort:[0,101],undistortimag:100,undistortpoint:100,unequ:123,unfamiliar:64,unformat:122,unfortun:[0,26,31,87],uni:114,unicod:66,unifi:[104,182],uniform:[13,14,22,23,24,36,38,41,51,52,53,54,55,82,116,120],uniformli:[11,120,123],union:[32,120,121,131,178],uniqu:[9,25,32,66,101,104,114,121,124,222],uniquenessratio:101,unit:[0,27,101,105,106,112,122,123,124,199,216,219],uniti:[101,123,156],univers:[3,106,114,152,157,171,174],unix:[59,60,152],unknown:[0,43,60,104,118,119,121,174,182,183,186],unless:[11,13,71,74,75,101,114,120,123,124,131,153,159,165,166,167,174,190],unlik:[60,118,123,155,165,174,179,219],unlimit:120,unmap:[122,138],unmapdevic:116,unmaphost:116,unnam:125,unnecessari:[13,27,66,75,141,192],unnorm:[114,155],unoccupi:118,unord:118,unori:118,unpack:[59,60,63,71,74],unpleas:74,unplug:60,unpredict:61,unprun:172,unreferenc:190,unregist:121,unregistertyp:116,unsatisfiedlink:64,unset:222,unsharp:114,unsign:[0,10,12,13,14,101,114,119,120,121,122,123,124,125,136,138,142,149,152,153,159,187,193,201,219,222],unsupervis:[108,165,174,219],unsupport:[124,152],until:[7,10,30,34,35,38,39,40,44,48,50,58,65,66,74,89,114,118,121,123,124,128,136,138,145,153,154,160,179,186,219],unus:[11,121,149,190,194,201,212],unusu:123,unverifi:60,unvisit:[111,118],unwant:155,unzip:59,up_diff:159,up_vector:[222,223],upcom:[66,75],updat:[30,33,35,41,42,46,49,50,59,60,64,65,66,74,76,92],update_bas:[176,196],update_map:46,update_weight:179,updatebas:[176,196],updatepos:223,updatewidgetpos:221,updatewindow:150,updiff:159,upgrad:74,upload:[27,66,138,184,190,194],uploadkeypoint:184,upon:[120,153],upper:[0,10,12,13,27,31,32,36,40,43,75,101,114,120,123,124,142,147,157,159,170,179,183,186],upperb:123,upperlevel:142,upright:[97,106,184],upsampl:[50,142,155,192],upscal:219,upscale_averaging_radiu:219,upscale_averaging_radiud:219,upscale_sigma_color:219,upscale_sigma_dist:219,upsid:46,upsiz:50,uptr:11,upward:[114,162],url:[60,62],usabl:62,usag:[8,9,10,11,17,18,19,20,32,37,38,44,65,66,70,75,76,91,94,95,97,101,104,106,108,109,110,122,124,125,128,136,143,151,153,159,162,166,175,181,187,202,223],usb:60,usb_driv:60,use_1se_rul:172,use_auto_param:113,use_equalize_hist:113,use_extrinsic_guess:[101,137],use_harri:154,use_initial_dispar:113,use_local_init_data_cost:[137,189],use_median_filt:113,use_previ:169,use_smart_id:113,use_surrog:[171,172,175,181],use_svm:182,useag:190,useextrinsicguess:101,useful:112,useharri:154,useharrisdetector:[22,24,128,149,154,201],useharrisdetector_:149,useinitialflow:[149,201],uselogsampl:3,useoptim:116,useprevi:169,useprovidedkeypoint:[131,184],user:[0,3,5,7,9,10,13,29,30,33,34,35,36,38,39,40,41,43,44,46,48,49,50,58],user_block_s:[142,197],userdata:[118,138,151,153,157],useretinalogsampl:112,usernam:62,ushort:[119,123,166],usr:[60,64,69,71,95,106,108,110],usual:[0,5,7,8,10,12,13,25,31,33,36,41,47,48,50,60,61,62,66,69,75,76,78,93,101,114,118,119,120,123,124,125,127,136,138,141,146,149,154,155,156,172,179,182,183,191,192,219,228],utf:125,util:30,utsi:31,uyttendael:211,uyvi:149,v03:[211,214],v0compressionparamet:[3,112],v10:62,v7a:[59,60,61,231],v_i:187,v_next:[118,162],v_prev:118,val1:155,val2:155,val:[27,31,64,96,117,118,120,124,138,155,199,207],valarrai:112,valbuf:145,valid:[0,7,10,13,31,32,60,65,74,76,95,101,103,106,108,109,110,112,120,121,123,138,165,171,172,175,181,183,194,200,219],valid_pix_roi1:101,valid_pix_roi2:101,valid_pixel_roi:101,validpixroi1:101,validpixroi2:101,validpixroi:101,valu:[0,3,6,7,8,9,10,11,12,13,14,19,25,27,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,47,49,50,58,60,62,64,66,74,75,76,82,93,94,95],valuabl:[29,66,86,101],value2:151,value_typ:114,van:[126,184,219],vandergheynst:131,var_idx:[172,176,178,182,196],var_nam:60,var_typ:182,var_valu:[60,172],vari:[5,13,33,37,44,93,101,106,120,124,142,157,179,183,197,223],variabl:[0,9,11,22,23,24,25,27,30,33,34,35,37,39,40,41,42,44,45,46,47,48,49,50,58,60,61,64,66,68],variable_index:172,varianc:[106,123,135,149,155,192,201,219],variant:[11,63,97,101,111,114,117,118,119,120,121,123,126,127,128,129,131,133,139,154,159,162,171,172,191,199],variat:[10,25,45,58,101,106,112,113,117,164,172],varidx:[171,172,175,180,181,183],varieti:[14,81,122,165,194],variou:[59,62,101,103,106,112,114,118,123,124,125,141,144,151,155,156,159,172,179,182,186,192],varthreshold:[149,201,219],varthresholdgen:[201,219],vartyp:[171,172,175,181],varyimgboundwithscal:128,varyxystepwithscal:128,vassilvitskii:[115,196],vc10:74,vc11:74,vc1:149,vec1:123,vec2:[114,123,139],vec2b:114,vec2d:[114,174,222,223],vec2f:[44,91,101,114,154],vec2i:[114,223],vec3:114,vec3b:[7,10,56,81,82,96,114,117],vec3d:[101,114,222,223],vec3f:[43,91,92,96,101,114,154,222],vec3i:114,vec4:114,vec4b:[114,152],vec4d:114,vec4f:[114,162],vec4i:[44,51,52,53,54,55,56,114,154,162],vec6d:114,vec6f:[23,114,162],vec_fil:97,vec_file_nam:97,vecsiz:123,vect:123,vector:[0,1,6,9,10,11,13,16,17,18,19,20,21,22,24,27,32,36,43,44,48,51,52,53,54,55,56],veli:169,veloc:169,velx:169,vendor:[60,194],vendorid:60,ver:231,verb:62,verbatim:62,verbos:[9,12,60,66,69,131,164],veri:[3,19,27,31,33,37,41,42,45,59,61,62,68,73,80,82,96,97,101,104,106,107,108,109,110,114,118,119,123,124,131,136,149,155,159,171,172,173,181,184,194,197,201,211,219,226],verifi:[58,60,62,76,101,106,110,194],versa:[101,123,127],versatil:117,versiob:114,version:[0,3,9,11,12,15,23,27,31,32,35,39,43,44,59,60,61,62],versu:106,vert:56,vertex:[117,118,122,162,170],vertex_dt:121,vertic:[6,8,14,47,101,104,106,108,110,114,117,118,121,122,123,141,142,145,147,149,155,156,159,162,169,170,191,192,193,201,213,222,223],vfpv3:63,vfw:152,vga:95,vi1:27,vi2:27,via:[0,8,9,10,12,13,27,31,32,59,60,61,63,66,74,89,101,114,117,118,120,121,123,124,128,137,138,139,157,160,175,191,199,200],viabl:27,vice:[101,123,127],victor:[2,4,15,21,28,29,57,66,73,79,83,85,90],vid5:0,vid_xxxx:60,video:[0,2,3,4,5,10,13,27,28,29],video_dmtx:152,video_homographi:101,video_read:149,video_thread:152,video_writ:149,videocamera:80,videocaptur:[3,31,32,61,94,95,104,110,114,119,150],videofilt:80,videoread:149,videowrit:[32,149,150],vienna:136,view:[0,8,12,59,60,61,65,66,73,75],viewabl:8,viewcontrol:[77,80],viewdidload:[77,80],viewdoc:[173,202],viewer:[66,76,91,222],viewgrai:0,viewpoint:222,vincent:131,viola01:186,viola2001:97,viola2004:97,viola:[97,106,186],violajones_cvpr2001:186,violat:124,virtual:[59,60,62,101,104,111,112,113,114,124,126,127,128,129,133,141,144,149,155,163,164,170,178,182,186,192,201,207,209,210,212,213,214,216,219],virtualdub:32,visa:167,visibl:[3,31,35,61,101,156,222],vision:[3,5,7,13,25],visit:[60,111,118],visitor:149,visual:[0,3,8,11,14,16,31,34,64,66,73,74],visualizeinplac:146,vivek:211,viz3d:[88,89,91,92,221],viz:[86,88],vizcor:[88,89,91,92],vldb:136,vocabulari:[111,133],voic:[74,181],voil:75,vol:[31,106,111,186,187,219],volum:[114,211],voronoi:[159,170,214],vote:[142,154,171,176,181,186],votesthreshold:142,voxel:114,vpoint:13,vscale:[69,117],vscroll:222,vsevolod:[2,4,15,21,28,29,57,66,73,79,83,85,90],vsix:76,vsprop:75,vtk:[70,88,223],vtk_major_vers:88,vtkactor:[88,223],vtkcellarrai:88,vtkidlist:88,vtkpoint:88,vtkpolydata:88,vtkpolydatamapp:88,vtkprop:[88,223],vtksmartpoint:[88,223],vtktriangl:88,vtx:118,vtx_idx:118,vtx_size:118,vxy:11,w3c:[121,125],wacv00:219,wadsworth:172,wagner:[106,108,109,110],wai:[0,5,7,8],wait:[0,5,7,27,30,34,35,36,38,39,40,43,44,46,48,50,58,59,65,66,72,75,96,153,227],waitforcomplet:27,waitkei:[0,3,5,7,8,14,16,17,18,19,20,22,23,24,25,30,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,65,69,70,72,75,81,82,84,93,94,95,96,103,106,108,109,110,114,119,150,152],wald2002:181,wald:181,walk:[106,108,110,216],wang:[31,136,137],wanna:[3,15],want:[0,3,7,8,10,11,12,13,27,29,31,32,35,36,42,46,47,48,50,58,59,60,62,64,65,66,69,71,72,73,74,75,76,80,104,106,108,109,110,112,114,117,118,119,123,125,149,152,155,156,157,162,165,171,172,178,179,183,184,186,223,229],wapi:[3,112],warn:[60,66,80,112],warp:[48,119,142,149,193,205,215],warp_dst:48,warp_inverse_map:[142,156],warp_mat:48,warp_rotate_dst:48,warp_rotate_window:48,warp_window:48,warpaffin:[48,123],warpbackward:215,warper:[210,216],warper_:210,warpperspect:[101,123],warppoint:215,warproi:215,warranti:[106,108,110],warrow:221,wasn:[149,219],wasstop:[89,92,221],wast:[27,118],watch:[10,66,73,74],watersh:158,watson:108,watt:108,wave:213,wave_correct_horiz:213,wave_correct_kind_:210,wave_correct_vert:213,wavecorrect:210,wavecorrectkind:210,wavefront:192,wavelet:106,wcameraposit:[91,221],wcircl:221,wcloud:[91,221],wcloudcollect:221,wcloudnorm:221,wcone:221,wcoordinatesystem:[91,92,221],wcube:[92,221],wcylind:221,weak:[97,111,157,171,175,184],weak_count:[171,175],weak_respons:171,weakrespons:175,web:[3,64,66,74,155,159,181],webcam:[3,31,84,105,110,112],webkit:74,webpag:66,websit:[3,66,70],week:66,wehenkel:173,wei:211,weickert:149,weight:[11,12,34,81,97,113,118,121,123,137,142,147,148,151,155,157,159,160,162,165,169,171,172,174,176,179,183,186,187,189,192,196,199,202,207,217,219],weight_map:207,weight_trim_r:[97,171],weights0:174,weights1:[142,192],weights2:[142,192],weighttrimr:97,weimin:149,weird:80,welch95:219,welch:219,welcom:[3,64,77],well:[0,3,7,8,9,10,13,16,23,30,31,35,37,38,39,45,59,60,62],went:[31,62,74],were:[36,69,95,101,103,105,106,108,109,110,111,175,187,210],wgrid:221,what:0,whatchout:112,whatev:[3,36,64,69,101,108,110,121,152],whatnot:68,wheel:76,when:[0,3,9,10,11,12,13,25,27,31,32,36,37,39,41,47,50,59,60,61,62,64,66,68,70,72,74,75,76,80,81,82,83,89,96,97,101,104,106,107,111,112,114,115,117,118,119,120,121,123,124,125,127,128,131,136,138,141,142,144,145,146,147,148,149,152,153,154,155,156,157,159,160,161,162,165,167,170,172,174,178,181,182,183,186,190,191,193,194,199,201,219,223,228,230,231],whenev:[8,13,27,29,30,32,58,68,75,101,110,118,210],where:[0,3,6,7,12,13,21,25,27,31,34,36,37,39,40,43,45,46,47,57,59,60,62,64,65,66,69,71,74,75,76,77,80,81,96,97,101,104,106,108,110,113,114,117,118,119,120,121,122,123,124,125,126,128,131,135,137,139,142,144,146,148,151,152,153,154,155,156,157,159,160,161,162,165,166,170,172,174,175,178,179,181,183,184,186,187,189,192,193,197,199,202,209,213,219,222,223],wherea:[33,35,58,95,97,144,153,155,156,159,173,194],whether:[60,64,76,97,101,104,106,108,110,114,117,118,121,122,123,124,125,137,138,141,142,143,144,146,149,152,154,155,156,157,162,169,171,172,176,180,186,189,191,192,194,196,199,201,210,219,222],which:[0,3,6,9,13,14,25,30,32,33,34,35,36,37,38],which_imag:101,whichev:120,whichimag:101,white:[0,6,8,13,33,49,58,81,88,97,101,114,142,157,159,162,186,202,222,223],whitebal:152,whiten:3,whithen:112,who:[13,60,75,108,138,223],whoever:66,whole:[10,13,38,41,48,65,66,69,82,101,105,106,109,114,117,118,120,121,123,125,141,146,154,155,157,159,162,170,172,175,179,180,182,183,186,190,191,192,194,195,201,208,217,219,222,223],wholecol:190,wholerow:190,wholes:[114,155,190],whose:[13,19,20,27,32,65,81,114,117,119,121,123,153,157,159,162,172,184,186,219,222,223],why:[5,6,7,8,10,11,15,21],wide:[6,31,33,50,66,81,101,114,142,155,159,192,194],wider:[38,101,159],widget2d:221,widget3d:[88,221],widget_accessor:88,widgeta:223,widgetaccessor:[88,221],widgetb:223,widrow:179,width:[0,5,14,31,32,34,39,61,62,64,66,76,78,81,82,84,95,97,101,106,108,110,114,117,120,123,137,138,141,142,149,152,153,154,155,166,169,176,189,190,192,193,201],width_step:[137,189],widthand:[137,189],widthstep:[114,120],wiener:123,wiesel:106,wiki:[70,106,115,123,131,154,160,162,179,203,219],wikipedia:[115,123,131,154,160,162,179,203,219],willamowski:133,william:136,willow:106,wimage3d:221,wimageoverlai:221,win32:[75,114,122],win:[101,154],win_rf:31,win_sigma:[146,191],win_siz:[146,169,191,219],win_strid:[146,191],win_ut:31,window:[5,6,7,11,14,22,23,24,25,27,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59],window_2:222,window_autos:[11,23,65,70,75,153],window_coord:222,window_freeratio:65,window_funct:160,window_height:14,window_imag:35,window_keepratio:65,window_nam:[14,34,40,41,42,45,47,49,50,58,66,84,151,153,222],window_norm:[65,153],window_opengl:153,window_s:222,window_width:14,windowmanag:61,windownam:[151,153],windowslogo:[5,30],winform:150,wink:106,winnam:[151,153],winner:[131,181],winsiz:[22,137,149,154,160,169,189,201,219],wire_fram:223,wirefram:[222,223],wise:[10,13,74,75,114,120,123,145,159,167,170,195,199],wish:[27,64,74,106,107,123,155,199],wiskott97:106,wiskott:106,wit:50,with_cuda:144,with_intelperc:94,with_opencl:194,with_openclamdbla:194,with_openclamdfft:194,with_opengl:122,with_openni:95,with_x:74,withderiv:219,withen:112,within:[3,33,59,60],without:[3,10,41,59,60,62,63,66,71,74,95,96,97,101,106,108,109,110,111,112,114,117,118,119,120,121,124,130,137,138,142,143,144,146,150,151,153,157,159,162,171,172,181,182,189,191,194,210,219,223,231],wizard:[60,74],wj10:[209,211],wline:[92,221],wmesh:221,wndrect:122,wolf:73,won:[3,50,106,153,223],wonder:[38,85,86,104],word:[8,11,13,27,66,69,81,82,111,118,120,133,172,175,179,186,194],work:[0,3,7,9,10,11,13],work_typ:114,workaround:[123,179],workbench:60,workflow:225,workgroup:[192,194],workitem:194,workshop:[149,219],workspac:[59,60,61,64,69],workspace_loc:69,workstat:[69,70],world:[0,2,13,31,66,69,73,77,82,86,101,106,151,222],worri:[31,66],wors:37,worst:157,worth:[10,66,81],would:[3,6,7,8,9,10,26,27,31,32,34,36,42,45,46,47,60,65,66,69,73,75,86,87,101,104,106,110,113,114,119,136,159,162,194,219],wouldn:106,wplane:221,wpolylin:221,wrap:[62,114,128,138,163,164,187,194,222],wrapper:[3,80,101,114,119,120,122,126,127,128,129,163,186,187,192,212,213],write:[1,3,7,9,10,13,15,22,26,27,32,33,34,36,62,64],write_onli:122,write_termcriteria:121,writebufferrect:194,writecom:116,writefilenod:116,writefram:152,writeint:116,writen:112,writeobj:116,writer:[116,118],writeraw:116,writerawdata:116,writestr:116,writestructcontext:114,written:[0,11,26,32,44,59,60,61,63,66,76,87,97,105,106,108,109,110,111,114,118,121,122,125,131,149,152,155,165],written_elem:118,wrong:[3,74,76,101,106,162],wsphere:221,wta_k:[127,131,139],wtext3d:221,wtext:221,wtrajectori:221,wtrajectoryfrustum:221,wtrajectoryspher:221,wtriangl:88,wwidgetmerg:221,www:[62,66,94,95,101,106,108,109,110,114,121,125,142,155,159,167,175,181,183,186,202,219],x100:62,x64:[60,68,74,124],x86:[59,60,62,68,74,124,231],x86_64:62,x_1:14,x_2:14,x_diff:118,x_kei:121,x_order:47,x_row:[139,184],xcode:[62,67,77,80],xiangxin:97,xmap:[142,193,216],xmax:97,xmin:97,xml:[0,1,3],xmln:61,xnode:121,xor:[117,123],xorder:155,xshift:142,xtionpro:95,xvid:32,xx1:0,xx2:0,xx3:0,xx4:0,xx5:0,xx6:0,xx7:0,xx8:0,xyz:[95,142,159],xyzw:137,y_1:14,y_2:14,y_diff:118,y_dir:222,y_kei:121,y_order:47,y_row:[139,184],yalefac:106,yalefacedatabas:106,yaml:[0,1],yang2010:[137,189],yang:137,ycc:159,ycrcb:[13,159],year:[27,64],yellow:[6,76,222,223],yet:[59,66,69,73,76,81,114,119,120,121,155,159,165,170,171,174,178],yeung:211,yield:[35,101,104,108,113,114,115,118,156,165,174,196,219],ymap:[142,193,216],ymax:97,ymin:97,yml:[109,112,121,125,164],ynamic:75,ynode:121,yor:21,yorder:155,york:[180,211],you:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],your:[0,1,2,3,6,9,10,11,13,14,15,16,19,21,27,28,29,31,32,36,40],yourself:[26,31,32,60,62,65,66,74,75,87,114,155],yourselv:59,youtub:[0,9,10,11,12,13,27,31,32,66,74,78,82],ypcbcr:80,yshift:142,yuen90:[142,154],yuen:154,yum:60,yuv420:149,yuv422:149,yuv444:149,yuv:[11,80,123],yuy2:149,yuyv:149,yv12:149,yve:219,zach2007:219,zach:219,zero:[0,3,6,7,8,9,10,12,13,14,23,25,27,30,31,32,34,35,36,40,43,44,45,48,50,51,52,53,54,55,56],zero_zon:154,zerozon:[22,154],zhang2000:101,zhang:[97,101],zhao03:106,zhao:106,zhe:136,zhen:97,zhu:97,ziggurat:123,ziggurat_algorithm:123,zip:[59,74,106],zivkov:[149,219],zivkovic2004icpr:219,zone:[33,154],zoom:[50,76,101,151,156],zoranz:219},titles:["Camera calibration With OpenCV","Camera calibration with square chessboard","<em>calib3d</em> module. Camera calibration and 3D reconstruction","Discovering the human retina and its use for image processing","<em>contrib</em> module. The additional contributions made available !","Adding (blending) two images using OpenCV","Basic Drawing","Changing the contrast and brightness of an image!","Discrete Fourier Transform","File Input and Output using XML and YAML files","How to scan images, lookup tables and time measurement with OpenCV","Interoperability with OpenCV 1","Mask operations on matrices","Mat - The Basic Image Container","Random generator and text with OpenCV","<em>core</em> module. The Core Functionality","Detection of planar objects","Feature Description","Feature Detection","Feature Matching with FLANN","Features2D + Homography to find a known object","<em>feature2d</em> module. 2D Features framework","Detecting corners location in subpixeles","Creating yor own corner detector","Shi-Tomasi corner detector","Harris corner detector","General tutorials","Similarity check (PNSR and SSIM) on the GPU","<em>gpu</em> module. GPU-Accelerated Computer Vision","<em>highgui</em> module. High Level GUI and Media","Adding a Trackbar to our applications!","Video Input with OpenCV and similarity measurement","Creating a video with OpenCV","Eroding and Dilating","Smoothing Images","Back Projection","Histogram Calculation","Histogram Comparison","Histogram Equalization","Template Matching","Canny Edge Detector","Adding borders to your images","Making your own linear filters!","Hough Circle Transform","Hough Line Transform","Laplace Operator","Remapping","Sobel Derivatives","Affine Transformations","More Morphology Transformations","Image Pyramids","Creating Bounding boxes and circles for contours","Creating Bounding rotated boxes and ellipses for contours","Finding contours in your image","Convex Hull","Image Moments","Point Polygon Test","<em>imgproc</em> module. Image Processing","Basic Thresholding Operations","OpenCV4Android SDK","Introduction into Android Development","Android Development with OpenCV","Introduction to OpenCV Development with Clojure","Cross compilation for ARM based Linux systems","Introduction to Java Development","Load and Display an Image","How to write a tutorial for OpenCV","Installation in iOS","Using OpenCV Java with Eclipse","Using OpenCV with Eclipse (plugin CDT)","Using OpenCV with gcc and CMake","Installation in Linux","Load, Modify, and Save an Image","Introduction to OpenCV","Installation in Windows","How to build applications with OpenCV inside the <em>Microsoft Visual Studio</em>","Image Watch: viewing in-memory images in the Visual Studio debugger","OpenCV iOS Hello","OpenCV iOS - Image Processing","<strong>OpenCV iOS</strong>","OpenCV iOS - Video Processing","Introduction to Support Vector Machines","Support Vector Machines for Non-Linearly Separable Data","<em>ml</em> module. Machine Learning","Cascade Classifier","<em>objdetect</em> module. Object Detection","OpenCV Tutorials","<em>video</em> module. Video analysis","Creating Widgets","Launching Viz","<strong>OpenCV Viz</strong>","Transformations","Pose of a widget","Features2d","Senz3D and Intel Perceptual Computing SDK","Kinect and OpenNI","Operations with images","Cascade Classifier Training","OpenCV User Guide","Welcome to opencv documentation!","calib3d. Camera Calibration and 3D Reconstruction","Camera Calibration and 3D Reconstruction","contrib. Contributed/Experimental Stuff","ColorMaps in OpenCV","FaceRecognizer","Changelog","Face Recognition with OpenCV","FaceRecognizer - Face Recognition with OpenCV","Gender Classification with OpenCV","Saving and Loading a FaceRecognizer","Face Recognition in Videos with OpenCV","OpenFABMAP","Retina : a Bio mimetic human retina model","Stereo Correspondence","Basic Structures","Clustering","core. The Core Functionality","Drawing Functions","Dynamic Structures","Introduction","Basic C Structures and Operations","XML/YAML Persistence (C API)","OpenGL interoperability","Operations on Arrays","Utility and System Functions and Macros","XML/YAML Persistence","Common Interfaces of Descriptor Extractors","Common Interfaces of Descriptor Matchers","Common Interfaces of Feature Detectors","Common Interfaces of Generic Descriptor Matchers","Drawing Function of Keypoints and Matches","Feature Detection and Description","features2d. 2D Features Framework","Object Categorization","flann. Clustering and Search in Multi-Dimensional Spaces","Clustering","Fast Approximate Nearest Neighbor Search","Camera Calibration and 3D Reconstruction","Data Structures","Feature Detection and Description","gpu. GPU-accelerated Computer Vision","Image Filtering","Image Processing","Initalization and Information","GPU Module Introduction","Matrix Reductions","Object Detection","Operations on Matrices","Per-element Operations","Video Analysis","highgui. High-level GUI and Media I/O","Qt New Functions","Reading and Writing Images and Video","User Interface","Feature Detection","Image Filtering","Geometric Image Transformations","Histograms","imgproc. Image Processing","Miscellaneous Image Transformations","Motion Analysis and Object Tracking","Object Detection","Structural Analysis and Shape Descriptors","Common Interfaces of Descriptor Extractors","Common Interfaces of Generic Descriptor Matchers","Expectation Maximization","Feature Detection and Description","Histograms","legacy. Deprecated stuff","Motion Analysis","Planar Subdivisions (C API)","Boosting","Decision Trees","Extremely randomized trees","Expectation Maximization","Gradient Boosted Trees","K-Nearest Neighbors","ml. Machine Learning","MLData","Neural Networks","Normal Bayes Classifier","Random Trees","Statistical Models","Support Vector Machines","Feature Detection and Description","nonfree. Non-free functionality","Cascade Classification","Latent SVM","objdetect. Object Detection","Camera Calibration and 3D Reconstruction","Data Structures","Feature Detection And Description","Image Filtering","Image Processing","OpenCL Module Introduction","Matrix Reductions","ml.Machine Learning","Object Detection","ocl. OpenCL-accelerated Computer Vision","Operations on Matrics","Data Structures and Utility Functions","Video Analysis","Denoising","Inpainting","photo. Computational Photography","OpenCV API Reference","Autocalibration","Image Blenders","Camera","Exposure Compensation","High Level Functionality","Stitching Pipeline","Features Finding and Images Matching","Rotation Estimation","Seam Estimation","stitching. Images stitching","Images Warping","Super Resolution","superres. Super Resolution","Motion Analysis and Object Tracking","video. Video Analysis","viz. 3D Visualizer","Viz","Widget","Java API","OpenCV4Android Reference","Base Loader Callback Interface Implementation","Install Callback Interface","Introduction","Java OpenCV Loader","Loader Callback Interface","Manager Workflow","Android OpenCV Manager"],titleterms:{"_tp":114,"boolean":229,"case":[3,10,11,12],"class":111,"final":223,"float":125,"function":[10,12,15,116,117,124,130,151,157,185,200,210],"import":[59,97,172],"int":125,"new":[68,151],"return":10,"static":61,"super":[217,218],"transient":3,"typeof":121,"void":[227,230],absdiff:[123,148,199],abssum:[145,195],acceler:[28,140,198],access:96,accumul:160,accumulateproduct:160,accumulatesquar:160,accumulateweight:160,acquirebitstream:149,activ:226,activatecontoursprocess:112,activatemovingcontoursprocess:112,adaptivebilateralfilt:[155,192],adaptivethreshold:159,add:[62,66,74,123,127,129,133,148,199],addcloud:223,addit:[4,231],addref:114,address:10,addtext:151,addweight:[123,148,199],adjust:7,adjusteradapt:128,adjustroi:114,affin:48,algorithm:[106,114],align:[106,108,110],alignptr:124,aligns:124,alloc:[119,124],alphacomp:142,analysi:[87,149,160,162,169,201,219,220],android:[59,60,61,232],ant:64,apart:62,api:[119,121,157,170,205,224],appendix:[106,108,110],appli:209,applic:[30,60,61,75,77,231],applycolormap:103,applyquant:166,applytransform:223,approxchain:162,approxim:136,approxpolydp:162,architectur:228,arclength:162,argument:75,arithmet:119,arm:63,arrai:[122,123],arrowedlin:117,assignto:114,async:61,autocalibr:206,automat:119,avail:[4,39],avd:60,back:35,background:97,backgroundsubtractor:[201,219],backgroundsubtractormog2:219,backgroundsubtractormog:219,backproject:123,backsubst:123,base:[63,186,187,226],basecolumnfilt:155,basecolumnfilter_gpu:[141,192],basefilt:155,basefilter_gpu:[141,192],baserowfilt:155,baserowfilter_gpu:[141,192],basic:[3,6,12,13,58,80,96,114,120],bay:180,begin:[114,125],bestof2nearestmatch:212,bfmatcher:127,bilater:34,bilateralfilt:[142,155,192],binari:[58,106],bind:122,bio:112,bitwise_and:[123,148,199],bitwise_not:[123,148,199],bitwise_or:[123,148,199],bitwise_xor:[123,148,199],black:49,blend:[5,207],blender:207,blendlinear:[142,192],blocksgaincompens:209,blur:[62,141,155,192],boost:[171,175],border:41,borderinterpol:155,bound:[51,52],boundingrect:162,bowimgdescriptorextractor:133,bowkmeanstrain:133,bowmsctrain:111,bowtrain:133,box:[34,51,52],boxfilt:[141,155,192],briefdescriptorextractor:126,bright:7,brisk:131,broxopticalflow:149,bruteforcematcher_gpu_bas:139,bruteforcematcher_ocl_bas:191,buffer:122,build:[60,63,64,67,71,74,75],builder:60,buildmap:216,buildopticalflowpyramid:219,buildpyramid:155,buildwarpaffinemap:[142,193],buildwarpcylindricalmap:[142,193],buildwarpperspectivemap:[142,193],buildwarpplanemap:[142,193],buildwarpsphericalmap:[142,193],built:74,bundleadjusterbas:213,bundleadjusterrai:213,bundleadjusterreproj:213,calc:219,calc_error:[171,172,175,181],calcbackproject:157,calcbackprojectpatch:157,calccat:186,calccovarmatrix:123,calcerror:213,calcglobalorient:219,calchist:[142,157,193],calcjacobian:213,calckeypointsloc:139,calcmotiongradi:219,calcopticalflowbm:169,calcopticalflowfarneback:219,calcopticalflowh:169,calcopticalflowlk:169,calcopticalflowpyrlk:219,calcopticalflowsf:219,calcord:186,calcpgh:167,calcprobdens:157,calcsubdivvoronoi2d:170,calcul:[10,36],calib3d:[2,100],calibr:[0,1,2,100,101,137,189],calibratecamera:101,calibrationmatrixvalu:101,callback:[226,227,230],calonderdescriptorextractor:163,camera:[0,1,2,31,80,100,101,137,189,208,222],cameraparam:208,camshift:219,cancel:227,canmaphostmemori:138,canni:[40,142,154,191],carttopolar:[123,147,199],cascad:[84,97,186],cascadeclassifi:186,cascadeclassifier_gpu:146,cast:223,categor:133,cdt:[60,69],ceil:124,cell:3,chang:[7,77],change_var_idx:178,change_var_typ:178,changelog:105,channel:[3,114],check:[27,183],checkhardwaresupport:124,checkifgpucallreason:[137,189],checkrang:123,chessboard:1,chowliutre:111,chromaformat:149,circl:[43,51,117],classif:[108,186],classifi:[84,97,129,180,186],clear:[114,127,129,175,182,187],clearbuff:112,cleargraph:118,clearhist:157,clearmemstorag:118,clearnd:120,clearseq:118,clearset:118,clearsubdivvoronoi2d:170,cliplin:117,clojur:62,clone:[114,121,122,127,129,186],clonegraph:118,cloneimag:120,clonemat:120,clonematnd:120,cloneseq:118,clonesparsemat:120,close:[49,149],cluster:[115,133,134,135],cmake:[67,69,70,71],code:[0,3,5,6,7,8,9,14,17,18,19,20,22,23,24,25,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,62,63,65,66,71,72,81,82,84,88,89,91,92,93],codec:149,col:114,collect:97,collectgarbag:[212,217,219],color:222,colormap:103,colrang:114,columnsum:[142,192],command:[60,67,71,75],common:[13,126,127,128,129,163,164],compar:[123,148,199],comparehist:157,comparison:[37,111],compat:[94,95],compens:209,compil:[63,144],completesymm:123,composepanorama:210,composert:101,comput:[28,60,81,94,123,126,133,140,198,204],computecorrespondepilin:101,computeprojectionmatrix:222,concept:119,conclus:[27,106],configur:68,constant:[229,230],contain:13,content:[97,106,107,108,110],contour:[51,52,53],contourarea:162,contrast:7,contrib:[4,102],contribut:[4,102],convert:97,convertkeypoint:139,convertmap:156,converto3drai:222,convertpointsfromhomogen:101,convertpointshomogen:101,convertpointstohomogen:101,convertscal:120,convertscaleab:123,convertto:[114,199],converttowindowcoordin:222,convex:54,convexhul:162,convexitydefect:162,convolut:42,convolv:[142,192],convolvebuf:142,cool:[33,58],copi:120,copyfrom:122,copyhist:157,copymakebord:[142,155,192],copyto:[114,122,199],core:[10,15,116],corner:[22,23,24,25],cornereigenvalsandvec:154,cornerharri:[142,154,193],cornermineigenv:[142,154,193],cornersubpix:154,correct:[201,219],correctmatch:101,correspond:113,count:96,countnonzero:[123,145,195],countnonzeroel:166,creat:[13,23,32,51,52,62,70,88,97,106,108,110,114,122,126,127,128,142,149,179,186],createboxfilt:155,createboxfilter_gpu:[141,192],createbutton:151,createchildmemstorag:118,createcontinu:138,createdata:120,createdefault:210,createderivfilt:155,createderivfilter_gpu:[141,192],createeigenfacerecogn:104,createfilter2d_gpu:[141,192],createfisherfacerecogn:104,creategaussianfilt:155,creategaussianfilter_gpu:[141,192],creategpumathead:138,creategraph:118,creategraphscann:118,createhanningwindow:160,createhist:157,createimag:120,createimagehead:120,createlbphfacerecogn:104,createlinearfilt:155,createlinearfilter_gpu:[141,192],createmat:120,createmathead:[120,138],creatematnd:120,creatematndhead:120,creatememstorag:118,createmorphologyfilt:155,createmorphologyfilter_gpu:[141,192],createoptflow_dualtvl1:219,createseparablefilter_gpu:[141,192],createseparablelinearfilt:155,createseparablelinearfilter_gpu:[141,192],createseq:118,createset:118,createsparsemat:120,createsubdivdelaunay2d:170,createsuperresolution_btvl1:217,createtrackbar:153,creativ:94,credit:106,cross:[63,114],crossproduct:120,csv:[106,108,110],cuberoot:124,cudamem:138,cut:[63,67,71],cv_assert:124,cvann_mlp:179,cvann_mlp_trainparam:179,cvarr:120,cvarrtomat:123,cvattrlist:121,cvboost:171,cvboostparam:171,cvboosttre:171,cvbox2d:120,cvdtree:172,cvdtreenod:172,cvdtreeparam:172,cvdtreesplit:172,cvdtreetraindata:172,cvem:[165,174],cvemparam:165,cvertre:173,cvfilenod:121,cvfilestorag:121,cvgbtree:175,cvgbtreesparam:175,cvgraph:118,cvgraphedg:118,cvgraphscann:118,cvgraphvtx:118,cvknearest:176,cvlatentsvmdetectobject:187,cvlatentsvmdetector:187,cvloadlatentsvmdetector:187,cvlsvmfilterobject:187,cvlsvmfilterposit:187,cvmat:[114,120],cvmatnd:120,cvmemblock:118,cvmemstorag:118,cvmemstoragepo:118,cvmldata:178,cvnormalbayesclassifi:180,cvobjectdetect:187,cvparamgrid:183,cvpoint2d32f:120,cvpoint2d64f:120,cvpoint3d32f:120,cvpoint3d64f:120,cvpoint:120,cvquadedge2d:170,cvrect:120,cvreleaselatentsvmdetector:187,cvrtparam:181,cvrtree:181,cvscalar:120,cvseq:118,cvset:118,cvsetelem:118,cvsize2d32f:120,cvsize:120,cvslice:118,cvsparsemat:[114,120],cvstatmodel:182,cvsubdiv2d:170,cvsubdiv2dpoint:170,cvsvm:183,cvsvmparam:183,cvtcolor:[142,159,193],cvtermcriteria:[114,120],cvtraintestsplit:178,cvtreenodeiter:118,cvtseqtoarrai:118,cvtypeinfo:121,cylindricalwarp:[210,216],data:[82,97,104,106,111,119,125,138,190,200],databas:106,datatyp:114,dct:123,dealloc:124,debug:60,debugg:76,decis:172,decomposeprojectionmatrix:101,decrefdata:120,dedic:3,delete_obj:114,demo:[108,110,112],denois:202,dens:[149,201],densefeaturedetector:128,denseopticalflow:219,deprec:168,depth:[94,95,114],deriv:47,descripotorscount:133,descript:[17,103,104,106,112,131,139,166,184,191],descriptor:[93,126,127,129,162,163,164],descriptorextractor:126,descriptormatch:127,descriptors:133,descriptortyp:133,destroyallwindow:153,destroywindow:153,detail:[3,206,207,208,209,212,213,214,216],detect:[16,18,22,85,128,131,139,146,154,161,166,184,186,187,188,191,197],detectmultiscal:[146,186,191],detector:[23,24,25,40,93,128],determin:123,detil:209,develop:[59,60,61,62,64,194],devic:60,deviceid:143,deviceinfo:143,dft:[123,142,199],diag:114,differ:[10,144],dilat:[33,141,155,192],dim:114,dimension:134,discov:3,discret:8,discrimin:187,disparitybilateralfilt:137,displai:65,displayoverlai:151,displaystatusbar:151,distanc:135,distancetocent:196,distancetransform:159,distortpoint:101,divid:[123,148,199],dmatch:127,document:99,doe:[25,35,38,39,42,44],done:66,dot:114,dotproduct:120,doubl:125,download:64,downloadkeypoint:139,draw:[6,117,130],drawchessboardcorn:101,drawcolordisp:137,drawcontour:162,drawkeypoint:130,drawmatch:130,dumpformat:149,dynam:118,dynamicadaptedfeaturedetector:128,eclips:[59,60,68,69],edg:[40,63,67,71],effici:10,eigen:123,eigenfac:106,element:148,elems:114,elemsize1:114,ellips:[52,117],ellipse2poli:117,emd:157,empti:[114,125,127,146,186],enabl:63,encodercallback:149,encoderparam:149,end:[114,125,228],endwriteseq:118,endwritestruct:121,enqueueconvert:138,enqueuecopi:138,enqueuedownload:138,enqueuehostcallback:138,enqueuememset:138,enqueueupload:138,ensuresizeisenough:138,enter:119,entri:66,enviro:74,environ:60,equal:38,equalizehist:[142,157,193],eras:114,erod:[33,141,155,192],eros:33,error:[119,124],estim:[1,213,214],estimateaffine3d:101,estimatefoc:206,estimatenewcameramatrixforundistortrectifi:101,estimaterecommendedparam:[137,189],estimaterigidtransform:219,estimatetransform:210,evenlevel:142,exampl:[76,80],except:124,execut:[69,70],exp:[123,148,199],expect:[165,174],experi:112,experiment:102,explain:93,explan:[0,5,6,7,8,9,14,17,18,19,20,22,23,24,25,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,65,72,81,82,84,88,89,91,92],explicitli:13,exposur:209,exposurecompens:209,express:114,extens:82,extra:157,extractimagecoi:123,extractor:[126,163],extrem:173,fabmap:111,face:[106,107,108,110],facedatabas:106,facerecogn:[104,107,109],farnebackopticalflow:[149,201],fast:[131,136],fast_gpu:139,fastadjust:128,fastatan2:124,fastfeaturedetector:128,fastfre:124,fastmalloc:124,fastnlmeansdenois:202,fastnlmeansdenoisingcolor:202,fastnlmeansdenoisingcoloredmulti:202,fastnlmeansdenoisingmulti:202,fastnonlocalmeansdenois:142,featherblend:207,featur:[17,18,19,21,25,128,131,132,139,154,166,184,186,191,212],feature2d:21,featuredetector:128,featureevalu:186,features2d:[20,93,132],featureset:143,featuresfind:212,featuresmatch:212,feed:[207,209],fernclassifi:164,ferndescriptormatch:164,fgdstatmodel:149,file:[9,31,70,74,97,106,108,110,125],filenod:125,filenodeiter:125,filestorag:125,fill:123,fillconvexpoli:117,fillpoli:117,filter2d:[12,141,155,192],filter:[34,42,141,155,192],filterengin:155,filterengine_gpu:[141,192],filterspeckl:101,find:[20,53,212,214],find_nearest:[176,196],findchessboardcorn:101,findcirclesgrid:101,findcontour:162,findfundamentalmat:101,findgraphedg:118,findgraphedgebyptr:118,findhomographi:101,findinpair:214,findnearestpoint2d:170,findtyp:121,first:231,firsttyp:121,fisherfac:[106,108],fishey:101,fitellips:162,fitlin:162,fix:119,flann:[19,134,135,136],flannbasedmatch:127,flip:[123,147,199],floodfil:159,floor:124,flushseqwrit:118,fly:10,focalsfromhomographi:206,fontqt:151,format:[13,66,97,122,124,149],formatinfo:149,formul:47,fourier:8,frame:80,framework:[21,132],freak:131,free:185,freememori:143,from:[60,63,67,71,74,97,110,125],fromarrai:120,fromplyfil:223,further:67,gaincompens:209,gaussian:[34,50,123],gaussianblur:[141,155,192],gbt:175,gcc:70,gemm:[123,147,199],gender:108,gener:[3,11,14,26,59,70,122,129,144,164,194],genericdescriptormatch:129,geometr:156,get:[48,59,63,64,67,71,104,114,120,152,174],get_class_labels_map:178,get_data:[171,172],get_default_grid:183,get_delimit:178,get_layer_count:179,get_layer_s:179,get_max_k:176,get_miss:178,get_miss_ch:178,get_param:[171,183],get_proxim:181,get_pruned_tree_idx:172,get_respons:178,get_response_idx:178,get_rng:181,get_root:172,get_sample_count:176,get_support_vector:183,get_test_sample_idx:178,get_train_error:181,get_train_sample_idx:178,get_tre:181,get_tree_count:181,get_valu:178,get_var_count:[176,183],get_var_idx:178,get_var_typ:178,get_weak_predictor:171,get_weight:179,getaffinetransform:156,getbackgroundimag:[149,201,219],getblockhistograms:[146,191],getbuildinform:124,getcamera:222,getclasscount:187,getclassnam:187,getcol:120,getcolumnsumfilter_gpu:141,getconvertelem:123,getcov:165,getcputickcount:124,getcudaenableddevicecount:143,getdefaultnewcameramatrix:156,getdefaultobjectnam:125,getdefaultpeopledetector:[146,191],getderivkernel:155,getdescriptor:[133,146,191],getdescriptors:[146,191],getdevic:143,getdiag:120,getdim:120,getdims:120,getelemtyp:120,getfeaturetyp:186,getfilenod:121,getfilenodebynam:121,getfilenodenam:121,getfirsttoplevelnod:125,getgaussiankernel:155,getgraphvtx:118,gethashedkei:121,gethistvalue_:167,getimag:120,getimagecoi:120,getimageroi:120,getindexparamet:136,getkerneltyp:155,getkeypoint:139,getlabelinfo:104,getlabelsbystr:104,getlikelihood:165,getlinearcolumnfilter_gpu:[141,192],getlinearrowfilter_gpu:[141,192],getlist:114,getmagno:112,getmat:120,getmaxfilter_gpu:141,getmean:165,getminfilter_gpu:141,getminmaxhistvalu:157,getnclust:165,getnextsparsenod:120,getnumberofcpu:124,getnumthread:124,getopencldevic:200,getopenclplatform:200,getoptimaldfts:123,getoptimalnewcameramatrix:101,getpackagenam:227,getparamet:112,getparvo:112,getpeopledetector48x96:[146,191],getpeopledetector64x128:[146,191],getperspectivetransform:156,getpos:223,getprob:165,getprop:223,getrawdata:120,getreal:120,getrectsubpix:156,getrenderingproperti:[222,223],getrootfilenod:121,getrotationmatrix2d:156,getrow:120,getrowsumfilter_gpu:141,getseqelem:118,getseqreaderpo:118,getsetelem:118,getsignatur:166,getsiz:120,getsparsesignatur:166,getstructuringel:155,getsubrect:120,gettext:223,gettexts:117,getthreadnum:124,gettickcount:124,gettickfrequ:124,gettrackbarpo:153,gettraindescriptor:127,gettrainimag:129,gettrainkeypoint:129,getvarimport:[172,181],getviewerpos:222,getvocabulari:133,getweight:165,getwidget:222,getwidgetpos:222,getwindowbynam:222,getwindownam:222,getwindowproperti:151,getwindows:222,git:[63,67,71],global:75,gmg_gpu:149,goal:[0,3,5,6,7,8,9,10,11,13,14,17,18,19,20,22,23,24,25,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,65,66,72,77,78,81,82,84,88,89,91,92],good:128,goodfeaturestotrack:154,goodfeaturestotrackdetector:128,goodfeaturestotrackdetector_gpu:149,goodfeaturestotrackdetector_ocl:201,gpu:[27,28,122,137,138,139,140,141,142,143,144,145,146,147,148,149,184],gpumat:138,grab:152,grabcut:159,gradient:[49,175],graphaddedg:118,graphaddedgebyptr:118,graphaddvtx:118,graphcutseamfind:214,graphcutseamfinderbas:214,graphedgeidx:118,graphremoveedg:118,graphremoveedgebyptr:118,graphremovevtx:118,graphremovevtxbyptr:118,graphvtxdegre:118,graphvtxdegreebyptr:118,graphvtxidx:118,gridadaptedfeaturedetector:128,grouprectangl:186,gui:[29,150],guid:[64,98],haar:186,handl:119,hardwar:[60,63],harri:25,haserror:149,hash:114,hat:49,hello:[61,77],hierarchicalclust:135,high:[29,150,210],highgui:[29,150],highlight:105,hint:80,histeven:142,histogram:[36,37,38,106,157,167],histrang:142,hogdescriptor:[146,191],home:66,homographi:20,homographybasedestim:213,horizont:3,host:60,hough:[43,44],houghcircl:[142,154],houghcirclesdownload:142,houghlin:[142,154],houghlinesdownload:142,houghlinesp:154,how:[10,25,27,31,35,38,39,42,44,48,66,75,81,231],hull:54,human:[3,112],humoment:162,hyperplan:81,idct:123,idft:123,imag:[3,5,7,10,13,25,31,34,38,41,50,53,55,57,62,65,72,76,78,96,97,106,108,110,111,141,142,152,155,156,158,159,192,193,207,212,215,216],imagefeatur:212,imatch:111,imdecod:152,imencod:152,imgproc:[57,158],implement:226,imread:152,imshow:153,imwrit:152,includ:80,increfdata:120,index_:136,indic:[99,107],info:59,inform:[122,143,144,194],init:[143,201,219],initasync:229,initcameramatrix2d:101,initdebug:229,initfont:117,initi:[61,149,230],initializecontext:200,initimagehead:120,initmathead:120,initmatndhead:120,initsparsematiter:120,inittreenodeiter:118,initundistortrectifymap:[101,156],inject:62,inpaint:203,input:[9,31,96],inputarrai:[114,119],inputs:112,inrang:123,insertimagecoi:123,insertnodeintotre:118,insid:75,instal:[62,67,71,74,76,227,231],integr:[142,159,193],intel:94,intens:96,interact:62,interfac:[80,126,127,128,129,153,163,164,226,227,230],intern:104,interoper:[11,122],interpolatefram:[149,201],introduct:[60,62,64,73,78,81,97,106,108,109,110,119,144,194,228],inv:114,invert:[58,123],invertaffinetransform:156,ios8:77,ipl:3,iplimag:[114,120],is_regress:176,iscompat:143,iscontinu:114,iscontourconvex:162,isinf:124,isint:125,ismap:125,ismasksupport:[127,129],isnam:125,isnan:[124,222],isnon:125,isopen:[125,149,152],isreal:125,isseq:125,isstart:149,isstr:125,isthreadsaf:212,istrain:174,item:13,iter:10,jar:62,java:[60,61,62,64,68,224,226,229],job:66,joi:66,jpg:97,kalmanfilt:[201,219],kernel:42,keyboardev:222,keypoint:[93,128,130],kinect:95,kinectcamera:222,kmean:[115,196],knearestneighbour:196,knnmatch:[127,129,139,191],knnmatchconvert:[139,191],knnmatchdownload:[139,191],knnsearch:136,known:20,labmethod:142,laplac:45,laplacian:[45,141,155,192],latent:187,latentsvmdetector:187,latest:[63,71],launch:89,learn:[83,177,196],legaci:168,leiningen:62,level:[29,150,210],lib:62,librari:[59,61,74,80,231],licens:62,limit:119,line:[44,60,67,71,75,117],linear:42,linearli:82,linearpolar:156,lineiter:117,link:77,linux:[60,63,71],literatur:106,load:[62,65,72,104,109,121,146,149,182,186,187,222],loader:[226,229,230],loadwindowparamet:151,local:[62,75,106],localrepo:62,locat:22,locateroi:114,log:[123,148,199],logpolar:156,lookup:10,lshift:148,lut:[123,147,199],mac:60,machin:[81,82,83,177,183,196],macro:124,made:4,magnitud:[123,147,199],magnitudesqr:147,magno:3,mahalanobi:123,majorvers:143,make:[42,69,74],makecamerapos:222,makegpucollect:[139,191],makehistheaderforarrai:157,makeseqheaderforarrai:118,maketransformtoglob:222,manag:[96,119,228,231,232],manual:[59,60],mapdevic:122,maphost:122,mark:97,mask:12,mat:[13,114,120],mat_:114,match:[19,39,93,127,129,130,139,191,212],matchconvert:[139,191],matchdownload:[139,191],matcher:[127,129,164],matchesinfo:212,matchshap:162,matchtempl:[142,161,197],matchtemplatebuf:[142,197],matmulderiv:101,matric:[12,147,199],matrix:[10,114,145,195],matx:114,max:[123,148,195],maxim:[165,174],mean:123,meanshift:219,meanshiftfilt:[142,193],meanshiftproc:[142,193],meanshiftsegment:[142,193],meanstddev:[123,145,199],measur:[10,31],media:[29,150],median:34,medianblur:155,medianfilt:192,memori:[10,76,96,119],memstoragealloc:118,memstorageallocstr:118,merg:[123,147,199],mesh:222,method:[10,12,13,39,75,112],mget:120,microsoft:75,mimet:112,mimic:62,min:[123,148,195],minarearect:162,minenclosingcircl:162,minmax:[145,195],minmaxidx:123,minmaxloc:[123,145,195],minorvers:143,miscellan:159,mix_train_and_test_idx:178,mixchannel:123,mldata:178,model:[3,104,112,175,182,187,228],modifi:72,modul:[2,4,15,21,28,29,57,83,85,87,144,194],mog2:201,mog2_gpu:149,mog:201,mog_gpu:149,moment:[55,162],more:[49,76],morpholog:[33,49],morphologyex:[141,155,192],motion:[3,160,169,219],motiv:82,mouseev:222,movewindow:153,mser:131,mserfeaturedetector:128,mset:120,mul:114,mulandscalespectrum:142,mulspectrum:[123,142],multi:[119,134],multibandblend:207,multipl:144,multipli:[123,148,199],multiprocessorcount:143,multranspos:123,name:[104,114,125,143],namedwindow:153,namespac:119,narymatiter:114,nativ:[60,61,62],nearest:[136,176],need:62,neg:97,neighbor:[136,176],network:179,neural:179,next:[59,60,62,123],nextfram:217,nextgraphitem:118,nexttreenod:118,noexposurecompens:209,non:[82,185],nonfre:185,nonlocalmean:142,norm:[123,145,199],normal:[34,123,147,180],normalizehist:157,noseamfind:214,note:[97,104,194],nvidia:144,nzcount:114,objdetect:[85,188],object:[13,16,20,85,133,146,160,161,186,187,188,197,219],objectdetect:187,obtainrefinedcameraparam:213,ocl:[184,189,191,192,193,195,196,197,198,199,200,201],oclcascadeclassifi:197,oclhaardetectobject:197,oclmat:199,of2:111,offer:36,offlin:31,ogl:122,onbeginfram:149,onendfram:149,onewaydescriptorbas:164,onewaydescriptormatch:164,onlin:31,onmanagerconnect:230,onpackageinstal:230,open:[49,125,149,152],opencl:[194,198],opencv4android:[59,225],opencv:[0,5,6,10,11,14,31,32,36,39,59,61,62,63,64,66,67,68,69,70,71,73,74,75,77,78,79,80,86,90,98,99,103,106,107,108,110,205,228,229,231,232],opencv_createsampl:97,openfabmap:111,openfilestorag:121,opengl:122,openni:95,oper:[12,33,45,47,58,96,101,113,114,120,123,125,131,137,139,147,148,149,184,189,199,201,212,213,219],opponentcolordescriptorextractor:126,optim:[27,63,81,82],orb:131,orb_gpu:139,orbfeaturesfind:212,other:[13,94,95],our:[10,12,30],output:[3,9,13,77,78,96,97,119],outputarrai:[114,119],outputs:112,overview:3,own:[23,42,74,114],pack:59,packag:[62,67,71,231],pairwiseseamfind:214,paramet:3,parsevideodata:149,part:[60,187],partit:115,parvo:3,path:74,pattern:106,pca:123,per:148,perceptu:94,perform:10,persist:[121,125],perspectivetransform:123,phase:[123,147,199],phasecorrel:160,photo:[3,204],photographi:204,pipelin:211,pixel:[7,96,119],planar:[16,170],planewarp:[210,216],platform:144,plugin:[62,69],png:97,pnsr:27,point3_:114,point:[6,56],point_:114,pointpolygontest:162,polartocart:[123,147,199],polygon:56,polylin:117,pop_back:114,pose:[1,92],posit:97,pow:[123,148,199],pre:74,preambl:62,precornerdetect:154,predict:[104,165,171,172,174,175,179,180,181,182,183,201,219],predict_prob:181,prefac:60,prepar:[97,106,207],prerequisit:[63,69,76,80,108,110],prevtreenod:118,pride:66,primit:96,printsetup:112,probabilist:44,problem:82,process:[3,7,57,78,80,142,158,193],program:70,project:[35,61,62,64,68,69,80,123],projectorbas:216,projectpoint:101,proper:[64,231],prune:171,psnr:31,ptr:[114,120],ptrstep:138,ptrstepsz:138,push_back:114,puttext:117,pyramid:50,pyramidadaptedfeaturedetector:128,pyrdown:[142,155,192],pyrlkopticalflow:[149,201],pyrmeanshiftfilt:155,pyrup:[142,155,192],queryhistvalu:167,queryifcomplet:138,quick:60,radiusmatch:[127,129,139,191],radiusmatchconvert:[139,191],radiusmatchdownload:[139,191],radiussearch:136,randarr:120,randint:120,randn:123,random:[14,173,181],randomizedtre:166,randreal:120,randshuffl:123,randu:123,rang:114,read:[31,62,67,114,121,125,129,149,152,165,166,174,182,186],read_csv:178,readbynam:121,readint:121,readintbynam:121,readobj:125,readraw:125,readrawdata:121,readrawdataslic:121,readreal:121,readrealbynam:121,readstr:121,readstringbynam:121,receptor:3,recognit:[106,107,110],recongit:110,reconstruct:[2,100,101,137,189],rect_:114,rectangl:117,rectstddev:142,reduc:[123,145],reduct:[145,195],refer:[10,96,205,211,225],registerkeyboardcallback:222,registermousecallback:222,registerpagelock:138,registertyp:121,regular:231,releas:[105,114,121,122,125,139,146,149,152,201],releaseandgetstr:125,releasebitstream:149,releasedata:120,releasefilestorag:121,releasegraphscann:118,releasehist:157,releaseimag:120,releaseimagehead:120,releasemat:120,releasematnd:120,releasememori:[149,201],releasememstorag:118,releasesparsemat:120,releasevideowrit:152,remap:[46,142,156,193],removeallwidget:222,removewidget:222,render:122,repeat:123,repl:62,repositori:[62,63,67,71],reprojectimageto3d:[101,137],requir:[67,71],reserv:114,resetcamera:222,resetcameraviewpoint:222,resetcolorarrai:122,resetdevic:143,resetimageroi:120,resetnormalarrai:122,resettexcoordarrai:122,resetvertexarrai:122,reshap:[114,120],reshapematnd:120,resiz:[114,142,156,193],resizewindow:153,resolut:[217,218],restorememstoragepo:118,result:[0,5,6,7,8,9,14,17,18,19,20,22,23,24,25,27,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,65,70,72,81,82,84,88,89,91,92,108,109,110],retina:[3,112],retinaparamet:112,retriev:152,rng:[120,123],rodrigu:101,root:125,rotat:[52,142,213],rotatedrect:114,rotationwarp:216,rotationwarperbas:216,round:124,row:114,rowrang:114,rqdecomp3x3:101,rshift:148,rtreeclassifi:166,rtreenod:166,run:[59,64,69,108,110,112],runat:186,safe:10,sampl:[59,61,62,64,97],satur:119,saturate_cast:124,save:[0,72,104,109,121,136,149,182],savememstoragepo:118,savescreenshot:222,savewindowparamet:151,sbt:64,scala:64,scalar:6,scalar_:114,scaleadd:123,scan:10,scharr:[141,155,192],script:60,sdk:[59,94],seam:214,seamfind:214,search:[134,136],segmentmot:219,select:231,selectpair:131,sensor:[94,95],senz3d:94,separ:82,sepfilter2d:[141,155,192],seqelemidx:118,seqinsert:118,seqinsertslic:118,seqinvert:118,seqpop:118,seqpopfront:118,seqpopmulti:118,seqpush:118,seqpushfront:118,seqpushmulti:118,seqremov:118,seqremoveslic:118,seqsearch:118,seqslic:118,seqsort:118,servic:226,set:[74,97,104,114,120,152,174],set_delimit:178,set_miss_ch:178,set_response_idx:178,set_train_test_split:178,set_var_typ:178,setadd:118,setautoreleas:122,setbackgroundcolor:222,setbinarypath:200,setcamera:222,setcolor:223,setcolorarrai:122,setcolorsatur:112,setdata:120,setdevic:[143,200],setfullscreen:222,setgldevic:122,sethistbinrang:157,setident:[123,199],setimag:[186,223],setimagecoi:120,setimageroi:120,setinput:217,setiplalloc:120,setlabelsinfo:104,setmousecallback:153,setnew:118,setnormalarrai:122,setnumthread:124,setopenglcontext:153,setopengldrawcallback:[151,153],setpos:223,setprop:223,setquant:166,setreal:120,setremov:118,setremovebyptr:118,setrenderingproperti:[222,223],setrepresent:222,setseqblocks:118,setseqreaderpo:118,setsvmdetector:[146,191],settexcoordarrai:122,settext:223,setto:[114,199],settrackbarpo:153,setup:[59,60,112],setupinitialcameraparam:213,setupiplmagnochannel:112,setupoplandiplparvochannel:112,setuseoptim:124,setvertexarrai:122,setviewerpos:222,setvocabulari:133,setwidgetpos:222,setwindow:186,setwindowposit:222,setwindowproperti:151,setwindows:222,setzero:120,shape:162,shi:24,show:97,showimag:222,showwidget:222,sift:184,similar:[27,31],simpleblobdetector:128,simplemethod:142,singl:97,size:[114,122,125],size_:114,smooth:[34,155],sobel:[47,141,155,192],solv:123,solvecub:123,solvepnp:101,solvepnpransac:[101,137],solvepoli:123,solvez:123,sort:123,sortbykei:199,sortidx:123,sourc:[0,8,9,27,31,32,62,63,65,66,67,71,74,81,82],space:134,sparcemat:114,spars:[149,201],sparsemat:114,sparsemat_:114,special:25,specif:62,sphericalwarp:[210,216],spin:222,spinonc:222,split:[123,147,199],sqr:148,sqrintegr:142,sqrsum:[145,195],sqrt:[123,148],squar:1,ssim:[27,31],stabl:[63,71],standard:44,staradjust:128,starfeaturedetector:128,start:[80,149,231],startappendtoseq:118,startnextstream:121,startreadrawdata:121,startreadseq:118,startwriteseq:118,startwritestruct:121,statist:182,statu:230,step1:114,step:[40,62,70],stereo:113,stereobeliefpropag:[137,189],stereobm:101,stereobm_gpu:137,stereobm_ocl:189,stereocalibr:101,stereoconstantspacebp:[137,189],stereorectifi:101,stereorectifyuncalibr:101,stereosgbm:101,stereovar:113,stitch:[210,211,215],stitcher:210,stop:149,storag:125,store:[10,13],stream:[31,138],streamaccessor:138,string:[125,227],structur:[32,60,114,118,120,138,162,190,200],studi:11,studio:[75,76],stuff:[102,168],subdiv2dedgedst:170,subdiv2dgetedg:170,subdiv2dloc:170,subdiv2dnextedg:170,subdiv2drotateedg:170,subdivdelaunay2dinsert:170,subdivis:170,subpixel:22,subtract:[123,148,199],sum:[123,145,195],superr:[217,218],superresolut:217,support:[81,82,143,183],surf:184,surf_gpu:184,surf_ocl:184,surfadjust:128,surffeaturesfind:212,svd:123,svm:[81,187],swapchannel:142,system:[63,74,124],tabl:[10,99,106,107,108,110],take:[62,66],target:122,targetarch:143,tegra:59,templat:[39,119],termcriteria:114,test:[10,12,56,60,68,75,97,111],text:14,texture2d:122,theori:[0,5,6,7,17,18,19,20,22,23,24,25,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,84],therng:123,thi:[62,64],thread:119,threshhist:157,threshold:[58,104,142,159,193],time:10,toc:66,tomasi:24,toofew:128,toomani:128,top:49,total:114,totalmemori:143,trace:123,track:[160,219],trackbar:30,train:[97,104,111,127,129,165,166,171,172,174,175,176,179,180,181,182,183,187,196],train_auto:183,transform:[7,8,43,44,48,49,91,123,156,159],transpos:[123,147,199],tree:[172,173,175,181],treetonodeseq:118,triangulatepoint:101,truncat:58,tutori:[3,26,62,66,86],two:5,type:[25,58,114,119,125],unbind:122,undistort:156,undistortimag:101,undistortpoint:[101,156],uniform:123,unmapdevic:122,unmaphost:122,unregisterpagelock:138,unregistertyp:121,updat:[104,149],updatemotionhistori:219,updatewidgetpos:[222,223],updatewindow:153,usag:228,useoptim:124,user:[59,80,98,153,228],util:[97,124,144,200],valu:96,variabl:[74,172],vec:[97,114],vector:[81,82,183],vectordescriptormatch:129,version:[63,71,229,231],video:[31,32,80,87,110,149,152,201,220],videocaptur:152,videoreader_gpu:149,videosourc:149,videowrit:152,videowriter_gpu:149,view:76,vision:[28,140,198],visual:[75,76,96,221],viz3d:222,viz:[89,90,221,222,223],voronoiseamfind:214,wai:10,wait_instal:227,waitforcomplet:138,waitkei:153,warp:216,warpaffin:[142,156,193],warpbackward:216,warpercr:210,warpperspect:[142,156,193],warppoint:216,warproi:216,warrow:223,wasstop:222,watch:76,watersh:159,wavecorrect:213,wavecorrectkind:213,wcameraposit:223,wcircl:223,wcloud:223,wcloudcollect:223,wcloudnorm:223,wcone:223,wcoordinatesystem:223,wcube:223,wcylind:223,welcom:99,well:66,wgrid:223,what:[3,25,35,36,38,39,42,46,48,58,59,60,62,64,81],which:39,why:25,widget2d:223,widget3d:223,widget:[88,92,223],widgetaccessor:223,wimage3d:223,wimageoverlai:223,window:[60,74],within:61,wline:223,wmesh:223,work:[25,35,38,39,42,44],workflow:231,wplane:223,wpolylin:223,write:[66,112,114,121,125,129,149,152,165,166,174,182],writecom:121,writefilenod:121,writeint:121,writeobj:125,writer:121,writeraw:125,writerawdata:121,writestr:121,wsphere:223,wtext3d:223,wtext:223,wtrajectori:223,wtrajectoryfrustum:223,wtrajectoryspher:223,wwidgetmerg:223,xcode5:77,xml:[9,96,121,125],yale:106,yaml:[9,96,121,125],yor:23,you:36,your:[41,42,53,61,74,80],zero:[58,114]}})